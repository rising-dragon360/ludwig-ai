{
  "config": {
    "lang": [
      "en"
    ],
    "prebuild_index": false,
    "separator": "[\\s\\-]+"
  },
  "docs": [
    {
      "location": "",
      "text": "About",
      "title": "About"
    },
    {
      "location": "api/",
      "text": "ludwig.api.LudwigModel \u00b6 ludwig.visualization \u00b6",
      "title": "Api"
    },
    {
      "location": "api/#ludwigapiludwigmodel",
      "text": "",
      "title": "ludwig.api.LudwigModel"
    },
    {
      "location": "api/#ludwigvisualization",
      "text": "",
      "title": "ludwig.visualization"
    },
    {
      "location": "developer_guide/",
      "text": "Codebase Structure \u00b6 The codebase is organized in a modular, datatype / feature centric way so that adding a feature for a new datatype is pretty straightforward and requires isolated code changes. All the datatype specific logic lives in the corresponding feature module all of which are under ludwig/features/ . Feature classes contain raw data preprocessing logic specific to each data type. All input (output) features implement build_input ( build_output ) method which is used to build encodings (decode outputs). Output features also contain datatype-specific logic to compute output measures such as loss, accuracy, etc. Encoders and decoders are modularized as well (they are under ludwig/models/modules ) so that they can be used by multiple features. For example sequence encoders are shared among text, sequence, and timeseries features. Various model architecture components which can be reused are also split into dedicated modules, for example convolutional modules, fully connected modules, etc. Bulk of the training logic resides in ludwig/models/model.py which initializes a tensorflow session, feeds the data, and executes training. Adding an Encoder \u00b6 1. Add a new encoder class \u00b6 Source code for encoders lives under ludwig/models/modules . New encoder objects should be defined in the corresponding files, for example all new sequence encoders should be added to ludwig/models/modules/sequence_encoders.py . All the encoder parameters should be provided as arguments in the constructor with their default values set. For example RNN encoder takes the following list of arguments in its constructor: def __init__ ( self , should_embed = True , vocab = None , representation = 'dense' , embedding_size = 256 , embeddings_trainable = True , pretrained_embeddings = None , embeddings_on_cpu = False , num_layers = 1 , state_size = 256 , cell_type = 'rnn' , bidirectional = False , dropout = False , initializer = None , regularize = True , reduce_output = 'last' , ** kwargs ): Typically all the dependencies are initialized in the encoder's constructor (in the case of the RNN encoder these are EmbedSequence and RecurrentStack modules) so that at the end of the constructor call all the layers are fully described. Actual creation of tensorflow variables takes place inside the __call__ method of the encoder. All encoders should have the following signature: __call__ ( self , input_placeholder , regularizer , dropout , is_training ) Inputs input_placeholder (tf.Tensor): input tensor. regularizer (A (Tensor -> Tensor or None) function): regularizer function passed to tf.get_variable method. dropout (tf.Tensor(dtype: tf.float32)): dropout rate. is_training (tf.Tensor(dtype: tf.bool), default: True ): boolean indicating whether this is a training dataset. Return hidden (tf.Tensor(dtype: tf.float32)): feature encodings. hidden_size (int): feature encodings size. Encoders are initialized as class member variables in input feature object constructors and called inside build_input methods. 2. Add the new encoder class to the corresponding encoder registry \u00b6 Mapping between encoder keywords in the model definition and encoder classes is done by encoder registries: for example sequence encoder registry is defined in ludwig/features/sequence_feature.py sequence_encoder_registry = { 'stacked_cnn': StackedCNN, 'parallel_cnn': ParallelCNN, 'stacked_parallel_cnn': StackedParallelCNN, 'rnn': RNN, 'cnnrnn': CNNRNN, 'embed': EmbedEncoder } Adding a Decoder \u00b6 1. Add a new decoder class \u00b6 Souce code for decoders lives under ludwig/models/modules . New decoder objects should be defined in the corresponding files, for example all new sequence decoders should be added to ludwig/models/modules/sequence_decoders.py . All the decoder parameters should be provided as arguments in the constructor with their default values set. For example Generator decoder takes the following list of arguments in its constructor: __init__ ( self , cell_type = 'rnn' , state_size = 256 , embedding_size = 64 , beam_width = 1 , num_layers = 1 , attention_mechanism = None , tied_embeddings = None , initializer = None , regularize = True , ** kwargs ) Decoders are initialized as class member variables in output feature object constructors and called inside build_output methods. 2. Add the new decoder class to the corresponding decoder registry \u00b6 Mapping between decoder keywords in the model definition and decoder classes is done by decoder registries: for example sequence decoder registry is defined in ludwig/features/sequence_feature.py sequence_decoder_registry = { 'generator' : Generator , 'tagger' : Tagger } Adding a new Feature Type \u00b6 1. Add a new feature class \u00b6 Souce code for feature classes lives under ludwig/features . Input and output feature classes are defined in the same file, for example CategoryInputFeature and CategoryOutputFeature are defined in ludwig/features/category_feature.py . An input features inherit from the InputFeature and corresponding base feature classes, for example CategoryInputFeature inherits from CategoryBaseFeature and InputFeature . Similarly, output features inherit from the OutputFeature and corresponding base feature classes, for example CategoryOutputFeature inherits from CategoryBaseFeature and OutputFeature . Feature parameters are provided in a dictionary of key-value pairs as an argument to the input or output feature constructor which contains default parameter values as well. All input and output features should implement build_input and build_output methods correspondingly with the following signatures: build_input \u00b6 build_input ( self , regularizer , dropout_rate , is_training = False , ** kwargs ) Inputs regularizer (A (Tensor -> Tensor or None) function): regularizer function passed to tf.get_variable method. dropout_rate (tf.Tensor(dtype: tf.float32)): dropout rate. is_training (tf.Tensor(dtype: tf.bool), default: True ): boolean indicating whether this is a training dataset. Return feature_representation (dict): the following dictionary { 'type' : self . type , # str 'representation' : feature_representation , # tf.Tensor(dtype: tf.float32) 'size' : feature_representation_size , # int 'placeholder' : placeholder # tf.Tensor(dtype: tf.float32) } build_output \u00b6 build_output ( self , hidden , hidden_size , regularizer = None , ** kwargs ) Inputs hidden (tf.Tensor(dtype: tf.float32)): output feature representation. hidden_size (int): output feature representation size. regularizer (A (Tensor -> Tensor or None) function): regularizer function passed to tf.get_variable method. Return - train_mean_loss (tf.Tensor(dtype: tf.float32)): mean loss for train dataset. - eval_loss (tf.Tensor(dtype: tf.float32)): mean loss for evaluation dataset. - output_tensors (dict): dictionary containing feature specific output tensors (predictions, probabilities, losses, etc). 2. Add the new feature class to the corresponding feature registry \u00b6 Input and output feature registries are defined in ludwig/features/feature_registries.py . Style Guidelines \u00b6 We expect contributions to mimic existing patterns in the codebase and demonstrate good practices: the code should be concise, readable, PEP8-compliant, and conforming to 80 character line length limit. Tests \u00b6 We are using pytest to run tests. Current test coverage is limited to several integration tests which ensure end-to-end functionality but we are planning to expand it. Checklist \u00b6 Before running tests, make sure 1. Your environment is properly setup. 2. You have write access on the machine. Some of the tests require saving data to disk. Running tests \u00b6 To run all tests, just run python -m pytest from the ludwig root directory. Note that you don't need to have ludwig module installed and in this case code change will take effect immediately. To run a single test, run python -m pytest path_to_filename::test_method_name Example \u00b6 python -m pytest tests/integration_tests/test_experiment.py::test_visual_question_answering",
      "title": "Developer Guide"
    },
    {
      "location": "developer_guide/#codebase-structure",
      "text": "The codebase is organized in a modular, datatype / feature centric way so that adding a feature for a new datatype is pretty straightforward and requires isolated code changes. All the datatype specific logic lives in the corresponding feature module all of which are under ludwig/features/ . Feature classes contain raw data preprocessing logic specific to each data type. All input (output) features implement build_input ( build_output ) method which is used to build encodings (decode outputs). Output features also contain datatype-specific logic to compute output measures such as loss, accuracy, etc. Encoders and decoders are modularized as well (they are under ludwig/models/modules ) so that they can be used by multiple features. For example sequence encoders are shared among text, sequence, and timeseries features. Various model architecture components which can be reused are also split into dedicated modules, for example convolutional modules, fully connected modules, etc. Bulk of the training logic resides in ludwig/models/model.py which initializes a tensorflow session, feeds the data, and executes training.",
      "title": "Codebase Structure"
    },
    {
      "location": "developer_guide/#adding-an-encoder",
      "text": "",
      "title": "Adding an Encoder"
    },
    {
      "location": "developer_guide/#1-add-a-new-encoder-class",
      "text": "Source code for encoders lives under ludwig/models/modules . New encoder objects should be defined in the corresponding files, for example all new sequence encoders should be added to ludwig/models/modules/sequence_encoders.py . All the encoder parameters should be provided as arguments in the constructor with their default values set. For example RNN encoder takes the following list of arguments in its constructor: def __init__ ( self , should_embed = True , vocab = None , representation = 'dense' , embedding_size = 256 , embeddings_trainable = True , pretrained_embeddings = None , embeddings_on_cpu = False , num_layers = 1 , state_size = 256 , cell_type = 'rnn' , bidirectional = False , dropout = False , initializer = None , regularize = True , reduce_output = 'last' , ** kwargs ): Typically all the dependencies are initialized in the encoder's constructor (in the case of the RNN encoder these are EmbedSequence and RecurrentStack modules) so that at the end of the constructor call all the layers are fully described. Actual creation of tensorflow variables takes place inside the __call__ method of the encoder. All encoders should have the following signature: __call__ ( self , input_placeholder , regularizer , dropout , is_training ) Inputs input_placeholder (tf.Tensor): input tensor. regularizer (A (Tensor -> Tensor or None) function): regularizer function passed to tf.get_variable method. dropout (tf.Tensor(dtype: tf.float32)): dropout rate. is_training (tf.Tensor(dtype: tf.bool), default: True ): boolean indicating whether this is a training dataset. Return hidden (tf.Tensor(dtype: tf.float32)): feature encodings. hidden_size (int): feature encodings size. Encoders are initialized as class member variables in input feature object constructors and called inside build_input methods.",
      "title": "1. Add a new encoder class"
    },
    {
      "location": "developer_guide/#2-add-the-new-encoder-class-to-the-corresponding-encoder-registry",
      "text": "Mapping between encoder keywords in the model definition and encoder classes is done by encoder registries: for example sequence encoder registry is defined in ludwig/features/sequence_feature.py sequence_encoder_registry = { 'stacked_cnn': StackedCNN, 'parallel_cnn': ParallelCNN, 'stacked_parallel_cnn': StackedParallelCNN, 'rnn': RNN, 'cnnrnn': CNNRNN, 'embed': EmbedEncoder }",
      "title": "2. Add the new encoder class to the corresponding encoder registry"
    },
    {
      "location": "developer_guide/#adding-a-decoder",
      "text": "",
      "title": "Adding a Decoder"
    },
    {
      "location": "developer_guide/#1-add-a-new-decoder-class",
      "text": "Souce code for decoders lives under ludwig/models/modules . New decoder objects should be defined in the corresponding files, for example all new sequence decoders should be added to ludwig/models/modules/sequence_decoders.py . All the decoder parameters should be provided as arguments in the constructor with their default values set. For example Generator decoder takes the following list of arguments in its constructor: __init__ ( self , cell_type = 'rnn' , state_size = 256 , embedding_size = 64 , beam_width = 1 , num_layers = 1 , attention_mechanism = None , tied_embeddings = None , initializer = None , regularize = True , ** kwargs ) Decoders are initialized as class member variables in output feature object constructors and called inside build_output methods.",
      "title": "1. Add a new decoder class"
    },
    {
      "location": "developer_guide/#2-add-the-new-decoder-class-to-the-corresponding-decoder-registry",
      "text": "Mapping between decoder keywords in the model definition and decoder classes is done by decoder registries: for example sequence decoder registry is defined in ludwig/features/sequence_feature.py sequence_decoder_registry = { 'generator' : Generator , 'tagger' : Tagger }",
      "title": "2. Add the new decoder class to the corresponding decoder registry"
    },
    {
      "location": "developer_guide/#adding-a-new-feature-type",
      "text": "",
      "title": "Adding a new Feature Type"
    },
    {
      "location": "developer_guide/#1-add-a-new-feature-class",
      "text": "Souce code for feature classes lives under ludwig/features . Input and output feature classes are defined in the same file, for example CategoryInputFeature and CategoryOutputFeature are defined in ludwig/features/category_feature.py . An input features inherit from the InputFeature and corresponding base feature classes, for example CategoryInputFeature inherits from CategoryBaseFeature and InputFeature . Similarly, output features inherit from the OutputFeature and corresponding base feature classes, for example CategoryOutputFeature inherits from CategoryBaseFeature and OutputFeature . Feature parameters are provided in a dictionary of key-value pairs as an argument to the input or output feature constructor which contains default parameter values as well. All input and output features should implement build_input and build_output methods correspondingly with the following signatures:",
      "title": "1. Add a new feature class"
    },
    {
      "location": "developer_guide/#build_input",
      "text": "build_input ( self , regularizer , dropout_rate , is_training = False , ** kwargs ) Inputs regularizer (A (Tensor -> Tensor or None) function): regularizer function passed to tf.get_variable method. dropout_rate (tf.Tensor(dtype: tf.float32)): dropout rate. is_training (tf.Tensor(dtype: tf.bool), default: True ): boolean indicating whether this is a training dataset. Return feature_representation (dict): the following dictionary { 'type' : self . type , # str 'representation' : feature_representation , # tf.Tensor(dtype: tf.float32) 'size' : feature_representation_size , # int 'placeholder' : placeholder # tf.Tensor(dtype: tf.float32) }",
      "title": "build_input"
    },
    {
      "location": "developer_guide/#build_output",
      "text": "build_output ( self , hidden , hidden_size , regularizer = None , ** kwargs ) Inputs hidden (tf.Tensor(dtype: tf.float32)): output feature representation. hidden_size (int): output feature representation size. regularizer (A (Tensor -> Tensor or None) function): regularizer function passed to tf.get_variable method. Return - train_mean_loss (tf.Tensor(dtype: tf.float32)): mean loss for train dataset. - eval_loss (tf.Tensor(dtype: tf.float32)): mean loss for evaluation dataset. - output_tensors (dict): dictionary containing feature specific output tensors (predictions, probabilities, losses, etc).",
      "title": "build_output"
    },
    {
      "location": "developer_guide/#2-add-the-new-feature-class-to-the-corresponding-feature-registry",
      "text": "Input and output feature registries are defined in ludwig/features/feature_registries.py .",
      "title": "2. Add the new feature class to the corresponding feature registry"
    },
    {
      "location": "developer_guide/#style-guidelines",
      "text": "We expect contributions to mimic existing patterns in the codebase and demonstrate good practices: the code should be concise, readable, PEP8-compliant, and conforming to 80 character line length limit.",
      "title": "Style Guidelines"
    },
    {
      "location": "developer_guide/#tests",
      "text": "We are using pytest to run tests. Current test coverage is limited to several integration tests which ensure end-to-end functionality but we are planning to expand it.",
      "title": "Tests"
    },
    {
      "location": "developer_guide/#checklist",
      "text": "Before running tests, make sure 1. Your environment is properly setup. 2. You have write access on the machine. Some of the tests require saving data to disk.",
      "title": "Checklist"
    },
    {
      "location": "developer_guide/#running-tests",
      "text": "To run all tests, just run python -m pytest from the ludwig root directory. Note that you don't need to have ludwig module installed and in this case code change will take effect immediately. To run a single test, run python -m pytest path_to_filename::test_method_name",
      "title": "Running tests"
    },
    {
      "location": "developer_guide/#example",
      "text": "python -m pytest tests/integration_tests/test_experiment.py::test_visual_question_answering",
      "title": "Example"
    },
    {
      "location": "examples/",
      "text": "This section contains several examples of how to build models with Ludwig for a variety of tasks. For each task we show an example dataset and a sample model definition that can be used to train a model from that data. Text Classification \u00b6 This example shows how to build a text classifier with Ludwig. It can be performed using the Reuters-21578 dataset, in particular the version available on CMU's Text Analitycs course website . Other datasets available on the same webpage, like OHSUMED , is a well-known medical abstracts dataset, and Epinions.com , a dataset of product reviews, can be used too as the name of the columns is the same. text class Toronto Feb 26 - Standard Trustco said it expects earnings in 1987 to increase at least 15... earnings New York Feb 26 - American Express Co remained silent on market rumors... acquisition BANGKOK March 25 - Vietnam will resettle 300000 people on state farms known as new economic... coffee ludwig experiment \\ --data_csv text_classification.csv \\ --model_definition_file model_definition.yaml With model_definition.yaml : input_features : - name : text type : text level : word encoder : parallel_cnn output_features : - name : class type : category Named Entity Recognition Tagging \u00b6 utterance tag Blade Runner is a 1982 neo-noir science fiction film directed by Ridley Scott Movie Movie O O Date O O O O O O Person Person Harrison Ford and Rutger Hauer starred in it Person Person O Person person O O O Philip Dick 's novel Do Androids Dream of Electric Sheep ? was published in 1968 Person Person O O Book Book Book Book Book Book Book O O O Date ludwig experiment \\ --data_csv sequence_tags.csv \\ --model_definition_file model_definition.yaml With model_definition.yaml : input_features : - name : utterance type : text level : word encoder : rnn cell_type : lstm reduce_output : null preprocessing : word_format : space output_features : - name : tag type : sequence decoder : tagger Natural Language Understanding \u00b6 utterance intent slots I want a pizza order_food O O O B-Food_type Book a flight to Boston book_flight O O O O B-City Book a flight at 7pm to London book_flight O O O O B-Departure_time O B-City ludwig experiment \\ --data_csv nlu.csv \\ --model_definition_file model_definition.yaml With model_definition.yaml : input_features : - name : utterance type : text level : word encoder : rnn cell_type : lstm bidirectional : true num_layers : 2 reduce_output : null preprocessing : word_format : space output_features : - name : intent type : category reduce_input : sum num_fc_layers : 1 fc_size : 64 - name : slots type : sequence decoder : tagger Machine Translation \u00b6 english italian Hello! How are you doing? Ciao, come stai? I got promoted today Oggi sono stato promosso! Not doing well today Oggi non mi sento bene ludwig experiment \\ --data_csv translation.csv \\ --model_definition_file model_definition.yaml With model_definition.yaml : input_features : - name : english type : text level : word encoder : rnn cell_type : lstm reduce_output : null preprocessing : word_format : english_tokenize output_features : - name : italian type : text level : word decoder : generator cell_type : lstm attention : bahdanau loss : type : sampled_softmax_cross_entropy preprocessing : word_format : italian_tokenize training : batch_size : 96 Chit-Chat Dialogue Modeling through Sequence2Sequence \u00b6 user1 user2 Hello! How are you doing? Doing well, thanks! I got promoted today Congratulations! Not doing well today I\u2019m sorry, can I do something to help you? ludwig experiment \\ --data_csv chitchat.csv \\ --model_definition_file model_definition.yaml With model_definition.yaml : input_features : - name : user1 type : text level : word encoder : rnn cell_type : lstm reduce_output : null output_features : - name : user2 type : text level : word decoder : generator cell_type : lstm attention : bahdanau loss : type : sampled_softmax_cross_entropy training : batch_size : 96 Sentiment Analysis \u00b6 review sentiment The movie was fantastic! positive Great acting and cinematography positive The acting was terrible! negative ludwig experiment \\ --data_csv sentiment.csv \\ --model_definition_file model_definition.yaml With model_definition.yaml : input_features : - name : review type : text level : word encoder : parallel_cnn output_features : - name : sentiment type : category Image Classification \u00b6 image_path class images/image_000001.jpg car images/image_000002.jpg dog images/image_000003.jpg boat ludwig experiment \\ --data_csv image_classification.csv \\ --model_definition_file model_definition.yaml With model_definition.yaml : input_features : - name : image_path type : image encoder : stacked_cnn output_features : - name : class type : category Image Classification (MNIST) \u00b6 This is a complete example of training an image classification model on the MNIST dataset. Download the MNIST dataset. \u00b6 git clone https://github.com/myleott/mnist_png.git cd mnist_png/ tar -xf mnist_png.tar.gz cd mnist_png/ Create train and test CSVs. \u00b6 Open python shell in the same directory and run this: import os for name in ['training', 'testing']: with open('mnist_dataset_{}.csv'.format(name), 'w') as output_file: print('=== creating {} dataset ==='.format(name)) output_file.write('image_path,label\\n') for i in range(10): path = '{}/{}'.format(name, i) for file in os.listdir(path): if file.endswith(\".png\"): output_file.write('{},{}\\n'.format(os.path.join(path, file), str(i))) Now you should have mnist_dataset_training.csv and mnist_dataset_testing.csv containing 60000 and 10000 examples correspondingly and having the following format image_path label training/0/16585.png 0 training/0/24537.png 0 training/0/25629.png 0 Train a model. \u00b6 From the directory where you have virtual environment with ludwig installed: ludwig train \\ --data_train_csv <PATH_TO_MNIST_DATASET_TRAINING_CSV> \\ --data_test_csv <PATH_TO_MNIST_DATASET_TEST_CSV> \\ --model_definition_file model_definition.yaml With model_definition.yaml : input_features : - name : image_path type : image encoder : stacked_cnn conv_layers : - num_filters : 32 filter_size : 3 pool_size : 2 pool_stride : 2 - num_filters : 64 filter_size : 3 pool_size : 2 pool_stride : 2 dropout : true fc_layers : - fc_size : 128 dropout : true output_features : - name : label type : category training : dropout_rate : 0.4 Image Captioning \u00b6 image_path caption imagenet/image_000001.jpg car driving on the street imagenet/image_000002.jpg dog barking at a cat imagenet/image_000003.jpg boat sailing in the ocean ludwig experiment \\ --data_csv image captioning.csv \\ --model_definition_file model_definition.yaml With model_definition.yaml : input_features : - name : image_path type : image encoder : stacked_cnn output_features : - name : caption type : text level : word decoder : generator cell_type : lstm One-shot Learning with Siamese Networks \u00b6 This example can be considered a simple baseline for one-shot learning on the Omniglot dataset. The task is, given two images of two handwritten characters, recognize if they are two instances of the same character or not. image_path_1 image_path_2 similarity balinese/character01/0108_13.png balinese/character01/0108_18.png 1 balinese/character01/0108_13.png balinese/character08/0115_12.png 0 balinese/character01/0108_04.png balinese/character01/0108_08.png 1 balinese/character01/0108_11.png balinese/character05/0112_02.png 0 ludwig experiment \\ --data_csv balinese_characters.csv \\ --model_definition_file model_definition.yaml With model_definition.yaml : input_features : - name : image_path_1 type : image encoder : stacked_cnn preprocessing : width : 28 height : 28 resize_image : true - name : image_path_2 type : image encoder : stacked_cnn resize_image : true width : 28 height : 28 tied_weights : image_path_1 combiner : type : concat num_fc_layers : 2 fc_size : 256 output_features : - name : similarity type : binary Visual Question Answering \u00b6 image_path question answer imdata/image_000001.jpg Is there snow on the mountains? yes imdata/image_000002.jpg What color are the wheels blue imdata/image_000003.jpg What kind of utensil is in the glass bowl knife ludwig experiment \\ --data_csv vqa.csv \\ --model_definition_file model_definition.yaml With model_definition.yaml : input_features : - name : image_path type : image encoder : stacked_cnn - name : question type : text level : word encoder : parallel_cnn output_features : - name : answer type : text level : word decoder : generator cell_type : lstm loss : type : sampled_softmax_cross_entropy Speaker Verification \u00b6 This example describes how to use Ludwig for a simple speaker verification task. We assume to have the following data with label 0 corresponding to an audio file of an unauthorized voice and label 1 corresponding to an audio file of an authorized voice. The sample data looks as follows: audio_path label audiodata/audio_000001.wav 0 audiodata/audio_000002.wav 0 audiodata/audio_000003.wav 1 audiodata/audio_000004.wav 1 ludwig experiment \\ --data_csv speaker_verification.csv \\ --model_definition_file model_definition.yaml With model_definition.yaml : input_features : - name : audio_path type : audio preprocessing : audio_file_length_limit_in_s : 7.0 audio_feature : type : stft window_length_in_s : 0.04 window_shift_in_s : 0.02 encoder : cnnrnn output_features : - name : label type : binary Kaggle's Titanic: Predicting survivors \u00b6 This example describes how to use Ludwig to train a model for the kaggle competition , on predicting a passenger's probability of surviving the Titanic disaster. Here's a sample of the data: Pclass Sex Age SibSp Parch Fare Survived Embarked 3 male 22 1 0 7.2500 0 S 1 female 38 1 0 71.2833 1 C 3 female 26 0 0 7.9250 0 S 3 male 35 0 0 8.0500 0 S The full data and the column descriptions can be found here . After downloading the data, to train a model on this dataset using Ludwig, ludwig experiment \\ --data_csv <PATH_TO_TITANIC_CSV> \\ --model_definition_file model_definition.yaml With model_definition.yaml : input_features : - name : Pclass type : category - name : Sex type : category - name : Age type : numerical preprocessing : missing_value_strategy : fill_with_mean - name : SibSp type : numerical - name : Parch type : numerical - name : Fare type : numerical preprocessing : missing_value_strategy : fill_with_mean - name : Embarked type : category output_features : - name : Survived type : binary Better results can be obtained with morerefined feature transformations and preprocessing, but this example has the only aim to show how this type do tasks and data can be used in Ludwig. Time series forecasting \u00b6 While direct timeseries prediction is a work in progress Ludwig can ingest timeseries input feature data and make numerical predictions. Below is an example of a model trained to forecast timeseries at five different horizons. timeseries_data y1 y2 y3 y4 y5 15.07 14.89 14.45 ... 16.92 16.67 16.48 17.00 17.02 14.89 14.45 14.30 ... 16.67 16.48 17.00 17.02 16.48 14.45 14.3 14.94 ... 16.48 17.00 17.02 16.48 15.82 ludwig experiment \\ --data_csv timeseries_data.csv \\ --model_definition_file model_definition.yaml With model_definition.yaml : input_features : - name : timeseries_data type : timeseries output_features : - name : y1 type : numerical - name : y2 type : numerical - name : y3 type : numerical - name : y4 type : numerical - name : y5 type : numerical Time series forecasting (weather data example) \u00b6 This example illustrates univariate timeseries forecasting using historical temperature data for Los Angeles. Dowload and unpack historical hourly weather data available on Kaggle https://www.kaggle.com/selfishgene/historical-hourly-weather-data Run the following python script to prepare the training dataset: import pandas as pd from ludwig.utils.data_utils import add_sequence_feature_column df = pd.read_csv( '<PATH_TO_FILE>/temperature.csv', usecols=['Los Angeles'] ).rename( columns={\"Los Angeles\": \"temperature\"} ).fillna(method='backfill').fillna(method='ffill') # normalize df.temperature = ((df.temperature-df.temperature.mean()) / df.temperature.std()) train_size = int(0.6 * len(df)) vali_size = int(0.2 * len(df)) # train, validation, test split df['split'] = 0 df.loc[ ( (df.index.values >= train_size) & (df.index.values < train_size + vali_size) ), ('split') ] = 1 df.loc[ df.index.values >= train_size + vali_size, ('split') ] = 2 # prepare timeseries input feature colum # (here we are using 20 preceeding values to predict the target) add_sequence_feature_column(df, 'temperature', 20) df.to_csv('<PATH_TO_FILE>/temperature_la.csv') ludwig experiment \\ --data_csv <PATH_TO_FILE>/temperature_la.csv \\ --model_definition_file model_definition.yaml With model_definition.yaml : input_features : - name : temperature_feature type : timeseries encoder : rnn embedding_size : 32 state_size : 32 output_features : - name : temperature type : numerical Movie rating prediction \u00b6 year duration nominations categories rating 1921 3240 0 comedy drama 8.4 1925 5700 1 adventure comedy 8.3 1927 9180 4 drama comedy scifi 8.4 ludwig experiment \\ --data_csv movie_ratings.csv \\ --model_definition_file model_definition.yaml With model_definition.yaml : input_features : - name : year type : numerical - name : duration type : numerical - name : nominations type : numerical - name : categories type : set output_features : - name : rating type : numerical Multi-label classification \u00b6 image_path tags images/image_000001.jpg car man images/image_000002.jpg happy dog tie images/image_000003.jpg boat water ludwig experiment \\ --data_csv image_data.csv \\ --model_definition_file model_definition.yaml With model_definition.yaml : input_features : - name : image_path type : image encoder : stacked_cnn output_features : - name : tags type : set Multi-Task Learning \u00b6 This example is inspired by the classic paper Natural Language Processing (Almost) from Scratch by Collobert et al.. sentence chunks part_of_speech named_entities San Francisco is very foggy B-NP I-NP B-VP B-ADJP I-ADJP NNP NNP VBZ RB JJ B-Loc I-Loc O O O My dog likes eating sausage B-NP I-NP B-VP B-VP B-NP PRP NN VBZ VBG NN O O O O O Brutus Killed Julius Caesar B-NP B-VP B-NP I-NP NNP VBD NNP NNP B-Per O B-Per I-Per ludwig experiment \\ --data_csv nl_data.csv \\ --model_definition_file model_definition.yaml With model_definition.yaml : input_features : - name : sentence type : sequence encoder : rnn cell : lstm bidirectional : true reduce_output : null output_features : - name : chunks type : sequence decoder : tagger - name : part_of_speech type : sequence decoder : tagger - name : named_entities type : sequence decoder : tagger Simple Regression: Fuel Efficiency Prediction \u00b6 This example replicates the Keras example at https://www.tensorflow.org/tutorials/keras/basic_regression to predict the miles per gallon of a car given its characteristics in the Auto MPG dataset. MPG Cylinders Displacement Horsepower Weight Acceleration ModelYear Origin 18.0 8 307.0 130.0 3504.0 12.0 70 1 15.0 8 350.0 165.0 3693.0 11.5 70 1 18.0 8 318.0 150.0 3436.0 11.0 70 1 16.0 8 304.0 150.0 3433.0 12.0 70 1 ludwig experiment \\ --data_csv auto_mpg.csv \\ --model_definition_file model_definition.yaml With model_definition.yaml : training : batch_size : 32 epochs : 1000 early_stop : 50 learning_rate : 0.001 optimizer : type : rmsprop input_features : - name : Cylinders type : numerical - name : Displacement type : numerical - name : Horsepower type : numerical - name : Weight type : numerical - name : Acceleration type : numerical - name : ModelYear type : numerical - name : Origin type : category output_features : - name : MPG type : numerical optimizer : type : mean_squared_error num_fc_layers : 2 fc_size : 64 Binary Classification: Fraud Transactions Identification \u00b6 transaction_id card_id customer_id customer_zipcode merchant_id merchant_name merchant_category merchant_zipcode merchant_country transaction_amount authorization_response_code atm_network_xid cvv_2_response_xflg fraud_label 469483 9003 1085 23039 893 Wright Group 7917 91323 GB 1962 C C N 0 926515 9009 1001 32218 1011 Mums Kitchen 5813 10001 US 1643 C D M 1 730021 9064 1174 9165 916 Keller 7582 38332 DE 1184 D B M 0 ludwig experiment \\ --data_csv transactions.csv \\ --model_definition_file model_definition.yaml With model_definition.yaml : input_features : - name : customer_id type : category - name : card_id type : category - name : merchant_id type : category - name : merchant_category type : category - name : merchant_zipcode type : category - name : transaction_amount type : numerical - name : authorization_response_code type : category - name : atm_network_xid type : category - name : cvv_2_response_xflg type : category combiner : type : concat num_fc_layers : 1 fc_size : 48 output_features : - name : fraud_label type : binary",
      "title": "Examples"
    },
    {
      "location": "examples/#text-classification",
      "text": "This example shows how to build a text classifier with Ludwig. It can be performed using the Reuters-21578 dataset, in particular the version available on CMU's Text Analitycs course website . Other datasets available on the same webpage, like OHSUMED , is a well-known medical abstracts dataset, and Epinions.com , a dataset of product reviews, can be used too as the name of the columns is the same. text class Toronto Feb 26 - Standard Trustco said it expects earnings in 1987 to increase at least 15... earnings New York Feb 26 - American Express Co remained silent on market rumors... acquisition BANGKOK March 25 - Vietnam will resettle 300000 people on state farms known as new economic... coffee ludwig experiment \\ --data_csv text_classification.csv \\ --model_definition_file model_definition.yaml With model_definition.yaml : input_features : - name : text type : text level : word encoder : parallel_cnn output_features : - name : class type : category",
      "title": "Text Classification"
    },
    {
      "location": "examples/#named-entity-recognition-tagging",
      "text": "utterance tag Blade Runner is a 1982 neo-noir science fiction film directed by Ridley Scott Movie Movie O O Date O O O O O O Person Person Harrison Ford and Rutger Hauer starred in it Person Person O Person person O O O Philip Dick 's novel Do Androids Dream of Electric Sheep ? was published in 1968 Person Person O O Book Book Book Book Book Book Book O O O Date ludwig experiment \\ --data_csv sequence_tags.csv \\ --model_definition_file model_definition.yaml With model_definition.yaml : input_features : - name : utterance type : text level : word encoder : rnn cell_type : lstm reduce_output : null preprocessing : word_format : space output_features : - name : tag type : sequence decoder : tagger",
      "title": "Named Entity Recognition Tagging"
    },
    {
      "location": "examples/#natural-language-understanding",
      "text": "utterance intent slots I want a pizza order_food O O O B-Food_type Book a flight to Boston book_flight O O O O B-City Book a flight at 7pm to London book_flight O O O O B-Departure_time O B-City ludwig experiment \\ --data_csv nlu.csv \\ --model_definition_file model_definition.yaml With model_definition.yaml : input_features : - name : utterance type : text level : word encoder : rnn cell_type : lstm bidirectional : true num_layers : 2 reduce_output : null preprocessing : word_format : space output_features : - name : intent type : category reduce_input : sum num_fc_layers : 1 fc_size : 64 - name : slots type : sequence decoder : tagger",
      "title": "Natural Language Understanding"
    },
    {
      "location": "examples/#machine-translation",
      "text": "english italian Hello! How are you doing? Ciao, come stai? I got promoted today Oggi sono stato promosso! Not doing well today Oggi non mi sento bene ludwig experiment \\ --data_csv translation.csv \\ --model_definition_file model_definition.yaml With model_definition.yaml : input_features : - name : english type : text level : word encoder : rnn cell_type : lstm reduce_output : null preprocessing : word_format : english_tokenize output_features : - name : italian type : text level : word decoder : generator cell_type : lstm attention : bahdanau loss : type : sampled_softmax_cross_entropy preprocessing : word_format : italian_tokenize training : batch_size : 96",
      "title": "Machine Translation"
    },
    {
      "location": "examples/#chit-chat-dialogue-modeling-through-sequence2sequence",
      "text": "user1 user2 Hello! How are you doing? Doing well, thanks! I got promoted today Congratulations! Not doing well today I\u2019m sorry, can I do something to help you? ludwig experiment \\ --data_csv chitchat.csv \\ --model_definition_file model_definition.yaml With model_definition.yaml : input_features : - name : user1 type : text level : word encoder : rnn cell_type : lstm reduce_output : null output_features : - name : user2 type : text level : word decoder : generator cell_type : lstm attention : bahdanau loss : type : sampled_softmax_cross_entropy training : batch_size : 96",
      "title": "Chit-Chat Dialogue Modeling through Sequence2Sequence"
    },
    {
      "location": "examples/#sentiment-analysis",
      "text": "review sentiment The movie was fantastic! positive Great acting and cinematography positive The acting was terrible! negative ludwig experiment \\ --data_csv sentiment.csv \\ --model_definition_file model_definition.yaml With model_definition.yaml : input_features : - name : review type : text level : word encoder : parallel_cnn output_features : - name : sentiment type : category",
      "title": "Sentiment Analysis"
    },
    {
      "location": "examples/#image-classification",
      "text": "image_path class images/image_000001.jpg car images/image_000002.jpg dog images/image_000003.jpg boat ludwig experiment \\ --data_csv image_classification.csv \\ --model_definition_file model_definition.yaml With model_definition.yaml : input_features : - name : image_path type : image encoder : stacked_cnn output_features : - name : class type : category",
      "title": "Image Classification"
    },
    {
      "location": "examples/#image-classification-mnist",
      "text": "This is a complete example of training an image classification model on the MNIST dataset.",
      "title": "Image Classification (MNIST)"
    },
    {
      "location": "examples/#download-the-mnist-dataset",
      "text": "git clone https://github.com/myleott/mnist_png.git cd mnist_png/ tar -xf mnist_png.tar.gz cd mnist_png/",
      "title": "Download the MNIST dataset."
    },
    {
      "location": "examples/#create-train-and-test-csvs",
      "text": "Open python shell in the same directory and run this: import os for name in ['training', 'testing']: with open('mnist_dataset_{}.csv'.format(name), 'w') as output_file: print('=== creating {} dataset ==='.format(name)) output_file.write('image_path,label\\n') for i in range(10): path = '{}/{}'.format(name, i) for file in os.listdir(path): if file.endswith(\".png\"): output_file.write('{},{}\\n'.format(os.path.join(path, file), str(i))) Now you should have mnist_dataset_training.csv and mnist_dataset_testing.csv containing 60000 and 10000 examples correspondingly and having the following format image_path label training/0/16585.png 0 training/0/24537.png 0 training/0/25629.png 0",
      "title": "Create train and test CSVs."
    },
    {
      "location": "examples/#train-a-model",
      "text": "From the directory where you have virtual environment with ludwig installed: ludwig train \\ --data_train_csv <PATH_TO_MNIST_DATASET_TRAINING_CSV> \\ --data_test_csv <PATH_TO_MNIST_DATASET_TEST_CSV> \\ --model_definition_file model_definition.yaml With model_definition.yaml : input_features : - name : image_path type : image encoder : stacked_cnn conv_layers : - num_filters : 32 filter_size : 3 pool_size : 2 pool_stride : 2 - num_filters : 64 filter_size : 3 pool_size : 2 pool_stride : 2 dropout : true fc_layers : - fc_size : 128 dropout : true output_features : - name : label type : category training : dropout_rate : 0.4",
      "title": "Train a model."
    },
    {
      "location": "examples/#image-captioning",
      "text": "image_path caption imagenet/image_000001.jpg car driving on the street imagenet/image_000002.jpg dog barking at a cat imagenet/image_000003.jpg boat sailing in the ocean ludwig experiment \\ --data_csv image captioning.csv \\ --model_definition_file model_definition.yaml With model_definition.yaml : input_features : - name : image_path type : image encoder : stacked_cnn output_features : - name : caption type : text level : word decoder : generator cell_type : lstm",
      "title": "Image Captioning"
    },
    {
      "location": "examples/#one-shot-learning-with-siamese-networks",
      "text": "This example can be considered a simple baseline for one-shot learning on the Omniglot dataset. The task is, given two images of two handwritten characters, recognize if they are two instances of the same character or not. image_path_1 image_path_2 similarity balinese/character01/0108_13.png balinese/character01/0108_18.png 1 balinese/character01/0108_13.png balinese/character08/0115_12.png 0 balinese/character01/0108_04.png balinese/character01/0108_08.png 1 balinese/character01/0108_11.png balinese/character05/0112_02.png 0 ludwig experiment \\ --data_csv balinese_characters.csv \\ --model_definition_file model_definition.yaml With model_definition.yaml : input_features : - name : image_path_1 type : image encoder : stacked_cnn preprocessing : width : 28 height : 28 resize_image : true - name : image_path_2 type : image encoder : stacked_cnn resize_image : true width : 28 height : 28 tied_weights : image_path_1 combiner : type : concat num_fc_layers : 2 fc_size : 256 output_features : - name : similarity type : binary",
      "title": "One-shot Learning with Siamese Networks"
    },
    {
      "location": "examples/#visual-question-answering",
      "text": "image_path question answer imdata/image_000001.jpg Is there snow on the mountains? yes imdata/image_000002.jpg What color are the wheels blue imdata/image_000003.jpg What kind of utensil is in the glass bowl knife ludwig experiment \\ --data_csv vqa.csv \\ --model_definition_file model_definition.yaml With model_definition.yaml : input_features : - name : image_path type : image encoder : stacked_cnn - name : question type : text level : word encoder : parallel_cnn output_features : - name : answer type : text level : word decoder : generator cell_type : lstm loss : type : sampled_softmax_cross_entropy",
      "title": "Visual Question Answering"
    },
    {
      "location": "examples/#speaker-verification",
      "text": "This example describes how to use Ludwig for a simple speaker verification task. We assume to have the following data with label 0 corresponding to an audio file of an unauthorized voice and label 1 corresponding to an audio file of an authorized voice. The sample data looks as follows: audio_path label audiodata/audio_000001.wav 0 audiodata/audio_000002.wav 0 audiodata/audio_000003.wav 1 audiodata/audio_000004.wav 1 ludwig experiment \\ --data_csv speaker_verification.csv \\ --model_definition_file model_definition.yaml With model_definition.yaml : input_features : - name : audio_path type : audio preprocessing : audio_file_length_limit_in_s : 7.0 audio_feature : type : stft window_length_in_s : 0.04 window_shift_in_s : 0.02 encoder : cnnrnn output_features : - name : label type : binary",
      "title": "Speaker Verification"
    },
    {
      "location": "examples/#kaggles-titanic-predicting-survivors",
      "text": "This example describes how to use Ludwig to train a model for the kaggle competition , on predicting a passenger's probability of surviving the Titanic disaster. Here's a sample of the data: Pclass Sex Age SibSp Parch Fare Survived Embarked 3 male 22 1 0 7.2500 0 S 1 female 38 1 0 71.2833 1 C 3 female 26 0 0 7.9250 0 S 3 male 35 0 0 8.0500 0 S The full data and the column descriptions can be found here . After downloading the data, to train a model on this dataset using Ludwig, ludwig experiment \\ --data_csv <PATH_TO_TITANIC_CSV> \\ --model_definition_file model_definition.yaml With model_definition.yaml : input_features : - name : Pclass type : category - name : Sex type : category - name : Age type : numerical preprocessing : missing_value_strategy : fill_with_mean - name : SibSp type : numerical - name : Parch type : numerical - name : Fare type : numerical preprocessing : missing_value_strategy : fill_with_mean - name : Embarked type : category output_features : - name : Survived type : binary Better results can be obtained with morerefined feature transformations and preprocessing, but this example has the only aim to show how this type do tasks and data can be used in Ludwig.",
      "title": "Kaggle's Titanic: Predicting survivors"
    },
    {
      "location": "examples/#time-series-forecasting",
      "text": "While direct timeseries prediction is a work in progress Ludwig can ingest timeseries input feature data and make numerical predictions. Below is an example of a model trained to forecast timeseries at five different horizons. timeseries_data y1 y2 y3 y4 y5 15.07 14.89 14.45 ... 16.92 16.67 16.48 17.00 17.02 14.89 14.45 14.30 ... 16.67 16.48 17.00 17.02 16.48 14.45 14.3 14.94 ... 16.48 17.00 17.02 16.48 15.82 ludwig experiment \\ --data_csv timeseries_data.csv \\ --model_definition_file model_definition.yaml With model_definition.yaml : input_features : - name : timeseries_data type : timeseries output_features : - name : y1 type : numerical - name : y2 type : numerical - name : y3 type : numerical - name : y4 type : numerical - name : y5 type : numerical",
      "title": "Time series forecasting"
    },
    {
      "location": "examples/#time-series-forecasting-weather-data-example",
      "text": "This example illustrates univariate timeseries forecasting using historical temperature data for Los Angeles. Dowload and unpack historical hourly weather data available on Kaggle https://www.kaggle.com/selfishgene/historical-hourly-weather-data Run the following python script to prepare the training dataset: import pandas as pd from ludwig.utils.data_utils import add_sequence_feature_column df = pd.read_csv( '<PATH_TO_FILE>/temperature.csv', usecols=['Los Angeles'] ).rename( columns={\"Los Angeles\": \"temperature\"} ).fillna(method='backfill').fillna(method='ffill') # normalize df.temperature = ((df.temperature-df.temperature.mean()) / df.temperature.std()) train_size = int(0.6 * len(df)) vali_size = int(0.2 * len(df)) # train, validation, test split df['split'] = 0 df.loc[ ( (df.index.values >= train_size) & (df.index.values < train_size + vali_size) ), ('split') ] = 1 df.loc[ df.index.values >= train_size + vali_size, ('split') ] = 2 # prepare timeseries input feature colum # (here we are using 20 preceeding values to predict the target) add_sequence_feature_column(df, 'temperature', 20) df.to_csv('<PATH_TO_FILE>/temperature_la.csv') ludwig experiment \\ --data_csv <PATH_TO_FILE>/temperature_la.csv \\ --model_definition_file model_definition.yaml With model_definition.yaml : input_features : - name : temperature_feature type : timeseries encoder : rnn embedding_size : 32 state_size : 32 output_features : - name : temperature type : numerical",
      "title": "Time series forecasting (weather data example)"
    },
    {
      "location": "examples/#movie-rating-prediction",
      "text": "year duration nominations categories rating 1921 3240 0 comedy drama 8.4 1925 5700 1 adventure comedy 8.3 1927 9180 4 drama comedy scifi 8.4 ludwig experiment \\ --data_csv movie_ratings.csv \\ --model_definition_file model_definition.yaml With model_definition.yaml : input_features : - name : year type : numerical - name : duration type : numerical - name : nominations type : numerical - name : categories type : set output_features : - name : rating type : numerical",
      "title": "Movie rating prediction"
    },
    {
      "location": "examples/#multi-label-classification",
      "text": "image_path tags images/image_000001.jpg car man images/image_000002.jpg happy dog tie images/image_000003.jpg boat water ludwig experiment \\ --data_csv image_data.csv \\ --model_definition_file model_definition.yaml With model_definition.yaml : input_features : - name : image_path type : image encoder : stacked_cnn output_features : - name : tags type : set",
      "title": "Multi-label classification"
    },
    {
      "location": "examples/#multi-task-learning",
      "text": "This example is inspired by the classic paper Natural Language Processing (Almost) from Scratch by Collobert et al.. sentence chunks part_of_speech named_entities San Francisco is very foggy B-NP I-NP B-VP B-ADJP I-ADJP NNP NNP VBZ RB JJ B-Loc I-Loc O O O My dog likes eating sausage B-NP I-NP B-VP B-VP B-NP PRP NN VBZ VBG NN O O O O O Brutus Killed Julius Caesar B-NP B-VP B-NP I-NP NNP VBD NNP NNP B-Per O B-Per I-Per ludwig experiment \\ --data_csv nl_data.csv \\ --model_definition_file model_definition.yaml With model_definition.yaml : input_features : - name : sentence type : sequence encoder : rnn cell : lstm bidirectional : true reduce_output : null output_features : - name : chunks type : sequence decoder : tagger - name : part_of_speech type : sequence decoder : tagger - name : named_entities type : sequence decoder : tagger",
      "title": "Multi-Task Learning"
    },
    {
      "location": "examples/#simple-regression-fuel-efficiency-prediction",
      "text": "This example replicates the Keras example at https://www.tensorflow.org/tutorials/keras/basic_regression to predict the miles per gallon of a car given its characteristics in the Auto MPG dataset. MPG Cylinders Displacement Horsepower Weight Acceleration ModelYear Origin 18.0 8 307.0 130.0 3504.0 12.0 70 1 15.0 8 350.0 165.0 3693.0 11.5 70 1 18.0 8 318.0 150.0 3436.0 11.0 70 1 16.0 8 304.0 150.0 3433.0 12.0 70 1 ludwig experiment \\ --data_csv auto_mpg.csv \\ --model_definition_file model_definition.yaml With model_definition.yaml : training : batch_size : 32 epochs : 1000 early_stop : 50 learning_rate : 0.001 optimizer : type : rmsprop input_features : - name : Cylinders type : numerical - name : Displacement type : numerical - name : Horsepower type : numerical - name : Weight type : numerical - name : Acceleration type : numerical - name : ModelYear type : numerical - name : Origin type : category output_features : - name : MPG type : numerical optimizer : type : mean_squared_error num_fc_layers : 2 fc_size : 64",
      "title": "Simple Regression: Fuel Efficiency Prediction"
    },
    {
      "location": "examples/#binary-classification-fraud-transactions-identification",
      "text": "transaction_id card_id customer_id customer_zipcode merchant_id merchant_name merchant_category merchant_zipcode merchant_country transaction_amount authorization_response_code atm_network_xid cvv_2_response_xflg fraud_label 469483 9003 1085 23039 893 Wright Group 7917 91323 GB 1962 C C N 0 926515 9009 1001 32218 1011 Mums Kitchen 5813 10001 US 1643 C D M 1 730021 9064 1174 9165 916 Keller 7582 38332 DE 1184 D B M 0 ludwig experiment \\ --data_csv transactions.csv \\ --model_definition_file model_definition.yaml With model_definition.yaml : input_features : - name : customer_id type : category - name : card_id type : category - name : merchant_id type : category - name : merchant_category type : category - name : merchant_zipcode type : category - name : transaction_amount type : numerical - name : authorization_response_code type : category - name : atm_network_xid type : category - name : cvv_2_response_xflg type : category combiner : type : concat num_fc_layers : 1 fc_size : 48 output_features : - name : fraud_label type : binary",
      "title": "Binary Classification: Fraud Transactions Identification"
    },
    {
      "location": "faq/",
      "text": "I'm experiencing problems installing gmpy , how do I solve them? \u00b6 If you encounter problems installing gmpy please install libgmp or gmp . On Debian based Linus distributions: sudo apt-get install libgmp3-dev . On MacOS : brew install gmp . Do you support [feature | encoder | decoder] in Ludwig? \u00b6 The list of encoders for each feature type is specified in the User Guide . We plan to add additional feature types and additional encoders and decoders for all feature types. Refer to this question for more details. If you want to help us implementing your favourite feature or model please take a look at the Developer Guide to see how to contribute. Do all datasets need to be loaded in memory? \u00b6 At the moment it depends on the type of feature: image features can be dynamically loaded from disk from an opened hdf5 file, while other types of features (that usually take need less memory than image ones) are loaded entirely in memory for speed. We plan to add an option to load also other features from disk in future releases and to also support more input file types and more scalable solutions like Petastorm . My data is on [ GCS | S3 | Azure ], how can I load it? \u00b6 Ludwig uses Pandas for loading data at the moment (this may change when we move to Petastorm). This means that if your service provides a mechanism for loading data with a name handler, you can load it. These name handlers already work: - Google Cloud Storage : gs:// . You just have to install gcsfs with pip install gcsfs>=0.2.1 and you will be able to prive paths to Ludwig with the gs:// name handler. - Amazon S3 : s3:// . You just have to install boto with pip install boto and you will be able to prive paths to Ludwig with the s3:// name handler. What additional features are you working on? \u00b6 We will prioritize new features depending on the feedback of the community, but we are already planning to add: additional text and sequence encoders (attention, co-attention, hierarchical attention, Transformer , ELMo and BERT ). additional image encoders ( DenseNet and FractalNet ). image decoding (both image generation by deconvolution and pixel-wise classification for image segmentation). time series decoding. additional features types (vectors, point clouds, nested lists, multi-sentence documents, graphs). additional measures and losses. additional data formatters and dataset-specific preprocessing scripts. We also want to address some of the current limitations: currently the full dataset needs to be loaded in memory in order to train a model. Image features already have a way to dynamically read batches of datapoints from disk, and we want to extend this capability to other datatypes. add a command to start a rest service maybe with a simple user interface in order to provide a live demo capability. document lower level functions. optimize the data I/O to TensorFlow. increase the number of supported data formats beyond just CSV and integrating with Petastorm . All these are opportunities to get involved in the community and contribute. Feel free to reach out to us and ask as there are tasks for all levels of experience. Who are the authors of Ludwig? \u00b6 Piero Molino is the main architect and maintainer Yaroslav Dudin is a key contributor Sai Sumanth Miryala contributed all the testing, logging and helped polishing. Who else helped developing Ludwig? \u00b6 Yi Shi who implemented the time series encoding Ankit Jain who implemented the bag feature encoding Pranav Subramani who contributed documentation Alex Sergeev and Felipe Petroski Such who helped with distributed training Emidio Torre helped with the initial design of the landing page",
      "title": "FAQ"
    },
    {
      "location": "faq/#im-experiencing-problems-installing-gmpy-how-do-i-solve-them",
      "text": "If you encounter problems installing gmpy please install libgmp or gmp . On Debian based Linus distributions: sudo apt-get install libgmp3-dev . On MacOS : brew install gmp .",
      "title": "I'm experiencing problems installing gmpy, how do I solve them?"
    },
    {
      "location": "faq/#do-you-support-91feature-encoder-decoder93-in-ludwig",
      "text": "The list of encoders for each feature type is specified in the User Guide . We plan to add additional feature types and additional encoders and decoders for all feature types. Refer to this question for more details. If you want to help us implementing your favourite feature or model please take a look at the Developer Guide to see how to contribute.",
      "title": "Do you support [feature | encoder | decoder] in Ludwig?"
    },
    {
      "location": "faq/#do-all-datasets-need-to-be-loaded-in-memory",
      "text": "At the moment it depends on the type of feature: image features can be dynamically loaded from disk from an opened hdf5 file, while other types of features (that usually take need less memory than image ones) are loaded entirely in memory for speed. We plan to add an option to load also other features from disk in future releases and to also support more input file types and more scalable solutions like Petastorm .",
      "title": "Do all datasets need to be loaded in memory?"
    },
    {
      "location": "faq/#my-data-is-on-91-gcs-s3-azure-93-how-can-i-load-it",
      "text": "Ludwig uses Pandas for loading data at the moment (this may change when we move to Petastorm). This means that if your service provides a mechanism for loading data with a name handler, you can load it. These name handlers already work: - Google Cloud Storage : gs:// . You just have to install gcsfs with pip install gcsfs>=0.2.1 and you will be able to prive paths to Ludwig with the gs:// name handler. - Amazon S3 : s3:// . You just have to install boto with pip install boto and you will be able to prive paths to Ludwig with the s3:// name handler.",
      "title": "My data is on [ GCS | S3 | Azure ], how can I load it?"
    },
    {
      "location": "faq/#what-additional-features-are-you-working-on",
      "text": "We will prioritize new features depending on the feedback of the community, but we are already planning to add: additional text and sequence encoders (attention, co-attention, hierarchical attention, Transformer , ELMo and BERT ). additional image encoders ( DenseNet and FractalNet ). image decoding (both image generation by deconvolution and pixel-wise classification for image segmentation). time series decoding. additional features types (vectors, point clouds, nested lists, multi-sentence documents, graphs). additional measures and losses. additional data formatters and dataset-specific preprocessing scripts. We also want to address some of the current limitations: currently the full dataset needs to be loaded in memory in order to train a model. Image features already have a way to dynamically read batches of datapoints from disk, and we want to extend this capability to other datatypes. add a command to start a rest service maybe with a simple user interface in order to provide a live demo capability. document lower level functions. optimize the data I/O to TensorFlow. increase the number of supported data formats beyond just CSV and integrating with Petastorm . All these are opportunities to get involved in the community and contribute. Feel free to reach out to us and ask as there are tasks for all levels of experience.",
      "title": "What additional features are you working on?"
    },
    {
      "location": "faq/#who-are-the-authors-of-ludwig",
      "text": "Piero Molino is the main architect and maintainer Yaroslav Dudin is a key contributor Sai Sumanth Miryala contributed all the testing, logging and helped polishing.",
      "title": "Who are the authors of Ludwig?"
    },
    {
      "location": "faq/#who-else-helped-developing-ludwig",
      "text": "Yi Shi who implemented the time series encoding Ankit Jain who implemented the bag feature encoding Pranav Subramani who contributed documentation Alex Sergeev and Felipe Petroski Such who helped with distributed training Emidio Torre helped with the initial design of the landing page",
      "title": "Who else helped developing Ludwig?"
    },
    {
      "location": "getting_started/",
      "text": "Introduction \u00b6 Ludwig is a toolbox built on top of TensorFlow that allows to train and test deep learning models without the need to write code. All you need to provide is a CSV file containing your data, a list of columns to use as inputs, and a list of columns to use as outputs, Ludwig will do the rest. Simple commands can be used to train models both locally and in a distributed way, and to use them to predict on new data. A programmatic API is also available in order to use Ludwig from your python code. A suite of visualization tools allows you to analyze models' training and test performance and to compare them. Ludwig is built with extensibility principles in mind and is based on data type abstractions, making it easy to add support for new data types as well as new model architectures. It can be used by practitioners to quickly train and test deep learning models as well as by researchers to obtain strong baselines to compare against and have an experimentation setting that ensures comparability by performing standard data preprocessing and visualization. Ludwig provides a set of model architectures that can be combined together to create an end-to-end model for a given use case. As an analogy, if deep learning libraries provide the building blocks to make your building, Ludwig provides the buildings to make your city, and you can chose among the available buildings or add your own building to the set of available ones. The core design principles we baked into the toolbox are: - No coding required: no coding skills are required to train a model and use it for obtaining predictions. - Generality: a new data type-based approach to deep learning model design that makes the tool usable across many different use cases. - Flexibility: experienced users have extensive control over model building and training, while newcomers will find it easy to use. - Extensibility: easy to add new model architecture and new feature data types. - Understandability: deep learning model internals are often considered black boxes, but we provide standard visualizations to understand their performance and compare their predictions. - Open Source: Apache License 2.0 Installation \u00b6 Ludwig's requirements are the following: numpy pandas scipy scikit-learn scikit-image spacy tensorflow matplotlib seaborn Cython h5py tqdm tabulate PyYAML gmpy fastapi pydantic uvicorn python-multipart Ludwig has been developed and tested with Python 3 in mind. If you don\u2019t have Python 3 installed, install it by running: sudo apt install python3 # on ubuntu brew install python3 # on mac You may want to use a virtual environment to maintain an isolated Python environment . In order to install Ludwig just run: pip install ludwig or install it by building the source code from the repository: git clone git@github.com:uber/ludwig.git cd ludwig virtualenv -p python3 venv source venv/bin/activate pip install -r requirements.txt python setup.py install If you intend to use text features and want to use spaCy based language tokenizers, install language specific models with: python -m spacy download <language_code> More details in the User Guide . If you encounter problems installing gmpy please install libgmp or gmp . On Debian based Linus distributions: sudo apt-get install libgmp3-dev . On MacOS : brew install gmp . Beware that in the requirements.txt file the tensorflow package is the regular one, not the GPU enabled one. To install the GPU enabled one replace it with tensorflow-gpu . If you want to train Ludwig models in a distributed way, you need to also install the horovod and the mpi4py packages. Please follow the instructions on Horovod's repository to install it. Basic Principles \u00b6 Ludwig provides two main functionalities: training models and using them to predict. It is based on datatype abstraction, so that the same data preprocessing and postprocessing will be performed on different datasets that share data types and the same encoding and decoding models developed for one task can be reused for different tasks. Training a model in Ludwig is pretty straightforward: you provide a CSV dataset and a model definition YAML file. The model definition contains a list of input features and output features, all you have to do is specify names of the columns in the CSV that are inputs to your model alongside with their datatypes, and names of columns in the CSV that will be outputs, the target variables which the model will learn to predict. Ludwig will compose a deep learning model accordingly and train it for you. Currently the available datatypes in Ludwig are: binary numerical category set bag sequence text timeseries image The model definition can contain additional information, in particular how to preprocess each column in the CSV, which encoder and decoder to use for each one, feature hyperparameters and training parameters. This allows ease of use for novices and flexibility for experts. Training \u00b6 For example, given a text classification dataset like the following: doc_text class Former president Barack Obama ... politics Juventus hired Cristiano Ronaldo ... sport LeBron James joins the Lakers ... sport ... ... you want to learn a model that uses the content of the doc_text column as input to predict the values in the class column. You can use the following model definition: { input_features : [{ name : doc_text , type : text }], output_features : [{ name : class , type : category }]} and start the training typing the following command in your console: ludwig train --data_csv path/to/file.csv --model_definition \"{input_features: [{name: doc_text, type: text}], output_features: [{name: class, type: category}]}\" where path/to/file.csv is the path to a UTF-8 encoded CSV file contaning the dataset in the previous table. Ludwig will perform a random split of the data, preprocess it, build a WordCNN model (the default for text features) that decodes output classes through a softmax classifier, train the model on the training set until the accuracy on the validation set stops improving. Training progress will be displayed in the console, but TensorBoard can also be used. If you prefer to use an RNN encoder and increase the number of epochs you want the model to train for, all you have to do is to change the model definition to: { input_features : [{ name : doc_text , type : text , encoder : rnn }], output_features : [{ name : class , type : category }], training : { epochs : 50 }} Refer to the User Guide to find out all the options available to you in the model definition and take a look at the Examples to see how you can use Ludwig for several different tasks. After training, Ludwig will create a directory under results containing the trained model with its hyperparameters and summary statistics of the training process. You can visualize them using one of the several visualization options available in the visualize tool, for instance: ludwig visualize --visualization learning_curves --training_statistics path/to/training_statistics.json The commands will display a graph that looks like the following, where you can see loss and accuracy as functions of train iteration number: Several visualizations are available, please refer to Visualizations for more details. Distributed Training \u00b6 You can distribute the training of your models using Horovod , which allows to train on a single machine with multiple GPUs as well as on multiple machines with multiple GPUs. Refer to the User Guide for more details. Predict \u00b6 If you have new data and you want your previously trained model to predict target output values, you can type the following command in your console: ludwig predict --data_csv path/to/data.csv --model_path /path/to/model Running this command will return model predictions and some test performance statistics if the dataset contains ground truth information to compare to. Those can be visualized by the visualize tool, which can also be used to compare performances and predictions of different models, for instance: ludwig visualize --visualization compare_performance --test_statistics path/to/test_statistics_model_1.json path/to/test_statistics_model_2.json will return a bar plot comparing the models on different measures: A handy ludwig experiment command that performs training and prediction one after the other is also available. Programmatic API \u00b6 Ludwig also provides a simple programmatic API that allows you to train or load a model and use it to obtain predictions on new data: from ludwig.api import LudwigModel # train a model model_definition = { ... } model = LudwigModel ( model_definition ) train_stats = model . train ( training_dataframe ) # or load a model model = LudwigModel . load ( model_path ) # obtain predictions predictions = model . predict ( test_dataframe ) model . close () model_definition is a dictionary contaning the same information of the YAML file. More details are provided in the User Guide and in the API documentation . Extensibility \u00b6 Ludwig is built from the ground up with extensibility in mind. It is easy to add an additional datatype that is not currently supported by adding a datatype-specific implementation of abstract classes which contain functions to preprocess the data, encode it, and decode it. Furthermore, new models, with their own specific hyperparameters, can be easily added by implementing a class that accepts tensors (of a specific rank, depending of the datatype) as inputs and provides tensors as output. This encourages reuse and sharing new models with the community. Refer to the Developer Guide for further details.",
      "title": "Getting Started"
    },
    {
      "location": "getting_started/#introduction",
      "text": "Ludwig is a toolbox built on top of TensorFlow that allows to train and test deep learning models without the need to write code. All you need to provide is a CSV file containing your data, a list of columns to use as inputs, and a list of columns to use as outputs, Ludwig will do the rest. Simple commands can be used to train models both locally and in a distributed way, and to use them to predict on new data. A programmatic API is also available in order to use Ludwig from your python code. A suite of visualization tools allows you to analyze models' training and test performance and to compare them. Ludwig is built with extensibility principles in mind and is based on data type abstractions, making it easy to add support for new data types as well as new model architectures. It can be used by practitioners to quickly train and test deep learning models as well as by researchers to obtain strong baselines to compare against and have an experimentation setting that ensures comparability by performing standard data preprocessing and visualization. Ludwig provides a set of model architectures that can be combined together to create an end-to-end model for a given use case. As an analogy, if deep learning libraries provide the building blocks to make your building, Ludwig provides the buildings to make your city, and you can chose among the available buildings or add your own building to the set of available ones. The core design principles we baked into the toolbox are: - No coding required: no coding skills are required to train a model and use it for obtaining predictions. - Generality: a new data type-based approach to deep learning model design that makes the tool usable across many different use cases. - Flexibility: experienced users have extensive control over model building and training, while newcomers will find it easy to use. - Extensibility: easy to add new model architecture and new feature data types. - Understandability: deep learning model internals are often considered black boxes, but we provide standard visualizations to understand their performance and compare their predictions. - Open Source: Apache License 2.0",
      "title": "Introduction"
    },
    {
      "location": "getting_started/#installation",
      "text": "Ludwig's requirements are the following: numpy pandas scipy scikit-learn scikit-image spacy tensorflow matplotlib seaborn Cython h5py tqdm tabulate PyYAML gmpy fastapi pydantic uvicorn python-multipart Ludwig has been developed and tested with Python 3 in mind. If you don\u2019t have Python 3 installed, install it by running: sudo apt install python3 # on ubuntu brew install python3 # on mac You may want to use a virtual environment to maintain an isolated Python environment . In order to install Ludwig just run: pip install ludwig or install it by building the source code from the repository: git clone git@github.com:uber/ludwig.git cd ludwig virtualenv -p python3 venv source venv/bin/activate pip install -r requirements.txt python setup.py install If you intend to use text features and want to use spaCy based language tokenizers, install language specific models with: python -m spacy download <language_code> More details in the User Guide . If you encounter problems installing gmpy please install libgmp or gmp . On Debian based Linus distributions: sudo apt-get install libgmp3-dev . On MacOS : brew install gmp . Beware that in the requirements.txt file the tensorflow package is the regular one, not the GPU enabled one. To install the GPU enabled one replace it with tensorflow-gpu . If you want to train Ludwig models in a distributed way, you need to also install the horovod and the mpi4py packages. Please follow the instructions on Horovod's repository to install it.",
      "title": "Installation"
    },
    {
      "location": "getting_started/#basic-principles",
      "text": "Ludwig provides two main functionalities: training models and using them to predict. It is based on datatype abstraction, so that the same data preprocessing and postprocessing will be performed on different datasets that share data types and the same encoding and decoding models developed for one task can be reused for different tasks. Training a model in Ludwig is pretty straightforward: you provide a CSV dataset and a model definition YAML file. The model definition contains a list of input features and output features, all you have to do is specify names of the columns in the CSV that are inputs to your model alongside with their datatypes, and names of columns in the CSV that will be outputs, the target variables which the model will learn to predict. Ludwig will compose a deep learning model accordingly and train it for you. Currently the available datatypes in Ludwig are: binary numerical category set bag sequence text timeseries image The model definition can contain additional information, in particular how to preprocess each column in the CSV, which encoder and decoder to use for each one, feature hyperparameters and training parameters. This allows ease of use for novices and flexibility for experts.",
      "title": "Basic Principles"
    },
    {
      "location": "getting_started/#training",
      "text": "For example, given a text classification dataset like the following: doc_text class Former president Barack Obama ... politics Juventus hired Cristiano Ronaldo ... sport LeBron James joins the Lakers ... sport ... ... you want to learn a model that uses the content of the doc_text column as input to predict the values in the class column. You can use the following model definition: { input_features : [{ name : doc_text , type : text }], output_features : [{ name : class , type : category }]} and start the training typing the following command in your console: ludwig train --data_csv path/to/file.csv --model_definition \"{input_features: [{name: doc_text, type: text}], output_features: [{name: class, type: category}]}\" where path/to/file.csv is the path to a UTF-8 encoded CSV file contaning the dataset in the previous table. Ludwig will perform a random split of the data, preprocess it, build a WordCNN model (the default for text features) that decodes output classes through a softmax classifier, train the model on the training set until the accuracy on the validation set stops improving. Training progress will be displayed in the console, but TensorBoard can also be used. If you prefer to use an RNN encoder and increase the number of epochs you want the model to train for, all you have to do is to change the model definition to: { input_features : [{ name : doc_text , type : text , encoder : rnn }], output_features : [{ name : class , type : category }], training : { epochs : 50 }} Refer to the User Guide to find out all the options available to you in the model definition and take a look at the Examples to see how you can use Ludwig for several different tasks. After training, Ludwig will create a directory under results containing the trained model with its hyperparameters and summary statistics of the training process. You can visualize them using one of the several visualization options available in the visualize tool, for instance: ludwig visualize --visualization learning_curves --training_statistics path/to/training_statistics.json The commands will display a graph that looks like the following, where you can see loss and accuracy as functions of train iteration number: Several visualizations are available, please refer to Visualizations for more details.",
      "title": "Training"
    },
    {
      "location": "getting_started/#distributed-training",
      "text": "You can distribute the training of your models using Horovod , which allows to train on a single machine with multiple GPUs as well as on multiple machines with multiple GPUs. Refer to the User Guide for more details.",
      "title": "Distributed Training"
    },
    {
      "location": "getting_started/#predict",
      "text": "If you have new data and you want your previously trained model to predict target output values, you can type the following command in your console: ludwig predict --data_csv path/to/data.csv --model_path /path/to/model Running this command will return model predictions and some test performance statistics if the dataset contains ground truth information to compare to. Those can be visualized by the visualize tool, which can also be used to compare performances and predictions of different models, for instance: ludwig visualize --visualization compare_performance --test_statistics path/to/test_statistics_model_1.json path/to/test_statistics_model_2.json will return a bar plot comparing the models on different measures: A handy ludwig experiment command that performs training and prediction one after the other is also available.",
      "title": "Predict"
    },
    {
      "location": "getting_started/#programmatic-api",
      "text": "Ludwig also provides a simple programmatic API that allows you to train or load a model and use it to obtain predictions on new data: from ludwig.api import LudwigModel # train a model model_definition = { ... } model = LudwigModel ( model_definition ) train_stats = model . train ( training_dataframe ) # or load a model model = LudwigModel . load ( model_path ) # obtain predictions predictions = model . predict ( test_dataframe ) model . close () model_definition is a dictionary contaning the same information of the YAML file. More details are provided in the User Guide and in the API documentation .",
      "title": "Programmatic API"
    },
    {
      "location": "getting_started/#extensibility",
      "text": "Ludwig is built from the ground up with extensibility in mind. It is easy to add an additional datatype that is not currently supported by adding a datatype-specific implementation of abstract classes which contain functions to preprocess the data, encode it, and decode it. Furthermore, new models, with their own specific hyperparameters, can be easily added by implementing a class that accepts tensors (of a specific rank, depending of the datatype) as inputs and provides tensors as output. This encourages reuse and sharing new models with the community. Refer to the Developer Guide for further details.",
      "title": "Extensibility"
    },
    {
      "location": "user_guide/",
      "text": "Command Line Interface \u00b6 Ludwig provides six command line interface entry points train predict test experiment visualize collect_weights collect_activations serve They are described in detail below. train \u00b6 This command lets you train a model from your data. You can call it with: ludwig train [options] or with python -m ludwig.train [options] from within Ludwig's main directory. These are the available arguments: usage: ludwig train [options] This script trains a model. optional arguments: -h, --help show this help message and exit --output_directory OUTPUT_DIRECTORY directory that contains the results --experiment_name EXPERIMENT_NAME experiment name --model_name MODEL_NAME name for the model --data_csv DATA_CSV input data CSV file. If it has a split column, it will be used for splitting (0: train, 1: validation, 2: test), otherwise the dataset will be randomly split --data_train_csv DATA_TRAIN_CSV input train data CSV file --data_validation_csv DATA_VALIDATION_CSV input validation data CSV file --data_test_csv DATA_TEST_CSV input test data CSV file --data_hdf5 DATA_HDF5 input data HDF5 file. It is an intermediate preprocess version of the input CSV created the first time a CSV file is used in the same directory with the same name and a hdf5 extension --data_train_hdf5 DATA_TRAIN_HDF5 input train data HDF5 file. It is an intermediate preprocess version of the input CSV created the first time a CSV file is used in the same directory with the same name and a hdf5 extension --data_validation_hdf5 DATA_VALIDATION_HDF5 input validation data HDF5 file. It is an intermediate preprocess version of the input CSV created the first time a CSV file is used in the same directory with the same name and a hdf5 extension --data_test_hdf5 DATA_TEST_HDF5 input test data HDF5 file. It is an intermediate preprocess version of the input CSV created the first time a CSV file is used in the same directory with the same name and a hdf5 extension --train_set_metadata_json TRAIN_SET_METADATA_JSON input metadata JSON file. It is an intermediate preprocess file containing the mappings of the input CSV created the first time a CSV file is used in the same directory with the same name and a json extension -sspi, --skip_save_processed_input skips saving intermediate HDF5 and JSON files -md MODEL_DEFINITION, --model_definition MODEL_DEFINITION model definition -mdf MODEL_DEFINITION_FILE, --model_definition_file MODEL_DEFINITION_FILE YAML file describing the model. Ignores --model_hyperparameters -mlp MODEL_LOAD_PATH, --model_load_path MODEL_LOAD_PATH path of a pretrained model to load as initialization -mrp MODEL_RESUME_PATH, --model_resume_path MODEL_RESUME_PATH path of a the model directory to resume training of -ssm, --skip_save_model disables saving weights each time the model imrpoves. By default Ludwig saves weights after each epoch the validation measure imrpvoes, but if the model is really big that can be time consuming if you do not want to keep the weights and just find out what performance can a model get with a set of hyperparameters, use this parameter to skip it. -ssp, --skip_save_progress disables saving weights after each epoch. By default ludwig saves weights after each epoch for enabling resuming of training, but if the model is really big that can be time consuming and will save twice as much space, use this parameter to skip it. -ssl, --skip_save_log disables saving TensorBoard logs. By default Ludwig saves logs for the TensorBoard, but if it is not needed turning it off can slightly increase the overall speed. -rs RANDOM_SEED, --random_seed RANDOM_SEED a random seed that is going to be used anywhere there is a call to a random number generator: data splitting, parameter initialization and training set shuffling -g GPUS [GPUS ...], --gpus GPUS [GPUS ...] list of gpus to use -gf GPU_FRACTION, --gpu_fraction GPU_FRACTION fraction of gpu memory to initialize the process with -uh, --use_horovod uses horovod for distributed training -dbg, --debug enables debugging mode -l {critical,error,warning,info,debug,notset}, --logging_level {critical,error,warning,info,debug,notset} the level of logging to use When Ludwig trains a model it creates two intermediate files, one HDF5 and one JSON. The HDF5 file contains the data mapped to numpy ndarrays, while the JSON file contains the mappings from the values in the tensors to their original labels. For instance, for a categorical feature with 3 possible values, the HDF5 file will contain integers from 0 to 3 (with 0 being a <UNK> category), while the JSON file will contain a idx2str list containing all tokens ( [<UNK>, label_1, label_2, label_3] ), a str2idx dictionary ( {\"<UNK>\": 0, \"label_1\": 1, \"label_2\": 2, \"label_3\": 3} ) and a str2freq dictionary ( {\"<UNK>\": 0, \"label_1\": 93, \"label_2\": 55, \"label_3\": 24} ). The reason to have those intermediate files is two-fold: on one hand, if you are going to train your model again Ludwig will try to load them instead of recomputing all tensors, which saves a consistent amount of time, and on the other hand when you want to use your model to predict, data has to be mapped to tensors in exactly the same way it was mapped during training, so you'll be required to load the JSON metadata file in the predict command. The way this works is: the first time you provide a UTF-8 encoded CSV ( --data_csv ), the HDF5 and JSON files are created, from the second time on Ludwig will load them instead of the CSV even if you specify the CSV (it looks in the same directory for files names in the same way but with a different extension), finally you can directly specify the HDF5 and JSON files ( --data_hdf5 and --metadata_json ). As the mapping from raw data to tensors depends on the type of feature that you specify in your model definition, if you change type (for instance from sequential to text ) you also have to redo the preprocessing, which is achieved by deleting the HDF5 and JSON files. Alternatively you can skip saving the HDF5 and JSON files specifying --skip_save_processed_input . Splitting between train, validation and test set can be done in several ways. This allows for a few possible input data scenarios: one single UTF-8 encoded CSV file is provided ( -data_csv ). In this case if the CSV contains a split column with values 0 for training, 1 for validation and 2 for test, this split will be used. If you want to ignore the split column and perform a random split, use a force_split argument in the model definition. In the case when there is no split column, a random 70-20-10 split will be performed. You can set the percentages and specify if you want stratified sampling in the model definition preprocessing section. you can provide separate UTF-8 encoded train, validation and test CSVs ( --data_train_csv , --data_validation_csv , --data_test_csv ). the HDF5 and JSON file indications specified in the case of a single CSV file apply also in the multiple files case ( --data_train_hdf5 , --data_validation_hdf5 , --data_test_hdf5 ), with the only difference that you need to specify only one JSON file ( --metadata_json ) instead of three. The validation set is optional, but if absent the training wil continue until the end of the training epochs, while when there's a validation set the default behavior is to perform early stopping after the validation measure does not improve for a a certain amount of epochs. The test set is optional too. Other optional arguments are --output_directory , --experiment_name and --model name . By default the output directory is ./results . That directory will contain a directory named [experiment_name]_[model_name]_0 if model name and experiment name are specified. If the same combination of experiment and model name is used again, the integer at the end of the name wil be increased. If neither of them is specified the directory will be named run_0 . The directory will contain description.json - a file containing a description of the training process with all the information to reproduce it. training_statistics.json which contains records of all measures and losses for each epoch. model - a directory containing model hyperparameters, weights, checkpoints and logs (for TensorBoard). The model definition can be provided either as a string ( --model_definition ) or as YAML file ( --model_definition_file ). Details on how to write your model definition are provided in the Model Definition section. During training Ludwig saves two sets of weights for the model, one that is the weights at the end of the epoch where the best performance on the validation measure was achieved and one that is the weights at the end of the latest epoch. The reason for keeping the second set is to be able to resume training in case the training process gets interrupted somehow. To resume training using the latest weights and the whole history of progress so far you have to specify the --model_resume_path argument. You can avoid saving the latest weights and the overall progress so far by using the argument --skip_save_progress , but you will not be able to resume it afterwards. Another available option is to load a previously trained model as an initialization for a new training process. In this case Ludwig will start a new training process, without knowing any progress of the previous model, no training statistics, nor the number of epochs the model has been trained on so far. It's not resuming training, just initializing training with a previously trained model with the same model definition, and it is accomplished through the --model_load_path argument. You can specify a random sed to be used by the python environment, python random package, numpy and TensorFlow with the --random_seed argument. This is useful for reproducibility. Be aware that due to asynchronicity in the TensorFlow GPU execution, when training on GPU results may not be reproducible. You can manage which GPUs on your machine are used with the --gpus argument, which accepts a string identical to the format of CUDA_VISIBLE_DEVICES environment variable, namely a list of integers separated by comma. You can also specify the fraction of the GPU memory that will be initially assigned to TensorFlow with --gpu_fraction . By default it is 1.0, but you can set it, for instance, to 0.2 to use only 1/5 of the available memory. If TensorFlow will need more GPU memory it will try to increase this amount. Finally the --logging_level argument lets you set the amount of logging that you want to see during training and the --debug argument turns on TensorFlow's tfdbg . Be careful when doing so, as it will help in catching errors, in particular infs and NaNs but it will consume much more memory. Example: ludwig train --data_csv reuters-allcats.csv --model_definition \"{input_features: [{name: text, type: text, encoder: parallel_cnn, level: word}], output_features: [{name: class, type: category}]}\" predict \u00b6 This command lets you use a previously trained model to predict on new data. You can call it with: ludwig predict [options] or with python -m ludwig.predict [options] from within Ludwig's main directory. These are the available arguments: usage: ludwig predict [options] This script loads a pretrained model and uses it to predict. optional arguments: -h, --help show this help message and exit --data_csv DATA_CSV input data CSV file. If it has a split column, it will be used for splitting (0: train, 1: validation, 2: test), otherwise the dataset will be randomly split --data_hdf5 DATA_HDF5 input data HDF5 file. It is an intermediate preprocess version of the input CSV created the first time a CSV file is used in the same directory with the same name and a hdf5 extension --train_set_metadata_json TRAIN_SET_METADATA_JSON input metadata JSON file. It is an intermediate preprocess file containing the mappings of the input CSV created the first time a CSV file is used in the same directory with the same name and a json extension -s {training,validation,test,full}, --split {training,validation,test,full} the split to test the model on -m MODEL_PATH, --model_path MODEL_PATH model to load -od OUTPUT_DIRECTORY, --output_directory OUTPUT_DIRECTORY directory that contains the results -ssuo, --skip_save_unprocessed_output skips saving intermediate NPY output files -bs BATCH_SIZE, --batch_size BATCH_SIZE size of batches -g GPUS, --gpus GPUS list of gpu to use -gf GPU_FRACTION, --gpu_fraction GPU_FRACTION fraction of gpu memory to initialize the process with -uh, --use_horovod uses horovod for distributed training -dbg, --debug enables debugging mode -l {critical,error,warning,info,debug,notset}, --logging_level {critical,error,warning,info,debug,notset} the level of logging to use The same distinction between UTF-8 encoded CSV files and HDF5 / JSON files explained in the train section also applies here. In either case, the JSON metadata file obtained during training is needed in order to map the new data into tensors. If the new data contains a split column, you can specify which split to use to calculate the predictions with the --split argument. By default it's full which means all the splits will be used. A model to load is needed, and you can specify its path with the --model_path argument. If you trained a model previously and got the results in, for instance, ./results/experiment_run_0 , you have to specify ./results/experiment_run_0/model for using it to predict. You can specify an output directory with the argument --output-directory , by default it will be ./result_0 , with increasing numbers if a directory with the same name is present. The directory will contain a prediction CSV file and a probability CSV file for each output feature, together with raw NPY files containing raw tensors. You can specify not to save the raw NPY output files with the argument skip_save_unprocessed_output . If the argument --evaluate_performance if provided, a predict_statistics.json file containing all prediction statistics will also be outputted. If this parameter is specified, the data must contain columns for each output feature with ground truth output values in order to compute the performance statistics. If you receive an error regarding a missing output feature column in your data, it means that the data does not contain the columns for each output feature to use as ground truth. A specific batch size for speeding up the prediction can be specified using the argument --batch_size . Finally the --logging_level , --debug and --gpus related arguments behave exactly like described in the train command section. Example: ludwig predict --data_csv reuters-allcats.csv --model_path results/experiment_run_0/model/ test \u00b6 This command lets you use a previously trained model to predict on new data and evaluate the performance of the prediction compared to ground truth. You can call it with: ludwig test [options] or with python -m ludwig.test_performance [options] from within Ludwig's main directory. These are the available arguments: usage: ludwig predict [options] This script loads a pretrained model and uses it to predict. optional arguments: -h, --help show this help message and exit --data_csv DATA_CSV input data CSV file. If it has a split column, it will be used for splitting (0: train, 1: validation, 2: test), otherwise the dataset will be randomly split --data_hdf5 DATA_HDF5 input data HDF5 file. It is an intermediate preprocess version of the input CSV created the first time a CSV file is used in the same directory with the same name and a hdf5 extension --train_set_metadata_json TRAIN_SET_METADATA_JSON input metadata JSON file. It is an intermediate preprocess file containing the mappings of the input CSV created the first time a CSV file is used in the same directory with the same name and a json extension -s {training,validation,test,full}, --split {training,validation,test,full} the split to test the model on -m MODEL_PATH, --model_path MODEL_PATH model to load -od OUTPUT_DIRECTORY, --output_directory OUTPUT_DIRECTORY directory that contains the results -ssuo, --skip_save_unprocessed_output skips saving intermediate NPY output files -bs BATCH_SIZE, --batch_size BATCH_SIZE size of batches -g GPUS, --gpus GPUS list of gpu to use -gf GPU_FRACTION, --gpu_fraction GPU_FRACTION fraction of gpu memory to initialize the process with -uh, --use_horovod uses horovod for distributed training -dbg, --debug enables debugging mode -l {critical,error,warning,info,debug,notset}, --logging_level {critical,error,warning,info,debug,notset} the level of logging to use All parameters are the same of predict and the behavior is the same. The only difference isthat test requires the dataset to contain also columns with the same name of output features. This is needed because test compares the predictions produced by the model with the ground truth and will save all those statistics in a test_statistics.json file in the result directory. Example: ludwig test --data_csv reuters-allcats.csv --model_path results/experiment_run_0/model/ experiment \u00b6 This command combines training and test into a single handy command. You can call it with: ludwig experiment [options] or with python -m ludwig.experiment [options] from within Ludwig's main directory. These are the available arguments: usage: ludwig experiment [options] This script trains and tests a model. optional arguments: -h, --help show this help message and exit --output_directory OUTPUT_DIRECTORY directory that contains the results --experiment_name EXPERIMENT_NAME experiment name --model_name MODEL_NAME name for the model --data_csv DATA_CSV input data CSV file. If it has a split column, it will be used for splitting (0: train, 1: validation, 2: test), otherwise the dataset will be randomly split --data_train_csv DATA_TRAIN_CSV input train data CSV file --data_validation_csv DATA_VALIDATION_CSV input validation data CSV file --data_test_csv DATA_TEST_CSV input test data CSV file --data_hdf5 DATA_HDF5 input data HDF5 file. It is an intermediate preprocess version of the input CSV created the first time a CSV file is used in the same directory with the same name and a hdf5 extension --data_train_hdf5 DATA_TRAIN_HDF5 input train data HDF5 file. It is an intermediate preprocess version of the input CSV created the first time a CSV file is used in the same directory with the same name and a hdf5 extension --data_validation_hdf5 DATA_VALIDATION_HDF5 input validation data HDF5 file. It is an intermediate preprocess version of the input CSV created the first time a CSV file is used in the same directory with the same name and a hdf5 extension --data_test_hdf5 DATA_TEST_HDF5 input test data HDF5 file. It is an intermediate preprocess version of the input CSV created the first time a CSV file is used in the same directory with the same name and a hdf5 extension --train_set_metadata_json TRAIN_SET_METADATA_JSON input train set metadata JSON file. It is an intermediate preprocess file containing the mappings of the input CSV created the first time a CSV file is used in the same directory with the same name and a json extension -sspi, --skip_save_processed_input skips saving intermediate HDF5 and JSON files -ssuo, --skip_save_unprocessed_output skips saving intermediate NPY output files -md MODEL_DEFINITION, --model_definition MODEL_DEFINITION model definition -mdf MODEL_DEFINITION_FILE, --model_definition_file MODEL_DEFINITION_FILE YAML file describing the model. Ignores --model_hyperparameters -mlp MODEL_LOAD_PATH, --model_load_path MODEL_LOAD_PATH path of a pretrained model to load as initialization -mrp MODEL_RESUME_PATH, --model_resume_path MODEL_RESUME_PATH path of a the model directory to resume training of -ssp SKIP_SAVE_PROGRESS_WEIGHTS, --skip_save_progress SKIP_SAVE_PROGRESS_WEIGHTS disables saving weights after each epoch. By default Ludwig saves weights after each epoch for enabling resuming of training, but if the model is really big that can be time consuming and will use twice as much storage space, use this parameter to skip it. -rs RANDOM_SEED, --random_seed RANDOM_SEED a random seed that is going to be used anywhere there is a call to a random number generator: data splitting, parameter initialization and training set shuffling -g GPUS [GPUS ...], --gpus GPUS [GPUS ...] list of gpus to use -gf GPU_FRACTION, --gpu_fraction GPU_FRACTION fraction of gpu memory to initialize the process with -dbg, --debug enables debugging mode -l {critical,error,warning,info,debug,notset}, --logging_level {critical,error,warning,info,debug,notset} the level of logging to use The parameters combine parameters from both train and test so refer to those sections for an in depth explanation. The output directory will contain the outputs both commands produce. Example: ludwig experiment --data_csv reuters-allcats.csv --model_definition \"{input_features: [{name: text, type: text, encoder: parallel_cnn, level: word}], output_features: [{name: class, type: category}]}\" visualize \u00b6 This command lets you visualize training and prediction statistics, alongside with comparing different models performances and predictions. You can call it with: ludwig visualize [options] or with python -m ludwig.visualize [options] from within Ludwig's main directory. These are the available arguments: usage: ludwig visualize [options] This script analyzes results and shows some nice plots. optional arguments: -h, --help show this help message and exit -d DATA_CSV, --data_csv DATA_CSV raw data file -g GROUND_TRUTH, --ground_truth GROUND_TRUTH ground truth file -gts GROUND_TRUTH_SPLIT, --ground_truth_split GROUND_TRUTH_SPLIT ground truth split - 0:train, 1:validation, 2:test split -gm GROUND_TRUTH_METADATA, --ground_truth_metadata GROUND_TRUTH_METADATA input metadata JSON file -v {compare_performance,compare_classifiers_performance_from_prob,compare_classifiers_performance_from_pred,compare_classifiers_performance_changing_k,compare_classifiers_performance_subset,compare_classifiers_predictions,compare_classifiers_predictions_distribution,confidence_thresholding,confidence_thresholding_2thresholds_3d,confidence_thresholding_data_vs_acc,confidence_thresholding_2thresholds_2d,confidence_thresholding_data_vs_acc_subset,confidence_thresholding_data_vs_acc_subset_per_class,binary_threshold_vs_metric,roc_curves,roc_curves_from_test_statistics,data_vs_acc_subset,data_vs_acc_subset_per_class,calibration_1_vs_all,calibration_multiclass,confusion_matrix,compare_classifiers_multiclass_multimetric,frequency_vs_f1,learning_curves}, --visualization {compare_performance,compare_classifiers_performance_from_prob,compare_classifiers_performance_from_pred,compare_classifiers_performance_changing_k,compare_classifiers_performance_subset,compare_classifiers_predictions,compare_classifiers_predictions_distribution,confidence_thresholding,confidence_thresholding_2thresholds_3d,confidence_thresholding_data_vs_acc,confidence_thresholding_2thresholds_2d,confidence_thresholding_data_vs_acc_subset,confidence_thresholding_data_vs_acc_subset_per_class,binary_threshold_vs_metric,roc_curves,roc_curves_from_test_statistics,data_vs_acc_subset,data_vs_acc_subset_per_class,calibration_1_vs_all,calibration_multiclass,confusion_matrix,compare_classifiers_multiclass_multimetric,frequency_vs_f1,learning_curves} type of visualization -f FIELD, --field FIELD field containing ground truth -tf THRESHOLD_FIELDS [THRESHOLD_FIELDS ...], --threshold_fields THRESHOLD_FIELDS [THRESHOLD_FIELDS ...] fields for 2d threshold -pred PREDICTIONS [PREDICTIONS ...], --predictions PREDICTIONS [PREDICTIONS ...] predictions files -prob PROBABILITIES [PROBABILITIES ...], --probabilities PROBABILITIES [PROBABILITIES ...] probabilities files -trs TRAINING_STATS [TRAINING_STATS ...], --training_statistics TRAINING_STATS [TRAINING_STATS ...] training stats files -tes TEST_STATS [TEST_STATS ...], --test_statistics TEST_STATS [TEST_STATS ...] test stats files -alg ALGORITHMS [ALGORITHMS ...], --algorithms ALGORITHMS [ALGORITHMS ...] names of the algorithms (for better graphs) -tn TOP_N_CLASSES [TOP_N_CLASSES ...], --top_n_classes TOP_N_CLASSES [TOP_N_CLASSES ...] number of classes to plot -k TOP_K, --top_k TOP_K number of elements in the ranklist to consider -ll LABELS_LIMIT, --labels_limit LABELS_LIMIT maximum numbers of labels. If labels in dataset are higher than this number, \"rare\" label -ss {ground_truth,predictions}, --subset {ground_truth,predictions} type of subset filtering -n, --normalize normalize rows in confusion matrix -m METRICS [METRICS ...], --metrics METRICS [METRICS ...] metrics to dispay in threshold_vs_metric -pl POSITIVE_LABEL, --positive_label POSITIVE_LABEL label of the positive class for the roc curve -l {critical,error,warning,info,debug,notset}, --logging_level {critical,error,warning,info,debug,notset} the level of logging to use As the --visualization parameters suggests, there is a vast number of visualizations readily available. Each of them requires a different subset of this command's arguments, so they will be described one by one in the Visualizations section. collect_weights \u00b6 This command lets you load a pre-trained model and collect the tensors with a specific name in order to save them in a NPY format. This may be useful in order to visualize the learned weights (for instance collecting embedding matrices) and for some post-hoc analyses. You can call it with: ludwig collect_weights [options] or with python -m ludwig.collect weights [options] from within Ludwig's main directory. These are the available arguments: usage: ludwig collect_weights [options] This script loads a pretrained model and uses it collect weights. optional arguments: -h, --help show this help message and exit -m MODEL_PATH, --model_path MODEL_PATH model to load -t TENSORS [TENSORS ...], --tensors TENSORS [TENSORS ...] tensors to collect -od OUTPUT_DIRECTORY, --output_directory OUTPUT_DIRECTORY directory that contains the results -dbg, --debug enables debugging mode -l {critical,error,warning,info,debug,notset}, --logging_level {critical,error,warning,info,debug,notset} the level of logging to use The three most important arguments are --model_path where you have to specify the path of the model to load, --tensors that lets you specify a list of tensor names in the TensorFlow graph that contain the weights you want to collect, and finally --output_directory that lets you specify where the NPY files (one for each tensor name specified) will be saved. In order to figure out the names fo the tensors containing the weights you want to collect, the best way is to inspect the graph of the model with TensorBoard. tensorboard --logdir /path/to/model/log collect_activations \u00b6 This command lets you load a pre-trained model and input data and collects the values of activations contained in tensors with a specific name in order to save them in a NPY format. This may be useful in order to visualize the activations (for instance collecting last layer's activations as embeddings representations of the input datapoint) and for some post-hoc analyses. You can call it with: ludwig collect_activations [options] or with python -m ludwig.collect activations [options] from within Ludwig's main directory. These are the available arguments: usage: ludwig collect_activations [options] This script loads a pretrained model and uses it collect tensors for each datapoint in the dataset. optional arguments: -h, --help show this help message and exit --data_csv DATA_CSV input data CSV file --data_hdf5 DATA_HDF5 input data HDF5 file -s {training,validation,test,full}, --split {training,validation,test,full} the split to test the model on -m MODEL_PATH, --model_path MODEL_PATH model to load -t TENSORS [TENSORS ..], --tensors TENSORS [TENSORS ..] tensors to collect -od OUTPUT_DIRECTORY, --output_directory OUTPUT_DIRECTORY directory that contains the results -bs BATCH_SIZE, --batch_size BATCH_SIZE size of batches -g GPUS, --gpus GPUS list of gpu to use -gf GPU_FRACTION, --gpu_fraction GPU_FRACTION fraction of gpu memory to initialize the process with -dbg, --debug enables debugging mode -l {critical,error,warning,info,debug,notset}, --logging_level {critical,error,warning,info,debug,notset} the level of logging to use The data related and runtime related arguments (GPUs, batch size, etc.) are the same used in predict , you can refer to that section for an explanation. The collect specific arguments --model_path , --tensors and --output_directory are the same used in collect_weights , you can refer to that section for an explanation. In order to figure out the names fo the tensors containing the activations you want to collect, the best way is to inspect the graph of the model with TensorBoard. tensorboard --logdir /path/to/model/log serve \u00b6 This command lets you load a pre-trained model and serve it on an http server. You can call it with: ludwig serve [options] or with python -m ludwig.serve [options] from within Ludwig's main directory. These are the available arguments: usage: ludwig serve [options] This script serves a pretrained model optional arguments: -h, --help show this help message and exit -m MODEL_PATH, --model_path MODEL_PATH model to load -l {critical,error,warning,info,debug,notset}, --logging_level {critical,error,warning,info,debug,notset} the level of logging to use -p PORT, --port PORT port for server (default: 8000) -H HOST, --host HOST host for server (default: 0.0.0.0) The most important argument is --model_path where you have to specify the path of the model to load. Once running, you can make a POST request on the /predict endpoint to run inference on the form data submitted. Example curl \u00b6 File \u00b6 curl http://0.0.0.0:8000/predict -X POST -F 'image_path=@path_to_image/example.png' Text \u00b6 curl http://0.0.0.0:8000/predict -X POST -F 'english_text=words to be translated' Both Text and File \u00b6 curl http://0.0.0.0:8000/predict -X POST -F 'text=mixed together with' -F 'image=@path_to_image/example.png' Data Preprocessing \u00b6 Ludwig data preprocessing maps raw data coming in UTF-8 encoded CSV format into an HDF5 file containing tensors and a JSON file containing mappings from strings to tensors when needed. This mapping is performed when a UTF-8 encoded CSV is provided as input and both HDF5 and JSON files are saved in the same directory as the input CSV, unless the argument --skip_save_processed_input is used (both in train and experiment commands). The reason to save those files is both to provide a cache and avoid performing the preprocessing again (as, depending on the type of features involved, it could be time consuming) and to provide the needed mappings to be able to map unseen data into tensors. The preprocessing process is personalizable to fit the specifics of your data format, but the basic assumption is always that your UTF-8 encoded CSV files contains one row for each datapoint and one column for each feature (either input or output), and that you are able to determine the type of that column among the ones supported by Ludwig. The reason for that is that each data type is mapped into tensors in a different way and expects the content to be formatted in a specific way. Different datatypes may have different formatters that format the values of a cell. For instance the value of a cell of a sequence feature column by default is managed by a space formatter, that splits the content of the value into a list of strings using space. before formatter after formatter \"token3 token4 token2\" [token3, token4, token2] \"token3 token1\" [token3, token1] Then a list idx2str and two dictionaries str2idx and str2freq are created containing all the tokens in all the lists obtained by splitting all the rows of the column and an integer id is assigned to each of them (in order of frequency). { \"column_name\" : { \"idx2str\" : [ \"<PAD>\" , \"<UNK>\" , \"token3\" , \"token2\" , \"token4\" , \"token1\" ], \"str2idx\" : { \"<PAD>\" : 0 , \"<UNK>\" : 1 , \"token3\" : 2 , \"token2\" : 3 , \"token4\" : 4 , \"token1\" : 5 }, \"str2freq\" : { \"<PAD>\" : 0 , \"<UNK>\" : 0 , \"token3\" : 2 , \"token2\" : 1 , \"token4\" : 1 , \"token1\" : 1 } } } Finally a numpy matrix is created with sizes n x l where n is the number of rows in the column and l is the minimum of the longest tokenized list and a max_length parameter that can be set. All sequences shorter than l are padded on the right (but this behavior may also be modified through a parameter). after formatter numpy matrix [token3, token4, token2] 2 4 3 [token3, token1] 2 5 0 The final result matrix is saved in the HDF5 the name of the original column in the CSV as key, while the mapping from token to integer ID (and its inverse mapping) is saved in the JSON file. Each datatype is preprocessed in a different way, using different parameters and different formatters. Details on how to set those parameters for each feature type and for each specific feature will be described in the Model Definition - Preprocessing section. Binary features are directly transformed into a binary valued vector of length n (where n is the size of the dataset) and added to HDF5 with a key that reflects the name of column in the CSV. No additional information about them is available in the JSON metadata file. Numerical features are directly transformed into a float valued vector of length n (where n is the size of the dataset) and added to HDF5 with a key that reflects the name of column in the CSV. No additional information about them is available in the JSON metadata file. Category features are transformed into an integer valued vector of size n (where n is the size of the dataset) and added to HDF5 with a key that reflects the name of column in the CSV. The way categories are mapped into integers consists in first collecting a dictionary of all the different category strings present in the column of the CSV, then rank them by frequency and then assign them an increasing integer ID from the most frequent to the most rare (with 0 being assigned to a <UNK> token). The column name is added to the JSON file, with an associated dictionary containing 1. the mapping from integer to string ( idx2str ) 2. the mapping from string to id ( str2idx ) 3. the mapping from string to frequency ( str2freq ) 4. the size of the set of all tokens ( vocab_size ) 4. additional preprocessing information (by default how to fill missing values and what token to use to fill missing values) Set features are transformed into a binary (int8 actually) valued matrix of size n x l (where n is the size of the dataset and l is the minimum of the size of the biggest set and a max_size parameter) and added to HDF5 with a key that reflects the name of column in the CSV. The way sets are mapped into integers consists in first using a formatter to map from strings to sequences of set items (by default this is done by splitting on spaces). Then a a dictionary of all the different set item strings present in the column of the CSV is collected, then they are ranked by frequency and an increasing integer ID is assigned to them from the most frequent to the most rare (with 0 being assigned to <PAD> used for padding and 1 assigned to <UNK> item). The column name is added to the JSON file, with an associated dictionary containing 1. the mapping from integer to string ( idx2str ) 2. the mapping from string to id ( str2idx ) 3. the mapping from string to frequency ( str2freq ) 4. the maximum size of all sets ( max_set_size ) 5. additional preprocessing information (by default how to fill missing values and what token to use to fill missing values) Bag features are treated in the same way of set features, with the only difference being that the matrix had float values (frequencies). Sequence features are transformed into an integer valued matrix of size n x l (where n is the size of the dataset and l is the minimum of the length of the longest sequence and a sequence_length_limit parameter) and added to HDF5 with a key that reflects the name of column in the CSV. The way sets are mapped into integers consists in first using a formatter to map from strings to sequences of tokens (by default this is done by splitting on spaces). Then a a dictionary of all the different token strings present in the column of the CSV is collected, then they are ranked by frequency and an increasing integer ID is assigned to them from the most frequent to the most rare (with 0 being assigned to <PAD> used for padding and 1 assigned to <UNK> item). The column name is added to the JSON file, with an associated dictionary containing 1. the mapping from integer to string ( idx2str ) 2. the mapping from string to id ( str2idx ) 3. the mapping from string to frequency ( str2freq ) 4. the maximum length of all sequences ( sequence_length_limit ) 5. additional preprocessing information (by default how to fill missing values and what token to use to fill missing values) Text features are treated in the same way of sequence features, with a couple differences. Two different formatting/splitting happen, one that splits at every character and one that uses a spaCy based tokenizer (and removes stopwords) are used, and two different key are added to the HDF5 file, one containing the matrix of characters and one containing the matrix of words. The same thing happens in the JSON file, where there are dictionaries for mapping characters to integers (and the inverse) and words to integers (and their inverse). In the model definition you are able to specify which level of representation to use, if the character level or the word level. Timeseries features are treated in the same way of sequence features, with the only difference being that the matrix in the HDF5 file does not have integer values, but float values. Moreover, there is no need for any mapping in the JSON file. Image features are transformed into a int8 valued tensor of size n x h x w x c (where n is the size of the dataset and h x w is a specific resizing of the image that can be set, and c is the number of color channels) and added to HDF5 with a key that reflects the name of column in the CSV. The column name is added to the JSON file, with an associated dictionary containing preprocessing information about the sizes of the resizing. CSV Format \u00b6 Ludwig uses Pandas under the hood to read the UTF-8 encoded CSV files. Pandas tries to automatically identify the separator (generally ',' ) from the data. The default escape character is '\\' . For example, if ',' is the column separator and one of your data columns has a ',' in it, Pandas would fail to load the data properly. To handle such cases, we expect the values in the columns to be escaped with backslashes (replace ',' in the data with '\\\\,' ). Data Postprocessing \u00b6 The JSON file obtained from preprocessing is used also for postprocessing: Ludwig models return output predictions and, depending on their datatype they are mapped back into the original space. Numerical and timeseries are returned as they are, while category, set, sequence, and text features output integers, those integers are mapped back into the original tokens / names using the idx2str in the JSON file. When you run experiment or predict you will find both a CSV file for each output containing the mapped predictions, a probability CSV file containing the probability of that prediction, a probabilities CSV file containing the probabilities for all alternatives (for instance, the probabilities of all the categories in case of a categorical feature). You will also find the unmapped NPY files. If you don't need them you can use the --skip_save_unprocessed_output argument. Model Definition \u00b6 The model definition is the core of Ludwig. It is a dictionary that contains all the information needed to build and train a Ludwig model. It mixes ease of use, by means of reasonable defaults, with flexibility, by means of detailed control over the parameters of your model. It is provided to both experiment and train commands either as a string ( --model_definition ) or as a file ( --model_definition_file ). The string or the content of the file will be parsed by PyYAML into a dictionary in memory, so any style of YAML accepted by the parser is considered to be valid, so both multiline and oneline formats are accepted. For instance a list of dictionaries can be written both as mylist : [{ name : item1 , score : 2 }, { name : item2 , score : 1 }, { name : item3 , score : 4 }] or as: mylist : - name : item1 score : 2 - name : item2 score : 1 - name : item3 score : 4 The structure of the model definition file is a dictionary with five keys: input_features : [] combiner : {} output_features : [] training : {} preprocessing : {} Only input_features and output_features are required, the other three fields have default values, but you are free to modify them. Input features \u00b6 The input_features list contains a list of dictionaries, each of them containing two required fields name and type . name is the name of the feature and is the same name of the column of the CSV input file, type is one of the supported datatypes. Input features may have different ways to be encoded and the parameter to decide it is encoder . All the other parameters you specify in an input feature will be passed as parameters to the function that build the encoder, and each encoder can have different parameters. For instance a sequence feature can be encoded by a stacked_cnn or by and rnn , but only the stacked_cnn will accept the parameter num_filters while only the rnn will accept the parameter bidirectional . A list of all the encoders available for all the datatypes alongside with the description of all parameters will be provided in the datatype-specific sections. Some datatypes have only one type of encoder, so you are not required to specify it. The role of the encoders is to map inputs into tensors, usually vectors in the case of datatype without a temporal / sequential aspect, matrices in case there is a temporal / sequential aspect or higher rank tensors in case there is a spatial or a spatio-temporal aspect to the input data. Different configurations of the same encoder may return a tensor with different rank, for instance a sequential encoder may return a vector of size h that is either the final vector of a sequence or the result of pooling over the sequence length, or it can return a matrix of size l x h where l is the length of the sequence and h is the hidden dimension if you specify the pooling reduce operation ( reduce_output ) to be null . For the sake of simplicity you can imagine the output to be a vector in most of the cases, but there is a reduce_output parameter one can specify to change the default behavior. An additional feature that ludwig provides is the option to have tied weights between different encoders. For instance if my model takes two sentences as input and return the probability of their entailment, I may want to encode both sentences with the same encoder. The way to do it is by specifying the tied-weights parameter of the second feature you define to be the name of the first feature you defined. input_features : - name : sentence1 type : text - name : sentence2 type : text tied_weights : sentence1 If you specify a name of an input feature that has not been defined yet, it will result in an error. Also, in order to be able to have tied weights, all encoder parameters have to be identical between the two input features. Combiner \u00b6 Combiners are part of the model that take all the outputs of the different input features and combine them in a single representation that is passed to the outputs. You can specify which one to use in the combiner section of the model definition. Different combiners implement different combination logic, but the default one concat just concatenates all outputs of input feature encoders and optionally passes the concatenation through fully connected layers, with the output of the last layer being forwarded to the outputs decoders. +-----------+ |Input | |Feature 1 +-+ +-----------+ | +---------+ +-----------+ | +------+ |Fully | |... +--->Concat+--->Connected+-> +-----------+ | +------+ |Layers | +-----------+ | +---------+ |Input +-+ |Feature N | +-----------+ For the sake of simplicity you can imagine the both inputs and outputs are vectors in most of the cases, but there are reduce_input and reduce_output parameters to specify to change the default behavior. Output Features \u00b6 The output_features list has the same structure of the input_features list: it is a list of dictionaries containing a name and a type . They represent outputs / targets that you want your model to predict. In most machine learning tasks you want to predict only one target variable, but in Ludwig you are allowed to specify as many outputs as you want and they are going to be optimized in a multi-task fashion, using a weighted sum of their losses as a combined loss to optimize. Instead of having encoders , output features have decoders , but most of them have only one decoder so you don't have to specify it. Decoders take the output of the combiner as input, process it further, for instance passing it through fully connected layers, and finally predict values and compute a loss and some measures (depending on the datatype different losses and measures apply). Decoders have additional parameters, in particular loss that allows you to specify a different loss to optimize for this specific decoder, for instance numerical features support both mean_squared_error and mean_absolute_error as losses. Details about the available decoders and losses alongside with the description of all parameters will be provided in the datatype-specific sections. For the sake of simplicity you can imagine the input coming from the combiner to be a vector in most of the cases, but there is a reduce_input parameter one can specify to change the default behavior. Output Features Dependencies \u00b6 An additional feature that Ludwig provides is the concept of dependency between output_features . You can specify a list of output features as dependencies when you write the dictionary of a specific feature. At model building time Ludwig checks that no cyclic dependency exists. If you do so Ludwig will concatenate all the final representations before the prediction of those output features to the original input of the decoder. The reason is that if different output features have a causal dependency, knowing which prediction has been made for one can help making the prediction of the other. For instance if two output features are one coarse grained category and one fine-grained category that are in a hierarchical structure with each other, knowing the prediction made for coarse grained restricts the possible categories to predict for the fine-grained. In this case the following model definition structure can be used: output_features : - name : coarse_class type : category num_fc_layers : 2 fc_size : 64 - name : fine_class type : category dependencies : - coarse_class num_fc_layers : 1 fc_size : 64 Assuming the input coming from the combiner has hidden dimension h 128, there are two fully connected layers that return a vector with hidden size 64 at the end of the coarse_class decoder (that vector will be used for the final layer before projecting in the output coarse_class space) In the decoder of fine_class , the 64 dimensional vector of coarse_class will be concatenated to the combiner output vector, making a vector of hidden size 192 that will be passed through a fully connected layer and the 64 dimensional output will be used for the final layer before projecting in the output class space of the fine_class . Training \u00b6 The training section of the model definition lets you specify some parameters of the training process, like for instance the number of epochs or the learning rate. These are the available training parameters: batch_size (default 128 ): size of the batch used for training the model. eval_batch_size (default 0 ): size of the batch used for evaluating the model. If it is 0 , the same value of batch_size is used. This is usefult to speedup evaluation with a much bigger batch size than training, if enough memory is available, or to decrease the batch size when sampled_softmax_cross_entropy is used as loss for sequential and categorical features with big vocabulary sizes (evaluation needs to be performed on the full vocabulary, so a much smaller batch size may be needed to fit the activation tensors in memory). epochs (default 100 ): number of epochs the training process will run for. early_stop (default 5 ): if there's a validation set, number of epochs of patience without an improvement on the validation measure before the training is stopped. optimizer (default {type: adam, beta1: 0.9, beta2: 0.999, epsilon: 1e-08} ): which optimizer to use with the relative parameters. The available optimizers are: sgd (or stochastic_gradient_descent , gd , gradient_descent , they are all the same), adam , adadelta , adagrad , adagradda , momentum , ftrl , proximalgd , proximaladagrad , rmsprop . To know their parameters check TensorFlow's optimizer documentation . learning_rate (default 0.001 ): the learning rate to use. decay (default false ): if to use exponential decay of the learning rate or not. decay_rate (default 0.96 ): the rate of the exponential learning rate decay. decay_steps (default 10000 ): the number of steps of the exponential learning rate decay. staircase (default false ): decays the learning rate at discrete intervals. regularization_lambda (default 0 ): the lambda parameter used for adding a l2 regularization loss to the overall loss. dropout_rate (default 0.0 ): the probability to drop neurons in dropout. The dropout_rate is used throughout the whole model, but to decide which parts of the model will use it, use the dropout boolean parameter available in each encoder, combiner and decoder. reduce_learning_rate_on_plateau (default 0 ): if there's a validation set, how many times to reduce the learning rate when a plateau of validation measure is reached. reduce_learning_rate_on_plateau_patience (default 5 ): if there's a validation set, number of epochs of patience without an improvement on the validation measure before reducing the learning rate. reduce_learning_rate_on_plateau_rate (default 0.5 ): if there's a validation set, the reduction rate of the learning rate. increase_batch_size_on_plateau (default 0 ): if there's a validation set, how many times to increase the batch size when a plateau of validation measure is reached. increase_batch_size_on_plateau_patience (default 5 ): if there's a validation set, number of epochs of patience without an improvement on the validation measure before increasing the learning rate. increase_batch_size_on_plateau_rate (default 2 ): if there's a validation set, the increase rate of the batch size. increase_batch_size_on_plateau_max (default 512 ): if there's a validation set, the maximum value of batch size. validation_field (default combined ): when there is more than one output feature, which one to use for computing if there was an improvement on validation. The measure to use to determine if there was an improvement can be set with the validation_measure parameter. Different datatypes have different available measures, refer to the datatype-specific section for more details. combined indicates the use the combination of all features. For instance the combination of combined and loss as measure uses a decrease in the combined loss of all output features to check for improvement on validation, while combined and accuracy considers on how many datapoints the predictions for all output features were correct (but consider that for some features, for instance numeric there is no accuracy measure, so you should use accuracy only if all your output features have an accuracy measure). validation_measure: (default accuracy ): the measure to use to determine if there was an improvement. The measure is considered for the output feature specified in validation_field . Different datatypes have different available measures, refer to the datatype-specific section for more details. bucketing_field (default null ): when not null , when creating batches, instead of shuffling randomly, the length along the last dimension of the matrix of the specified input feature is used for bucketing datapoints and then randomly shuffled datapoints from the same bin are sampled. Padding is trimmed to the longest datapoint in the batch. The specified feature should be either a sequence or text feature and the encoder encoding it has to be rnn . When used, bucketing improves speed of rnn encoding up to 1.5x, depending on the length distribution of the inputs. learning_rate_warmup_epochs (default 1 ): It's the number or training epochs where learning rate warmup will be used. It is calculated as `described in [Accurate, Large Minibatch SGD: Training ImageNet in 1 Hour](https://arxiv.org/abs/1706.02677). In the paper the authors suggest 6` epochs of warmup, that parameter is suggested for large datasets and big batches. Optimizers details \u00b6 Preprocessing \u00b6 The preprocessing section of the model definition makes it possible to specify datatype specific parameters to perform data preprocessing. The preprocessing dictionary contains one key of each datatype, but you have to specify only the ones that apply to your case, the other ones will be kept as defaults. Moreover, the preprocessing dictionary contains parameters related to how to split the data that are not feature specific. force_split (default false ): if true the split column in the CSV data file is ignored and the dataset is randomly split. If false the split column is used if available. split_probabilities (default [0.7, 0.1, 0.2] ): the proportion of the CSV data to end up in training, validation and test. The three values have to sum up to one. stratify (default null ): if null the split is random, otherwise you can specify the name of a category feature and the split will be stratified on that feature. Example preprocessing dictionary (showing default values): preprocessing : force_split : false split_probabilities : [ 0.7 , 0.1 , 0.2 ] stratify : null category : { ... } sequence : { ... } text : { ... } ... The details about the preprocessing parameters that each datatype accepts will be provided in the datatype-specific sections. It is important to point out that different features within the same datatype may require different preprocessing. For instance a document classification model may have two text input features, one for the title of the document and one for the body. As the length of the title is much shorter than the length of the body, the parameter word_length_limit should be set to 10 for the title and 2000 for the body, but both of them share the same parameter most_common_words with value 10000. The way to do this is adding a preprocessing key inside the title input_feature dictionary and one in the body input feature dictionary containing the desired parameter and value. The model definition will look like: preprocessing : text : most_common_word : 10000 input_features : - name : title type : text preprocessing : word_length_limit : 20 - name : body type : text preprocessing : word_length_limit : 2000 Binary Features \u00b6 Binary Features Preprocessing \u00b6 Binary features are directly transformed into a binary valued vector of length n (where n is the size of the dataset) and added to HDF5 with a key that reflects the name of column in the CSV. No additional information about them is available in the JSON metadata file. The parameters available for preprocessing are missing_value_strategy (default fill_with_const ): what strategy to follow when there's a missing value in a binary column. The value should be one of fill_with_const (replaces the missing value with a specific value specified with the fill_value parameter), fill_with_mode (replaces the missing values with the most frequent value in the column), fill_with_mean (replaces the missing values with the mean of the values in the column), backfill (replaces the missing values with the next valid value). fill_value (default 0 ): the value to replace the missing values with in case the missing_value_strategy is fill-value . Binary Input Features and Encoders \u00b6 Binary features have no encoder, the raw binary values coming from the input placeholders are just returned as outputs. By consequence there are no encoding parameters. Inputs are of size b while outputs are of size b x 1 where b is the batch size. Example binary feature entry in the output features list: name : binary_csv_column_name type : binary Binary Output Features and Decoders \u00b6 Binary features can be used when a binary classification needs to be performed or when the output is a single probability. There is only one decoder available for binary features and it is a (potentially empty) stack of fully connected layers, followed by a projection into a single number followed by a sigmoid function. These are the available parameters of a binary output feature reduce_inputs (default sum ): defines how to reduce an input that is not a vector, but a matrix or a higher order tensor, on the first dimension 9second if you count the batch dimension). Available values are: sum , mean or avg , max , concat (concatenates along the first dimension), last (returns the last vector of the first dimension). dependencies (default [] ): the output features this one is dependent on. For a detailed explanation refer to Output Features Dependencies . reduce_dependencies (default sum ): defines how to reduce the output of a dependent feature that is not a vector, but a matrix or a higher order tensor, on the first dimension 9second if you count the batch dimension). Available values are: sum , mean or avg , max , concat (concatenates along the first dimension), last (returns the last vector of the first dimension). loss (default {type: cross_entropy, confidence_penalty: 0, robust_lambda: 0} ): is a dictionary containing a loss type and its hyperparameters. The only available loss type is cross_entropy (cross entropy), and the two optional parameters are confidence_penalty (an additional term that penalizes too confident predictions by adding a a * (max_entropy - entropy) / max_entropy term to the loss, where a is the value of this parameter) and robust_lambda (replaces the loss with (1 - robust_lambda) * loss + robust_lambda / 2 which is useful in case of noisy labels). These are the available parameters of a binary output feature decoder fc_layers (default null ): it is a list of dictionaries containing the parameters of all the fully connected layers. The length of the list determines the number of stacked fully connected layers and the content of each dictionary determines the parameters for a specific layer. The available parameters for each layer are: fc_size , norm , activation , dropout , initializer and regularize . If any of those values is missing from the dictionary, the default one specified as a parameter of the decoder will be used instead. num_fc_layers (default 0): this is the number of stacked fully connected layers that the input to the feature passes through. Their output is projected in the feature's output space. fc_size (default 256 ): if a fc_size is not already specified in fc_layers this is the default fc_size that will be used for each layer. It indicates the size of the output of a fully connected layer. activation (default relu ): if an activation is not already specified in fc_layers this is the default activation that will be used for each layer. It indicates the activation function applied to the output. norm (default null ): if a norm is not already specified in fc_layers this is the default norm that will be used for each layer. It indicates the norm of the output and it can be null , batch or layer . dropout (default false ): determines if there should be a dropout layer after each layer. initializer (default null ): the initializer to use. If null , the default initialized of each variable is used ( glorot_uniform in most cases). Options are: constant , identity , zeros , ones , orthogonal , normal , uniform , truncated_normal , variance_scaling , glorot_normal , glorot_uniform , xavier_normal , xavier_uniform , he_normal , he_uniform , lecun_normal , lecun_uniform . Alternatively it is possible to specify a dictionary with a key type that identifies the type of initializer and other keys for its parameters, e.g. {type: normal, mean: 0, stddev: 0} . To know the parameters of each initializer, please refer to TensorFlow's documentation . regularize (default true ): if true the wights of the layers are added to the set of weights that get regularized by a regularization loss (if the regularization_lambda in training is greater than 0). threshold (default 0.5 ): The threshold above (greater or equal) which the predicted output of the sigmoid will be mapped to 1. Example binary feature entry (with default parameters) in the output features list: name : binary_csv_column_name type : binary reduce_inputs : sum dependencies : [] reduce_dependencies : sum loss : type : cross_entropy confidence_penalty : 0 robust_lambda : 0 fc_layers : null num_fc_layers : 0 fc_size : 256 activation : relu norm : null dropout : false initializer : null regularize : true threshold : 0.5 Binary Features Measures \u00b6 The only measures that are calculated every epoch and are available for binary features are the accuracy and the loss itself. You can set either of them as validation_measure in the training section of the model definition if you set the validation_field to be the name of a binary feature. Numerical Features \u00b6 Numerical Features Preprocessing \u00b6 Numerical features are directly transformed into a float valued vector of length n (where n is the size of the dataset) and added to HDF5 with a key that reflects the name of column in the CSV. No additional information about them is available in the JSON metadata file. Parameters available for preprocessing are missing_value_strategy (default fill_with_const ): what strategy to follow when there's a missing value in a binary column. The value should be one of fill_with_const (replaces the missing value with a specific value specified with the fill_value parameter), fill_with_mode (replaces the missing values with the most frequent value in the column), fill_with_mean (replaces the missing values with the mean of the values in the column), backfill (replaces the missing values with the next valid value). fill_value (default 0 ): the value to replace the missing values with in case the missing_value_strategy is fill-value . normalization (default None ): technique to be used when normalizing the numerical feature types. The available options are None , zscore and minmax . If the value is None no normalization is performed. If the value is zscore , the mean and standard deviation are computed so that values are shifted to have zero mean and 1 standard deviation. If the value is minmax , minimun and maximum values are computed and the minimum is subtracted from values and the result is divided by difference between maximum and minimum. Numerical Input Features and Encoders \u00b6 Numerical features have one encoder, the raw float values coming from the input placeholders are passed through a single neuron for scaling purposes, (optionally) passed through a normalization layer (either null , batch_norm , or layer_norm ) and returned as outputs. Inputs are of size b while outputs are fo size b x 1 where b is the batch size. The available encoder parameters are: norm' (default null ): norm to apply after the single neuron. It can be null , batch or layer . tied_weights (default null ): name of the input feature to tie the weights the encoder with. It needs to be the name of a feature of the same type and with the same encoder parameters. Example numerical feature entry in the output features list: name : numerical_csv_column_name type : numerical norm : null tied_weights : null Numerical Output Features and Decoders \u00b6 Numerical features can be used when a regression needs to be performed. There is only one decoder available for numerical features and it is a (potentially empty) stack of fully connected layers, followed by a projection into a single number. These are the available parameters of a numerical output feature reduce_inputs (default sum ): defines how to reduce an input that is not a vector, but a matrix or a higher order tensor, on the first dimension 9second if you count the batch dimension). Available values are: sum , mean or avg , max , concat (concatenates along the first dimension), last (returns the last vector of the first dimension). dependencies (default [] ): the output features this one is dependent on. For a detailed explanation refer to Output Features Dependencies . reduce_dependencies (default sum ): defines how to reduce the output of a dependent feature that is not a vector, but a matrix or a higher order tensor, on the first dimension 9second if you count the batch dimension). Available values are: sum , mean or avg , max , concat (concatenates along the first dimension), last (returns the last vector of the first dimension). loss (default {type: mean_squared_error} ): is a dictionary containing a loss type . The available losses type are mean_squared_error and mean_absolute_error . These are the available parameters of a numerical output feature decoder fc_layers (default null ): it is a list of dictionaries containing the parameters of all the fully connected layers. The length of the list determines the number of stacked fully connected layers and the content of each dictionary determines the parameters for a specific layer. The available parameters for each layer are: fc_size , norm , activation , dropout , initializer and regularize . If any of those values is missing from the dictionary, the default one specified as a parameter of the decoder will be used instead. num_fc_layers (default 0): this is the number of stacked fully connected layers that the input to the feature passes through. Their output is projected in the feature's output space. fc_size (default 256 ): if a fc_size is not already specified in fc_layers this is the default fc_size that will be used for each layer. It indicates the size of the output of a fully connected layer. activation (default relu ): if an activation is not already specified in fc_layers this is the default activation that will be used for each layer. It indicates the activation function applied to the output. norm (default null ): if a norm is not already specified in fc_layers this is the default norm that will be used for each layer. It indicates the norm of the output and it can be null , batch or layer . dropout (default false ): determines if there should be a dropout layer after each layer. initializer (default null ): the initializer to use. If null , the default initialized of each variable is used ( glorot_uniform in most cases). Options are: constant , identity , zeros , ones , orthogonal , normal , uniform , truncated_normal , variance_scaling , glorot_normal , glorot_uniform , xavier_normal , xavier_uniform , he_normal , he_uniform , lecun_normal , lecun_uniform . Alternatively it is possible to specify a dictionary with a key type that identifies the type of initializer and other keys for its parameters, e.g. {type: normal, mean: 0, stddev: 0} . To know the parameters of each initializer, please refer to TensorFlow's documentation . regularize (default true ): if true the weights of the layers are added to the set of weights that get regularized by a regularization loss (if the regularization_lambda in training is greater than 0). clip (default null ): If not null it specifies a minimum and maximum value the predictions will be clipped to. The value can be either a list or a tuple of length 2, with the first value representing the minimum and the second the maximum. For instance (-5,5) will make it so that all predictions will be clipped in the [-5,5] interval. Example numerical feature entry (with default parameters) in the output features list: name : numerical_csv_column_name type : numerical reduce_inputs : sum dependencies : [] reduce_dependencies : sum loss : type : mean_squared_error fc_layers : null num_fc_layers : 0 fc_size : 256 activation : relu norm : null dropout : false initializer : null regularize : true Numerical Features Measures \u00b6 The measures that are calculated every epoch and are available for numerical features are mean_squared_error , mean_absolute_error , r2 and the loss itself. You can set either of them as validation_measure in the training section of the model definition if you set the validation_field to be the name of a numerical feature. Category Features \u00b6 Category Features Preprocessing \u00b6 Category features are transformed into an integer valued vector of size n (where n is the size of the dataset) and added to HDF5 with a key that reflects the name of column in the CSV. The way categories are mapped into integers consists in first collecting a dictionary of all the different category strings present in the column of the CSV, then rank them by frequency and then assign them an increasing integer ID from the most frequent to the most rare (with 0 being assigned to a <UNK> token). The column name is added to the JSON file, with an associated dictionary containing 1. the mapping from integer to string ( idx2str ) 2. the mapping from string to id ( str2idx ) 3. the mapping from string to frequency ( str2freq ) 4. the size of the set of all tokens ( vocab_size ) 4. additional preprocessing information (by default how to fill missing values and what token to use to fill missing values) The parameters available for preprocessing are missing_value_strategy (default fill_with_const ): what strategy to follow when there's a missing value in a binary column. The value should be one of fill_with_const (replaces the missing value with a specific value specified with the fill_value parameter), fill_with_mode (replaces the missing values with the most frequent value in the column), fill_with_mean (replaces the missing values with the mean of the values in the column), backfill (replaces the missing values with the next valid value). fill_value (default \"<UNK>\" ): the value to replace the missing values with in case the missing_value_strategy is fill-value . lowercase (default false ): if the string has to be lowercased before being handled by the formatter. most_common (default 10000 ): the maximum number of most common tokens to be considered. if the data contains more than this amount, the most infrequent tokens will be treated as unknown. Category Input Features and Encoders \u00b6 Category features have one encoder, the raw integer values coming from the input placeholders are mapped to either dense or sparse embeddings (one-hot encodings) and returned as outputs. Inputs are of size b while outputs are fo size b x h where b is the batch size and h is the dimensionality of the embeddings. The available encoder parameters are representation' (default dense ): the possible values are dense and sparse . dense means the embeddings are initialized randomly, sparse means they are initialized to be one-hot encodings. embedding_size (default 256 ): it is the maximum embedding size, the actual size will be min(vocabulary_size, embedding_size) for dense representations and exactly vocabulary_size for the sparse encoding, where vocabulary_size is the number of different strings appearing in the training set in the column the feature is named after (plus 1 for <UNK> ). embeddings_on_cpu (default false ): by default embeddings matrices are stored on GPU memory if a GPU is used, as it allows for faster access, but in some cases the embedding matrix may be really big and this parameter forces the placement of the embedding matrix in regular memory and the CPU is used to resolve them, slightly slowing down the process as a result of data transfer between CPU and GPU memory. pretrained_embeddings (default null ): by default dense embeddings are initialized randomly, but this parameter allow to specify a path to a file containing embeddings in the GloVe format . When the file containing the embeddings is loaded, only the embeddings with labels present in the vocabulary are kept, the others are discarded. If the vocabulary contains strings that have no match in the embeddings file, their embeddings are initialized with the average of all other embedding plus some random noise to make them different from each other. This parameter has effect only if representation is dense . embeddings_trainable (default true ): If true embeddings are trained during the training process, if false embeddings are fixed. It may be useful when loading pretrained embeddings for avoiding finetuning them. This parameter has effect only for representation is dense as sparse one-hot encodings are not trainable. dropout (default false ): determines if there should be a dropout layer after embedding. initializer (default null ): the initializer to use. If null , the default initialized of each variable is used ( glorot_uniform in most cases). Options are: constant , identity , zeros , ones , orthogonal , normal , uniform , truncated_normal , variance_scaling , glorot_normal , glorot_uniform , xavier_normal , xavier_uniform , he_normal , he_uniform , lecun_normal , lecun_uniform . Alternatively it is possible to specify a dictionary with a key type that identifies the type of initializer and other keys for its parameters, e.g. {type: normal, mean: 0, stddev: 0} . To know the parameters of each initializer, please refer to TensorFlow's documentation . regularize (default true ): if true the embedding weights are added to the set of weights that get regularized by a regularization loss (if the regularization_lambda in training is greater than 0). tied_weights (default null ): name of the input feature to tie the weights the encoder with. It needs to be the name of a feature of the same type and with the same encoder parameters. Example category feature entry in the input features list: name : category_csv_column_name type : category representation : dense embedding_size : 256 embeddings_on_cpu : false pretrained_embeddings : null embeddings_trainable : true dropout : false initializer : null regularize : true tied_weights : null Category Output Features and Decoders \u00b6 Category features can be used when a multi-class classification needs to be performed. There is only one decoder available for category features and it is a (potentially empty) stack of fully connected layers, followed by a projection into a vector of size of the number of available classes, followed by a softmax. +--------------+ +---------+ +-----------+ |Combiner | |Fully | |Projection | +-------+ |Output +--->Connected+--->into Output+--->Softmax| |Representation| |Layers | |Space | +-------+ +--------------+ +---------+ +-----------+ These are the available parameters of a category output feature reduce_inputs (default sum ): defines how to reduce an input that is not a vector, but a matrix or a higher order tensor, on the first dimension 9second if you count the batch dimension). Available values are: sum , mean or avg , max , concat (concatenates along the first dimension), last (returns the last vector of the first dimension). dependencies (default [] ): the output features this one is dependent on. For a detailed explanation refer to Output Features Dependencies . reduce_dependencies (default sum ): defines how to reduce the output of a dependent feature that is not a vector, but a matrix or a higher order tensor, on the first dimension 9second if you count the batch dimension). Available values are: sum , mean or avg , max , concat (concatenates along the first dimension), last (returns the last vector of the first dimension). loss (default {type: softmax_cross_entropy, class_similarities_temperature: 0, class_weights: 1, confidence_penalty: 0, distortion: 1, labels_smoothing: 0, negative_samples: 0, robust_lambda: 0, sampler: null, unique: false} ): is a dictionary containing a loss type . The available losses type are softmax_cross_entropy and sampled_softmax_cross_entropy . These are the loss parameters confidence_penalty (default 0 ): penalizes overconfident predictions (low entropy) by adding an additional term that penalizes too confident predictions by adding a a * (max_entropy - entropy) / max_entropy term to the loss, where a is the value of this parameter. Useful in case of noisy labels. robust_lambda (default 0 ): replaces the loss with (1 - robust_lambda) * loss + robust_lambda / c where c is the number of classes, which is useful in case of noisy labels. class_weights (default 1 ): the value can be a vector of weights, one of each class, that is multiplied to the loss of the datapoints that have that class as ground truth. It is an alternative to oversampling in case of unbalanced class distribution. The ordering of the vector follows the category to integer ID mapping in the JSON metadata file (the <UNK> class needs to be included too). class_similarities (default null ): if not null it is a c x c matrix in the form of a list of lists that contains the mutual similarity of classes. It is used if class_similarities_temperature is greater than 0. The ordering of the vector follows the category to integer ID mapping in the JSON metadata file (the <UNK> class needs to be included too). class_similarities_temperature (default 0 ): is the temperature parameter of the softmax that is performed on each row of class_similarities . The output of that softmax is used to determine the supervision vector to provide instead of the one hot vector that would be provided otherwise for each datapoint. The intuition behind it is that errors between similar classes are more tollerable than errors between really different classes. labels_smoothing (default 0 ): If label_smoothing is nonzero, smooth the labels towards 1/num_classes : new_onehot_labels = onehot_labels * (1 - label_smoothing) + label_smoothing / num_classes . negative_samples (default 0 ): if type is sampled_softmax_cross_entropy , this parameter indicates how many negative samples to use. sampler (default null ): options are fixed_unigram , uniform , log_uniform , learned_unigram . For a detailed description of the samplers refer to TensorFlow's documentation . distortion (default 1 ): when loss is sampled_softmax_cross_entropy and the sampler is either unigram or learned_unigram this is used to skew the unigram probability distribution. Each weight is first raised to the distortion's power before adding to the internal unigram distribution. As a result, distortion = 1.0 gives regular unigram sampling (as defined by the vocab file), and distortion = 0.0 gives a uniform distribution. unique (default false ): Determines whether all sampled classes in a batch are unique. These are the available parameters of a category output feature decoder fc_layers (default null ): it is a list of dictionaries containing the parameters of all the fully connected layers. The length of the list determines the number of stacked fully connected layers and the content of each dictionary determines the parameters for a specific layer. The available parameters for each layer are: fc_size , norm , activation , dropout , initializer and regularize . If any of those values is missing from the dictionary, the default one specified as a parameter of the decoder will be used instead. num_fc_layers (default 0): this is the number of stacked fully connected layers that the input to the feature passes through. Their output is projected in the feature's output space. fc_size (default 256 ): if a fc_size is not already specified in fc_layers this is the default fc_size that will be used for each layer. It indicates the size of the output of a fully connected layer. activation (default relu ): if an activation is not already specified in fc_layers this is the default activation that will be used for each layer. It indicates the activation function applied to the output. norm (default null ): if a norm is not already specified in fc_layers this is the default norm that will be used for each layer. It indicates the norm of the output and it can be null , batch or layer . dropout (default false ): determines if there should be a dropout layer after each layer. initializer (default null ): the initializer to use. If null , the default initialized of each variable is used ( glorot_uniform in most cases). Options are: constant , identity , zeros , ones , orthogonal , normal , uniform , truncated_normal , variance_scaling , glorot_normal , glorot_uniform , xavier_normal , xavier_uniform , he_normal , he_uniform , lecun_normal , lecun_uniform . Alternatively it is possible to specify a dictionary with a key type that identifies the type of initializer and other keys for its parameters, e.g. {type: normal, mean: 0, stddev: 0} . To know the parameters of each initializer, please refer to TensorFlow's documentation . regularize (default true ): if true the weights of the layers are added to the set of weights that get regularized by a regularization loss (if the regularization_lambda in training is greater than 0). top_k (default 3 ): determines the parameter k , the number of categories to consider when computing the top_k measure. It computes accuracy but considering as a match if the true category appears in the first k predicted categories ranked by decoder's confidence. Example category feature entry (with default parameters) in the output features list: name : category_csv_column_name type : category reduce_inputs : sum dependencies : [] reduce_dependencies : sum loss : type : softmax_cross_entropy confidence_penalty : 0 robust_lambda : 0 class_weights : 1 class_similarities : null class_similarities_temperature : 0 labels_smoothing : 0 negative_samples : 0 sampler : null distortion : 1 unique : false fc_layers : null num_fc_layers : 0 fc_size : 256 activation : relu norm : null dropout : false initializer : null regularize : true top_k : 3 Category Features Measures \u00b6 The measures that are calculated every epoch and are available for category features are accuracy , top_k (computes accuracy considering as a match if the true category appears in the first k predicted categories ranked by decoder's confidence) and the loss itself. You can set either of them as validation_measure in the training section of the model definition if you set the validation_field to be the name of a category feature. Set Features \u00b6 Set Features Preprocessing \u00b6 Set features are transformed into a binary (int8 actually) valued matrix of size n x l (where n is the size of the dataset and l is the minimum of the size of the biggest set and a max_size parameter) and added to HDF5 with a key that reflects the name of column in the CSV. The way sets are mapped into integers consists in first using a formatter to map from strings to sequences of set items (by default this is done by splitting on spaces). Then a a dictionary of all the different set item strings present in the column of the CSV is collected, then they are ranked by frequency and an increasing integer ID is assigned to them from the most frequent to the most rare (with 0 being assigned to <PAD> used for padding and 1 assigned to <UNK> item). The column name is added to the JSON file, with an associated dictionary containing 1. the mapping from integer to string ( idx2str ) 2. the mapping from string to id ( str2idx ) 3. the mapping from string to frequency ( str2freq ) 4. the maximum size of all sets ( max_set_size ) 5. additional preprocessing information (by default how to fill missing values and what token to use to fill missing values) The parameters available for preprocessing arehe parameters available for preprocessing are missing_value_strategy (default fill_with_const ): what strategy to follow when there's a missing value in a binary column. The value should be one of fill_with_const (replaces the missing value with a specific value specified with the fill_value parameter), fill_with_mode (replaces the missing values with the most frequent value in the column), fill_with_mean (replaces the missing values with the mean of the values in the column), backfill (replaces the missing values with the next valid value). fill_value (default 0 ): the value to replace the missing values with in case the missing_value_strategy is fill-value . format (default space ): defines how to map from the raw string content of the CSV column to a set of elements. The default value space splits the string on spaces. Other options are: underscore (splits on underscore), comma (splits on comma), json (decodes the string into a set or a list through a JSON parser). lowercase (default false ): if the string has to be lowercased before being handled by the formatter. most_common (default 10000 ): the maximum number of most common tokens to be considered. if the data contains more than this amount, the most infrequent tokens will be treated as unknown. Set Input Features and Encoders \u00b6 Set features have one encoder, the raw binary values coming from the input placeholders are first transformed in sparse integer lists, then they are mapped to either dense or sparse embeddings (one-hot encodings), finally they are aggregated and returned as outputs. Inputs are of size b while outputs are fo size b x h where b is the batch size and h is the dimensionally of the embeddings. +-+ |0| +-----+ |0| +-+ |emb 2| +-----------+ |1| |2| +-----+ |Aggregation| |0+--->4+---->emb 4+--->Reduce +-> |1| |5| +-----+ |Operation | |1| +-+ |emb 5| +-----------+ |0| +-----+ +-+ The available encoder parameters are representation' (default dense ): the possible values are dense and sparse . dense means the embeddings are initialized randomly, sparse means they are initialized to be one-hot encodings. embedding_size (default 50 ): it is the maximum embedding size, the actual size will be min(vocabulary_size, embedding_size) for dense representations and exactly vocabulary_size for the sparse encoding, where vocabulary_size is the number of different strings appearing in the training set in the column the feature is named after (plus 1 for <UNK> ). embeddings_on_cpu (default false ): by default embeddings matrices are stored on GPU memory if a GPU is used, as it allows for faster access, but in some cases the embedding matrix may be really big and this parameter forces the placement of the embedding matrix in regular memory and the CPU is used to resolve them, slightly slowing down the process as a result of data transfer between CPU and GPU memory. pretrained_embeddings (default null ): by default dense embeddings are initialized randomly, but this parameter allow to specify a path to a file containing embeddings in the GloVe format . When the file containing the embeddings is loaded, only the embeddings with labels present in the vocabulary are kept, the others are discarded. If the vocabulary contains strings that have no match in the embeddings file, their embeddings are initialized with the average of all other embedding plus some random noise to make them different from each other. This parameter has effect only if representation is dense . embeddings_trainable (default true ): If true embeddings are trained during the training process, if false embeddings are fixed. It may be useful when loading pretrained embeddings for avoiding finetuning them. This parameter has effect only for representation is dense as sparse one-hot encodings are not trainable. dropout (default false ): determines if there should be a dropout layer before returning the encoder output. initializer (default null ): the initializer to use. If null , the default initialized of each variable is used ( glorot_uniform in most cases). Options are: constant , identity , zeros , ones , orthogonal , normal , uniform , truncated_normal , variance_scaling , glorot_normal , glorot_uniform , xavier_normal , xavier_uniform , he_normal , he_uniform , lecun_normal , lecun_uniform . Alternatively it is possible to specify a dictionary with a key type that identifies the type of initializer and other keys for its parameters, e.g. {type: normal, mean: 0, stddev: 0} . To know the parameters of each initializer, please refer to TensorFlow's documentation . regularize (default true ): if true the embedding weights are added to the set of weights that get regularized by a regularization loss (if the regularization_lambda in training is greater than 0). reduce_output (default sum ): describes the strategy to use to aggregate the embeddings of the items of the set. Possible values are sum , mean and sqrt (the weighted sum divided by the square root of the sum of the squares of the weights). tied_weights (default null ): name of the input feature to tie the weights the encoder with. It needs to be the name of a feature of the same type and with the same encoder parameters. Example set feature entry in the output features list: name : set_csv_column_name type : set representation : dense embedding_size : 50 embeddings_on_cpu : false pretrained_embeddings : null embeddings_trainable : true dropout : false initializer : null regularize : true reduce_output : sum tied_weights : null Set Output Features and Decoders \u00b6 Set features can be used when multi-label classification needs to be performed. There is only one decoder available for set features and it is a (potentially empty) stack of fully connected layers, followed by a projection into a vector of size of the number of available classes, followed by a sigmoid. +--------------+ +---------+ +-----------+ |Combiner | |Fully | |Projection | +-------+ |Output +--->Connected+--->into Output+--->Sigmoid| |Representation| |Layers | |Space | +-------+ +--------------+ +---------+ +-----------+ These are the available parameters of the set output feature reduce_inputs (default sum ): defines how to reduce an input that is not a vector, but a matrix or a higher order tensor, on the first dimension 9second if you count the batch dimension). Available values are: sum , mean or avg , max , concat (concatenates along the first dimension), last (returns the last vector of the first dimension). dependencies (default [] ): the output features this one is dependent on. For a detailed explanation refer to Output Features Dependencies . reduce_dependencies (default sum ): defines how to reduce the output of a dependent feature that is not a vector, but a matrix or a higher order tensor, on the first dimension 9second if you count the batch dimension). Available values are: sum , mean or avg , max , concat (concatenates along the first dimension), last (returns the last vector of the first dimension). loss (default {type: sigmoid_cross_entropy} ): is a dictionary containing a loss type . The available loss type is sigmoid_cross_entropy . These are the available parameters of a set output feature decoder fc_layers (default null ): it is a list of dictionaries containing the parameters of all the fully connected layers. The length of the list determines the number of stacked fully connected layers and the content of each dictionary determines the parameters for a specific layer. The available parameters for each layer are: fc_size , norm , activation , dropout , initializer and regularize . If any of those values is missing from the dictionary, the default one specified as a parameter of the decoder will be used instead. num_fc_layers (default 0): this is the number of stacked fully connected layers that the input to the feature passes through. Their output is projected in the feature's output space. fc_size (default 256 ): if a fc_size is not already specified in fc_layers this is the default fc_size that will be used for each layer. It indicates the size of the output of a fully connected layer. activation (default relu ): if an activation is not already specified in fc_layers this is the default activation that will be used for each layer. It indicates the activation function applied to the output. norm (default null ): if a norm is not already specified in fc_layers this is the default norm that will be used for each layer. It indicates the norm of the output and it can be null , batch or layer . dropout (default false ): determines if there should be a dropout layer after each layer. initializer (default null ): the initializer to use. If null , the default initialized of each variable is used ( glorot_uniform in most cases). Options are: constant , identity , zeros , ones , orthogonal , normal , uniform , truncated_normal , variance_scaling , glorot_normal , glorot_uniform , xavier_normal , xavier_uniform , he_normal , he_uniform , lecun_normal , lecun_uniform . Alternatively it is possible to specify a dictionary with a key type that identifies the type of initializer and other keys for its parameters, e.g. {type: normal, mean: 0, stddev: 0} . To know the parameters of each initializer, please refer to TensorFlow's documentation . regularize (default true ): if true the wights of the layers are added to the set of weights that get regularized by a regularization loss (if the regularization_lambda in training is greater than 0). threshold (default 0.5 ): The threshold above (greater or equal) which the predicted output of the sigmoid will be mapped to 1. Example set feature entry (with default parameters) in the output features list: name : set_csv_column_name type : set reduce_inputs : sum dependencies : [] reduce_dependencies : sum loss : type : sigmoid_cross_entropy fc_layers : null num_fc_layers : 0 fc_size : 256 activation : relu norm : null dropout : false initializer : null regularize : true threshold : 0.5 Set Features Measures \u00b6 The measures that are calculated every epoch and are available for category features are jaccard_index and the loss itself. You can set either of them as validation_measure in the training section of the model definition if you set the validation_field to be the name of a set feature. Bag Features \u00b6 Bag Features Preprocessing \u00b6 Bag features are treated in the same way of set features, with the only difference being that the matrix had float values (frequencies). Bag Input Features and Encoders \u00b6 Bag features have one encoder, the raw float values coming from the input placeholders are first transformed in sparse integer lists, then they are mapped to either dense or sparse embeddings (one-hot encodings), they are aggregated as a weighted sum, where the weights are the original float values, and finally returned as outputs. Inputs are of size b while outputs are fo size b x h where b is the batch size and h is the dimensionality of the embeddings. The parameters are the same used for set input features with the exception of reduce_output that does not apply in this case because the weighted sum already acts as a reducer. Bag Output Features and Decoders \u00b6 There is no bag decoder available yet. Bag Features Measures \u00b6 As there is no decoder there is also no measure available yet for bag feature. Sequence Features \u00b6 Sequence Features Preprocessing \u00b6 Sequence features are transformed into an integer valued matrix of size n x l (where n is the size of the dataset and l is the minimum of the length of the longest sequence and a sequence_length_limit parameter) and added to HDF5 with a key that reflects the name of column in the CSV. The way sequences are mapped into integers consists in first using a formatter to map from strings to sequences of tokens (by default this is done by splitting on spaces). Then a a dictionary of all the different token strings present in the column of the CSV is collected, then they are ranked by frequency and an increasing integer ID is assigned to them from the most frequent to the most rare (with 0 being assigned to <PAD> used for padding and 1 assigned to <UNK> item). The column name is added to the JSON file, with an associated dictionary containing 1. the mapping from integer to string ( idx2str ) 2. the mapping from string to id ( str2idx ) 3. the mapping from string to frequency ( str2freq ) 4. the maximum length of all sequences ( sequence_length_limit ) 5. additional preprocessing information (by default how to fill missing values and what token to use to fill missing values) The parameters available for preprocessing are missing_value_strategy (default fill_with_const ): what strategy to follow when there's a missing value in a binary column. The value should be one of fill_with_const (replaces the missing value with a specific value specified with the fill_value parameter), fill_with_mode (replaces the missing values with the most frequent value in the column), fill_with_mean (replaces the missing values with the mean of the values in the column), backfill (replaces the missing values with the next valid value). fill_value (default \"\" ): the value to replace the missing values with in case the missing_value_strategy is fill_value . padding (default right ): the direction of the padding. right and left are available options. padding_symbol (default <PAD> ): the string used as a padding symbol. Is is mapped to the integer ID 0 in the vocabulary. unknown_symbol (default <UNK> ): the string used as a unknown symbol. Is is mapped to the integer ID 1 in the vocabulary. lowercase (default false ): if the string has to be lowercase before being handled by the formatter. format (default space ): defines how to map from the raw string content of the CSV column to a sequence of elements. The default value space splits the string on spaces. Other options are: underscore (splits on underscore), comma (splits on comma), json (decodes the string into a set or a list through a JSON parser). most_common (default 20000 ): the maximum number of most common tokens to be considered. if the data contains more than this amount, the most infrequent tokens will be treated as unknown. sequence_length_limit (default 256 ): the maximum length of the sequence. Sequences that are longer than this value will be truncated, while sequences that are shorter will be padded. Sequence Input Features and Encoders \u00b6 Sequence features have several encoders and each of them has its own parameters. Inputs are of size b while outputs are fo size b x h where b is the batch size and h is the dimensionally of the output of the encoder. In case a representation for each element of the sequence is needed (for example for tagging them, or for using an attention mechanism), one can specify the parameter reduce_output to be null or None and the output will be a b x s x h tensor where s is the length of the sequence. Some encoders, because of their inner workings, may require additional parameters to be specified in order to obtain one representation for each element of the sequence. For instance the parallel_cnn encoder, by default pools and flattens the sequence dimension and then passes the flattened vector through fully connected layers, so in order to obtain the full tesnor one has to specify reduce_output: null . Sequence input feature parameters are encoder (default parallel_cnn ): the name of the encoder to use to encode the sequence. The available ones are embed , parallel_cnn , stacked_cnn , stacked_parallel_cnn , rnn , cnnrnn and passthrough (equivalent to specify None or null ). tied_weights (default null ): name of the input feature to tie the weights the encoder with. It needs to be the name of a feature of the same type and with the same encoder parameters. Embed Encoder \u00b6 The embed encoder simply maps each integer in the sequence to an embedding, creating a b x s x h tensor where b is the batch size, s is the length of the sequence and h is the embedding size. The tensor is reduced along the s dimension to obtain a single vector of size h for each element of the batch. If you want to output the full b x s x h tensor, you can specify reduce_output: null . +------+ |Emb 12| +------+ +--+ |Emb 7 | |12| +------+ |7 | |Emb 43| +-----------+ |43| +------+ |Aggregation| |65+--->Emb 65+--->Reduce +-> |23| +------+ |Operation | |4 | |Emb 23| +-----------+ |1 | +------+ +--+ |Emb 4 | +------+ |Emb 1 | +------+ These are the parameters available for the embed encoder representation' (default dense ): the possible values are dense and sparse . dense means the embeddings are initialized randomly, sparse means they are initialized to be one-hot encodings. embedding_size (default 50 ): it is the maximum embedding size, the actual size will be min(vocabulary_size, embedding_size) for dense representations and exactly vocabulary_size for the sparse encoding, where vocabulary_size is the number of different strings appearing in the training set in the column the feature is named after (plus 1 for <UNK> ). embeddings_on_cpu (default false ): by default embeddings matrices are stored on GPU memory if a GPU is used, as it allows for faster access, but in some cases the embedding matrix may be really big and this parameter forces the placement of the embedding matrix in regular memory and the CPU is used to resolve them, slightly slowing down the process as a result of data transfer between CPU and GPU memory. pretrained_embeddings (default null ): by default dense embeddings are initialized randomly, but this parameter allow to specify a path to a file containing embeddings in the GloVe format . When the file containing the embeddings is loaded, only the embeddings with labels present in the vocabulary are kept, the others are discarded. If the vocabulary contains strings that have no match in the embeddings file, their embeddings are initialized with the average of all other embedding plus some random noise to make them different from each other. This parameter has effect only if representation is dense . embeddings_trainable (default true ): If true embeddings are trained during the training process, if false embeddings are fixed. It may be useful when loading pretrained embeddings for avoiding finetuning them. This parameter has effect only for representation is dense as sparse one-hot encodings are not trainable. dropout (default false ): determines if there should be a dropout layer before returning the encoder output. initializer (default null ): the initializer to use. If null , the default initialized of each variable is used ( glorot_uniform in most cases). Options are: constant , identity , zeros , ones , orthogonal , normal , uniform , truncated_normal , variance_scaling , glorot_normal , glorot_uniform , xavier_normal , xavier_uniform , he_normal , he_uniform , lecun_normal , lecun_uniform . Alternatively it is possible to specify a dictionary with a key type that identifies the type of initializer and other keys for its parameters, e.g. {type: normal, mean: 0, stddev: 0} . To know the parameters of each initializer, please refer to TensorFlow's documentation . regularize (default true ): if true the embedding weights are added to the set of weights that get regularized by a regularization loss (if the regularization_lambda in training is greater than 0). reduce_output (default sum ): defines how to reduce the output tensor along the s sequence length dimension if the rank of the tensor is greater than 2. Available values are: sum , mean or avg , max , concat (concatenates along the first dimension), last (returns the last vector of the first dimension) and null or None (which does not reduce and returns the full tensor). Example sequence feature entry in the output features list using an embed encoder: name : sequence_csv_column_name type : sequence encoder : embed tied_weights : null representation : dense embedding_size : 256 embeddings_on_cpu : false pretrained_embeddings : null embeddings_trainable : true dropout : false initializer : null regularize : true reduce_output : sum Parallel CNN Encoder \u00b6 The parallel cnn encoder is inspired by Yoon Kim's Convolutional Neural Network for Sentence Classification . It works by first mapping the input integer sequence b x s (where b is the batch size and s is the length of the sequence) into a sequence of embeddings, then it passes the embedding through a number of parallel 1d convolutional layers with different filter size (by default 4 layers with filter size 2, 3, 4 and 5), followed by max pooling and concatenation. This single vector concatenating the outputs of the parallel convolutional layers is then passed through a stack of fully connected layers and returned as a b x h tensor where h is the output size of the last fully connected layer. If you want to output the full b x s x h tensor, you can specify reduce_output: null . +-------+ +----+ +-->1D Conv+--->Pool+-+ +------+ | |Width 2| +----+ | |Emb 12| | +-------+ | +------+ | | +--+ |Emb 7 | | +-------+ +----+ | |12| +------+ +-->1D Conv+--->Pool+-+ |7 | |Emb 43| | |Width 3| +----+ | +---------+ |43| +------+ | +-------+ | +------+ |Fully | |65+--->Emb 65+-+ +->Concat+-->Connected+-> |23| +------+ | +-------+ +----+ | +------+ |Layers | |4 | |Emb 23| +-->1D Conv+--->Pool+-+ +---------+ |1 | +------+ | |Width 4| +----+ | +--+ |Emb 4 | | +-------+ | +------+ | | |Emb 1 | | +-------+ +----+ | +------+ +-->1D Conv+--->Pool+-+ |Width 5| +----+ +-------+ These are the available for an parallel cnn encoder: representation' (default dense ): the possible values are dense and sparse . dense means the embeddings are initialized randomly, sparse means they are initialized to be one-hot encodings. embedding_size (default 256 ): it is the maximum embedding size, the actual size will be min(vocabulary_size, embedding_size) for dense representations and exactly vocabulary_size for the sparse encoding, where vocabulary_size is the number of different strings appearing in the training set in the column the feature is named after (plus 1 for <UNK> ). embeddings_on_cpu (default false ): by default embeddings matrices are stored on GPU memory if a GPU is used, as it allows for faster access, but in some cases the embedding matrix may be really big and this parameter forces the placement of the embedding matrix in regular memory and the CPU is used to resolve them, slightly slowing down the process as a result of data transfer between CPU and GPU memory. pretrained_embeddings (default null ): by default dense embeddings are initialized randomly, but this parameter allow to specify a path to a file containing embeddings in the GloVe format . When the file containing the embeddings is loaded, only the embeddings with labels present in the vocabulary are kept, the others are discarded. If the vocabulary contains strings that have no match in the embeddings file, their embeddings are initialized with the average of all other embedding plus some random noise to make them different from each other. This parameter has effect only if representation is dense . embeddings_trainable (default true ): If true embeddings are trained during the training process, if false embeddings are fixed. It may be useful when loading pretrained embeddings for avoiding finetuning them. This parameter has effect only for representation is dense as sparse one-hot encodings are not trainable. conv_layers (default null ): it is a list of dictionaries containing the parameters of all the convolutional layers. The length of the list determines the number of parallel convolutional layers and the content of each dictionary determines the parameters for a specific layer. The available parameters for each layer are: filter_size , num_filters , pool , norm , activation and regularize . If any of those values is missing from the dictionary, the default one specified as a parameter of the encoder will be used instead. If both conv_layers and num_conv_layers are null , a default list will be assigned to conv_layers with the value [{filter_size: 2}, {filter_size: 3}, {filter_size: 4}, {filter_size: 5}] . num_conv_layers (default null ): if conv_layers is null , this is the number of parallel convolutional layers. filter_size (default 3 ): if a filter_size is not already specified in conv_layers this is the default filter_size that will be used for each layer. It indicates how wide is the 1d convolutional filter. num_filters (default 256 ): if a num_filters is not already specified in conv_layers this is the default num_filters that will be used for each layer. It indicates the number of filters, and by consequence the output channels of the 1d convolution. pool_size (default null ): if a pool_size is not already specified in conv_layers this is the default pool_size that will be used for each layer. It indicates the size of the max pooling that will be performed along the s sequence dimension after the convolution operation. fc_layers (default null ): it is a list of dictionaries containing the parameters of all the fully connected layers. The length of the list determines the number of stacked fully connected layers and the content of each dictionary determines the parameters for a specific layer. The available parameters for each layer are: fc_size , norm , activation , initializer and regularize . If any of those values is missing from the dictionary, the default one specified as a parameter of the encoder will be used instead. If both fc_layers and num_fc_layers are null , a default list will be assigned to fc_layers with the value [{fc_size: 512}, {fc_size: 256}] . (only applies if reduce_output is not null ). num_fc_layers (default null ): if fc_layers is null , this is the number of stacked fully connected layers (only applies if reduce_output is not null ). fc_size (default 256 ): if a fc_size is not already specified in fc_layers this is the default fc_size that will be used for each layer. It indicates the size of the output of a fully connected layer. activation (default relu ): if an activation is not already specified in conv_layers or fc_layers this is the default activation that will be used for each layer. It indicates the activation function applied to the output. norm (default null ): if a norm is not already specified in conv_layers or fc_layers this is the default norm that will be used for each layer. It indicates the norm of the output. dropout (default false ): determines if there should be a dropout layer after each layer. initializer (default null ): the initializer to use. If null it uses glorot_uniform . Options are: constant , identity , zeros , ones , orthogonal , normal , uniform , truncated_normal , variance_scaling , glorot_normal , glorot_uniform , xavier_normal , xavier_uniform , he_normal , he_uniform , lecun_normal , lecun_uniform . Alternatively it is possible to specify a dictionary with a key type that identifies the type of initializer and other keys for its parameters, e.g. {type: normal, mean: 0, stddev: 0} . To know the parameters of each initializer, please refer to TensorFlow's documentation . regularize (default true ): if a regularize is not already specified in conv_layers or fc_layers this is the default regularize that will be used for each layer. It indicates if the layer weights should be considered when computing a regularization loss. reduce_output (default sum ): defines how to reduce the output tensor along the s sequence length dimension if the rank of the tensor is greater than 2. Available values are: sum , mean or avg , max , concat (concatenates along the sequence dimension), last (returns the last vector of the sequence dimension) and null or None (which does not reduce and returns the full tensor). Example sequence feature entry in the output features list using a parallel cnn encoder: name : sequence_csv_column_name type : sequence encoder : parallel_cnn tied_weights : null representation : dense embedding_size : 256 embeddings_on_cpu : false pretrained_embeddings : null embeddings_trainable : true conv_layers : null num_conv_layers : null filter_size : 3 num_filters : 256 pool_size : null fc_layers : null num_fc_layers : null fc_size : 256 activation : relu norm : null dropout : false regularize : true reduce_output : sum Stacked CNN Encoder \u00b6 The stacked cnn encoder is inspired by Xiang Zhang at all's Character-level Convolutional Networks for Text Classification . It works by first mapping the input integer sequence b x s (where b is the batch size and s is the length of the sequence) into a sequence of embeddings, then it passes the embedding through a stack of 1d convolutional layers with different filter size (by default 6 layers with filter size 7, 7, 3, 3, 3 and 3), followed by an optional final pool and by a flatten operation. This single flatten vector is then passed through a stack of fully connected layers and returned as a b x h tensor where h is the output size of the last fully connected layer. If you want to output the full b x s x h tensor, you can specify the pool_size of all your conv_layers to be null and reduce_output: null , while if pool_size has a value different from null and reduce_output: null the returned tensor will be of shape b x s' x h , where s' is width of the output of the last convolutional layer. +------+ |Emb 12| +------+ +--+ |Emb 7 | |12| +------+ |7 | |Emb 43| +----------------+ +---------+ |43| +------+ |1D Conv | |Fully | |65+--->Emb 65+--->Layers +-->Connected+-> |23| +------+ |Different Widths| |Layers | |4 | |Emb 23| +----------------+ +---------+ |1 | +------+ +--+ |Emb 4 | +------+ |Emb 1 | +------+ These are the parameters available for the stack cnn encoder: representation' (default dense ): the possible values are dense and sparse . dense means the embeddings are initialized randomly, sparse means they are initialized to be one-hot encodings. embedding_size (default 256 ): it is the maximum embedding size, the actual size will be min(vocabulary_size, embedding_size) for dense representations and exactly vocabulary_size for the sparse encoding, where vocabulary_size is the number of different strings appearing in the training set in the column the feature is named after (plus 1 for <UNK> ). embeddings_on_cpu (default false ): by default embeddings matrices are stored on GPU memory if a GPU is used, as it allows for faster access, but in some cases the embedding matrix may be really big and this parameter forces the placement of the embedding matrix in regular memory and the CPU is used to resolve them, slightly slowing down the process as a result of data transfer between CPU and GPU memory. pretrained_embeddings (default null ): by default dense embeddings are initialized randomly, but this parameter allow to specify a path to a file containing embeddings in the GloVe format . When the file containing the embeddings is loaded, only the embeddings with labels present in the vocabulary are kept, the others are discarded. If the vocabulary contains strings that have no match in the embeddings file, their embeddings are initialized with the average of all other embedding plus some random noise to make them different from each other. This parameter has effect only if representation is dense . embeddings_trainable (default true ): If true embeddings are trained during the training process, if false embeddings are fixed. It may be useful when loading pretrained embeddings for avoiding finetuning them. This parameter has effect only for representation is dense as sparse one-hot encodings are not trainable. conv_layers (default null ): it is a list of dictionaries containing the parameters of all the convolutional layers. The length of the list determines the number of stacked convolutional layers and the content of each dictionary determines the parameters for a specific layer. The available parameters for each layer are: filter_size , num_filters , pool_size , norm , activation and regularize . If any of those values is missing from the dictionary, the default one specified as a parameter of the encoder will be used instead. If both conv_layers and num_conv_layers are null , a default list will be assigned to conv_layers with the value [{filter_size: 7, pool_size: 3, regularize: false}, {filter_size: 7, pool_size: 3, regularize: false}, {filter_size: 3, pool_size: null, regularize: false}, {filter_size: 3, pool_size: null, regularize: false}, {filter_size: 3, pool_size: null, regularize: true}, {filter_size: 3, pool_size: 3, regularize: true}] . num_conv_layers (default null ): if conv_layers is null , this is the number of stacked convolutional layers. filter_size (default 3 ): if a filter_size is not already specified in conv_layers this is the default filter_size that will be used for each layer. It indicates how wide is the 1d convolutional filter. num_filters (default 256 ): if a num_filters is not already specified in conv_layers this is the default num_filters that will be used for each layer. It indicates the number of filters, and by consequence the output channels of the 1d convolution. pool_size (default null ): if a pool_size is not already specified in conv_layers this is the default pool_size that will be used for each layer. It indicates the size of the max pooling that will be performed along the s sequence dimension after the convolution operation. reduce_output (default max ): defines how to reduce the output tensor of the convolutional layers along the s sequence length dimension if the rank of the tensor is greater than 2. Available values are: sum , mean or avg , max , concat (concatenates along the first dimension), last (returns the last vector of the first dimension) and null or None (which does not reduce and returns the full tensor). fc_layers (default null ): it is a list of dictionaries containing the parameters of all the fully connected layers. The length of the list determines the number of stacked fully connected layers and the content of each dictionary determines the parameters for a specific layer. The available parameters for each layer are: fc_size , norm , activation and regularize . If any of those values is missing from the dictionary, the default one specified as a parameter of the encoder will be used instead. If both fc_layers and num_fc_layers are null , a default list will be assigned to fc_layers with the value [{fc_size: 512}, {fc_size: 256}] . (only applies if reduce_output is not null ). num_fc_layers (default null ): if fc_layers is null , this is the number of stacked fully connected layers (only applies if reduce_output is not null ). fc_size (default 256 ): if a fc_size is not already specified in fc_layers this is the default fc_size that will be used for each layer. It indicates the size of the output of a fully connected layer. activation (default relu ): if an activation is not already specified in conv_layers or fc_layers this is the default activation that will be used for each layer. It indicates the activation function applied to the output. norm (default null ): if a norm is not already specified in conv_layers or fc_layers this is the default norm that will be used for each layer. It indicates the norm of the output. dropout (default false ): determines if there should be a dropout layer after each layer. initializer (default null ): the initializer to use. If null it uses glorot_uniform . Options are: constant , identity , zeros , ones , orthogonal , normal , uniform , truncated_normal , variance_scaling , glorot_normal , glorot_uniform , xavier_normal , xavier_uniform , he_normal , he_uniform , lecun_normal , lecun_uniform . Alternatively it is possible to specify a dictionary with a key type that identifies the type of initializer and other keys for its parameters, e.g. {type: normal, mean: 0, stddev: 0} . To know the parameters of each initializer, please refer to TensorFlow's documentation . regularize (default true ): if a regularize is not already specified in conv_layers or fc_layers this is the default regularize that will be used for each layer. It indicates if the layer weights should be considered when computing a regularization loss. reduce_output (default sum ): defines how to reduce the output tensor along the s sequence length dimension if the rank of the tensor is greater than 2. Available values are: sum , mean or avg , max , concat (concatenates along the first dimension), last (returns the last vector of the first dimension) and null or None (which does not reduce and returns the full tensor). Example sequence feature entry in the output features list using a parallel cnn encoder: name : sequence_csv_column_name type : sequence encoder : stacked_cnn tied_weights : null representation : dense embedding_size : 256 embeddings_on_cpu : false pretrained_embeddings : null embeddings_trainable : true conv_layers : null num_conv_layers : null filter_size : 3 num_filters : 256 pool_size : null fc_layers : null num_fc_layers : null fc_size : 256 activation : relu norm : null dropout : false initializer : null regularize : true reduce_output : max Stacked Parallel CNN Encoder \u00b6 The stacked parallel cnn encoder is a combination of the Parallel CNN and the Stacked CNN encoders where each layer of the stack is a composed of parallel convolutional layers. It works by first mapping the input integer sequence b x s (where b is the batch size and s is the length of the sequence) into a sequence of embeddings, then it passes the embedding through a stack of several parallel 1d convolutional layers with different filter size, followed by an optional final pool and by a flatten operation. This single flatten vector is then passed through a stack of fully connected layers and returned as a b x h tensor where h is the output size of the last fully connected layer. If you want to output the full b x s x h tensor, you can specify reduce_output: null . +-------+ +-------+ +-->1D Conv+-+ +-->1D Conv+-+ +------+ | |Width 2| | | |Width 2| | |Emb 12| | +-------+ | | +-------+ | +------+ | | | | +--+ |Emb 7 | | +-------+ | | +-------+ | |12| +------+ +-->1D Conv+-+ +-->1D Conv+-+ |7 | |Emb 43| | |Width 3| | | |Width 3| | +---------+ |43| +------+ | +-------+ | +------+ +---+ | +-------+ | +------+ +----+ |Fully | |65+--->Emb 65+-+ +->Concat+-->...+-+ +->Concat+-->Pool+-->Connected+-> |23| +------+ | +-------+ | +------+ +---+ | +-------+ | +------+ +----+ |Layers | |4 | |Emb 23| +-->1D Conv+-+ +-->1D Conv+-+ +---------+ |1 | +------+ | |Width 4| | | |Width 4| | +--+ |Emb 4 | | +-------+ | | +-------+ | +------+ | | | | |Emb 1 | | +-------+ | | +-------+ | +------+ +-->1D Conv+-+ +-->1D Conv+-+ |Width 5| |Width 5| +-------+ +-------+ These are the available parameters for the stack parallel cnn encoder: representation' (default dense ): the possible values are dense and sparse . dense means the embeddings are initialized randomly, sparse means they are initialized to be one-hot encodings. embedding_size (default 256 ): it is the maximum embedding size, the actual size will be min(vocabulary_size, embedding_size) for dense representations and exactly vocabulary_size for the sparse encoding, where vocabulary_size is the number of different strings appearing in the training set in the column the feature is named after (plus 1 for <UNK> ). embeddings_on_cpu (default false ): by default embeddings matrices are stored on GPU memory if a GPU is used, as it allows for faster access, but in some cases the embedding matrix may be really big and this parameter forces the placement of the embedding matrix in regular memory and the CPU is used to resolve them, slightly slowing down the process as a result of data transfer between CPU and GPU memory. pretrained_embeddings (default null ): by default dense embeddings are initialized randomly, but this parameter allow to specify a path to a file containing embeddings in the GloVe format . When the file containing the embeddings is loaded, only the embeddings with labels present in the vocabulary are kept, the others are discarded. If the vocabulary contains strings that have no match in the embeddings file, their embeddings are initialized with the average of all other embedding plus some random noise to make them different from each other. This parameter has effect only if representation is dense . embeddings_trainable (default true ): If true embeddings are trained during the training process, if false embeddings are fixed. It may be useful when loading pretrained embeddings for avoiding finetuning them. This parameter has effect only for representation is dense as sparse one-hot encodings are not trainable. stacked_layers (default null ): it is a of lists of list of dictionaries containing the parameters of the stack of parallel convolutional layers. The length of the list determines the number of stacked parallel convolutional layers, length of the sub-lists determines the number of parallel conv layers and the content of each dictionary determines the parameters for a specific layer. The available parameters for each layer are: filter_size , num_filters , pool_size , norm , activation and regularize . If any of those values is missing from the dictionary, the default one specified as a parameter of the encoder will be used instead. If both stacked_layers and num_stacked_layers are null , a default list will be assigned to stacked_layers with the value [[{filter_size: 2}, {filter_size: 3}, {filter_size: 4}, {filter_size: 5}], [{filter_size: 2}, {filter_size: 3}, {filter_size: 4}, {filter_size: 5}], [{filter_size: 2}, {filter_size: 3}, {filter_size: 4}, {filter_size: 5}]] . num_stacked_layers (default null ): if stacked_layers is null , this is the number of elements in the stack of parallel convolutional layers. filter_size (default 3 ): if a filter_size is not already specified in conv_layers this is the default filter_size that will be used for each layer. It indicates how wide is the 1d convolutional filter. num_filters (default 256 ): if a num_filters is not already specified in conv_layers this is the default num_filters that will be used for each layer. It indicates the number of filters, and by consequence the output channels of the 1d convolution. pool_size (default null ): if a pool_size is not already specified in conv_layers this is the default pool_size that will be used for each layer. It indicates the size of the max pooling that will be performed along the s sequence dimension after the convolution operation. fc_layers (default null ): it is a list of dictionaries containing the parameters of all the fully connected layers. The length of the list determines the number of stacked fully connected layers and the content of each dictionary determines the parameters for a specific layer. The available parameters for each layer are: fc_size , norm , activation and regularize . If any of those values is missing from the dictionary, the default one specified as a parameter of the encoder will be used instead. If both fc_layers and num_fc_layers are null , a default list will be assigned to fc_layers with the value [{fc_size: 512}, {fc_size: 256}] . (only applies if reduce_output is not null ). num_fc_layers (default null ): if fc_layers is null , this is the number of stacked fully connected layers (only applies if reduce_output is not null ). fc_size (default 256 ): if a fc_size is not already specified in fc_layers this is the default fc_size that will be used for each layer. It indicates the size of the output of a fully connected layer. norm (default null ): if a norm is not already specified in conv_layers or fc_layers this is the default norm that will be used for each layer. It indicates the norm of the output. activation (default relu ): if an activation is not already specified in conv_layers or fc_layers this is the default activation that will be used for each layer. It indicates the activation function applied to the output. regularize (default true ): if a regularize is not already specified in conv_layers or fc_layers this is the default regularize that will be used for each layer. It indicates if the layer weights should be considered when computing a regularization loss. reduce_output (default sum ): defines how to reduce the output tensor along the s sequence length dimension if the rank of the tensor is greater than 2. Available values are: sum , mean or avg , max , concat (concatenates along the first dimension), last (returns the last vector of the first dimension) and null or None (which does not reduce and returns the full tensor). Example sequence feature entry in the output features list using a parallel cnn encoder: name : sequence_csv_column_name type : sequence encoder : stacked_parallel_cnn tied_weights : null representation : dense embedding_size : 256 embeddings_on_cpu : false pretrained_embeddings : null embeddings_trainable : true stacked_layers : null num_stacked_layers : null filter_size : 3 num_filters : 256 pool_size : null fc_layers : null num_fc_layers : null fc_size : 256 norm : null activation : relu regularize : true reduce_output : max RNN Encoder \u00b6 The rnn encoder works by first mapping the input integer sequence b x s (where b is the batch size and s is the length of the sequence) into a sequence of embeddings, then it passes the embedding through a stack of recurrent layers (by default 1 layer), followed by a reduce operation that by default only returns the last output, but can perform other reduce functions. If you want to output the full b x s x h where h is the size of the output of the last rnn layer, you can specify reduce_output: null . +------+ |Emb 12| +------+ +--+ |Emb 7 | |12| +------+ |7 | |Emb 43| +---------+ |43| +------+ +----------+ |Fully | |65+--->Emb 65+--->RNN Layers+-->Connected+-> |23| +------+ +----------+ |Layers | |4 | |Emb 23| +---------+ |1 | +------+ +--+ |Emb 4 | +------+ |Emb 1 | +------+ These are the available parameters for the rnn encoder: representation' (default dense ): the possible values are dense and sparse . dense means the embeddings are initialized randomly, sparse means they are initialized to be one-hot encodings. embedding_size (default 256 ): it is the maximum embedding size, the actual size will be min(vocabulary_size, embedding_size) for dense representations and exactly vocabulary_size for the sparse encoding, where vocabulary_size is the number of different strings appearing in the training set in the column the feature is named after (plus 1 for <UNK> ). embeddings_on_cpu (default false ): by default embeddings matrices are stored on GPU memory if a GPU is used, as it allows for faster access, but in some cases the embedding matrix may be really big and this parameter forces the placement of the embedding matrix in regular memory and the CPU is used to resolve them, slightly slowing down the process as a result of data transfer between CPU and GPU memory. pretrained_embeddings (default null ): by default dense embeddings are initialized randomly, but this parameter allow to specify a path to a file containing embeddings in the GloVe format . When the file containing the embeddings is loaded, only the embeddings with labels present in the vocabulary are kept, the others are discarded. If the vocabulary contains strings that have no match in the embeddings file, their embeddings are initialized with the average of all other embedding plus some random noise to make them different from each other. This parameter has effect only if representation is dense . embeddings_trainable (default true ): If true embeddings are trained during the training process, if false embeddings are fixed. It may be useful when loading pretrained embeddings for avoiding finetuning them. This parameter has effect only for representation is dense as sparse one-hot encodings are not trainable. num_layers (default 1 ): the number of stacked recurrent layers. cell_type (default rnn ): the type of recurrent cell to use. Available values are: rnn , lstm , lstm_block , lstm , ln , lstm_cudnn , gru , gru_block , gru_cudnn . For reference about the differences between the cells please refer to TensorFlow's documentation . We suggest to use the block variants on CPU and the cudnn variants on GPU because of their increased speed. state_size (default 256 ): the size of the state of the rnn. bidirectional (default false ): if true two recurrent networks will perform encoding in the forward and backward direction and their outputs will be concatenated. dropout (default false ): determines if there should be a dropout layer before returning the encoder output. initializer (default null ): the initializer to use. If null , the default initialized of each variable is used ( glorot_uniform in most cases). Options are: constant , identity , zeros , ones , orthogonal , normal , uniform , truncated_normal , variance_scaling , glorot_normal , glorot_uniform , xavier_normal , xavier_uniform , he_normal , he_uniform , lecun_normal , lecun_uniform . Alternatively it is possible to specify a dictionary with a key type that identifies the type of initializer and other keys for its parameters, e.g. {type: normal, mean: 0, stddev: 0} . To know the parameters of each initializer, please refer to TensorFlow's documentation . regularize (default true ): if true the embedding weights are added to the set of weights that get regularized by a regularization loss (if the regularization_lambda in training is greater than 0). reduce_output (default last ): defines how to reduce the output tensor along the s sequence length dimension if the rank of the tensor is greater than 2. Available values are: sum , mean or avg , max , concat (concatenates along the first dimension), last (returns the last vector of the first dimension) and null or None (which does not reduce and returns the full tensor). Example sequence feature entry in the output features list using a parallel cnn encoder: name : sequence_csv_column_name type : sequence encoder : rnn tied_weights : null representation : dense embedding_size : 256 embeddings_on_cpu : false pretrained_embeddings : null embeddings_trainable : true num_layers : 1 cell_type : rnn state_size : 256 bidirectional : false dropout : false initializer : null regularize : true reduce_output : sum CNN RNN Encoder \u00b6 The cnn rnn encoder works by first mapping the input integer sequence b x s (where b is the batch size and s is the length of the sequence) into a sequence of embeddings, then it passes the embedding through a stack of convolutional layers (by default 2), that is followed by a stack of recurrent layers (by default 1), followed by a reduce operation that by default only returns the last output, but can perform other reduce functions. If you want to output the full b x s x h where h is the size of the output of the last rnn layer, you can specify reduce_output: null . +------+ |Emb 12| +------+ +--+ |Emb 7 | |12| +------+ |7 | |Emb 43| +---------+ |43| +------+ +----------+ +----------+ |Fully | |65+--->Emb 65+--->CNN Layers+--->RNN Layers+-->Connected+-> |23| +------+ +----------+ +----------+ |Layers | |4 | |Emb 23| +---------+ |1 | +------+ +--+ |Emb 4 | +------+ |Emb 1 | +------+ These are the available parameters of the cnn rnn encoder: representation' (default dense ): the possible values are dense and sparse . dense means the embeddings are initialized randomly, sparse means they are initialized to be one-hot encodings. embedding_size (default 256 ): it is the maximum embedding size, the actual size will be min(vocabulary_size, embedding_size) for dense representations and exactly vocabulary_size for the sparse encoding, where vocabulary_size is the number of different strings appearing in the training set in the column the feature is named after (plus 1 for <UNK> ). embeddings_on_cpu (default false ): by default embeddings matrices are stored on GPU memory if a GPU is used, as it allows for faster access, but in some cases the embedding matrix may be really big and this parameter forces the placement of the embedding matrix in regular memory and the CPU is used to resolve them, slightly slowing down the process as a result of data transfer between CPU and GPU memory. pretrained_embeddings (default null ): by default dense embeddings are initialized randomly, but this parameter allow to specify a path to a file containing embeddings in the GloVe format . When the file containing the embeddings is loaded, only the embeddings with labels present in the vocabulary are kept, the others are discarded. If the vocabulary contains strings that have no match in the embeddings file, their embeddings are initialized with the average of all other embedding plus some random noise to make them different from each other. This parameter has effect only if representation is dense . embeddings_trainable (default true ): If true embeddings are trained during the training process, if false embeddings are fixed. It may be useful when loading pretrained embeddings for avoiding finetuning them. This parameter has effect only for representation is dense as sparse one-hot encodings are not trainable. conv_layers (default null ): it is a list of dictionaries containing the parameters of all the convolutional layers. The length of the list determines the number of stacked convolutional layers and the content of each dictionary determines the parameters for a specific layer. The available parameters for each layer are: filter_size , num_filters , pool_size , norm , activation and regularize . If any of those values is missing from the dictionary, the default one specified as a parameter of the encoder will be used instead. If both conv_layers and num_conv_layers are null , a default list will be assigned to conv_layers with the value [{filter_size: 7, pool_size: 3, regularize: false}, {filter_size: 7, pool_size: 3, regularize: false}, {filter_size: 3, pool_size: null, regularize: false}, {filter_size: 3, pool_size: null, regularize: false}, {filter_size: 3, pool_size: null, regularize: true}, {filter_size: 3, pool_size: 3, regularize: true}] . num_conv_layers (default null ): if conv_layers is null , this is the number of parallel convolutional layers. filter_size (default 3 ): if a filter_size is not already specified in conv_layers this is the default filter_size that will be used for each layer. It indicates how wide is the 1d convolutional filter. num_filters (default 256 ): if a num_filters is not already specified in conv_layers this is the default num_filters that will be used for each layer. It indicates the number of filters, and by consequence the output channels of the 1d convolution. pool_size (default null ): if a pool_size is not already specified in conv_layers this is the default pool_size that will be used for each layer. It indicates the size of the max pooling that will be performed along the s sequence dimension after the convolution operation. num_rec_layers (default 1 ): the number of stacked recurrent layers. cell_type (default rnn ): the type of recurrent cell to use. Available values are: rnn , lstm , lstm_block , lstm , ln , lstm_cudnn , gru , gru_block , gru_cudnn . For reference about the differences between the cells please refer to TensorFlow's documentstion . We suggest to use the block variants on CPU and the cudnn variants on GPU because of their increased speed. state_size (default 256 ): the size of the state of the rnn. bidirectional (default false ): if true two recurrent networks will perform encoding in the forward and backward direction and their outputs will be concatenated. dropout (default false ): determines if there should be a dropout layer between conv_layers and before returning the encoder output. initializer (default null ): the initializer to use. If null , the default initialized of each variable is used ( glorot_uniform in most cases). Options are: constant , identity , zeros , ones , orthogonal , normal , uniform , truncated_normal , variance_scaling , glorot_normal , glorot_uniform , xavier_normal , xavier_uniform , he_normal , he_uniform , lecun_normal , lecun_uniform . Alternatively it is possible to specify a dictionary with a key type that identifies the type of initializer and other keys for its parameters, e.g. {type: normal, mean: 0, stddev: 0} . To know the parameters of each initializer, please refer to TensorFlow's documentation . regularize (default true ): if true the embedding weights are added to the set of weights that get regularized by a regularization loss (if the regularization_lambda in training is greater than 0). reduce_output (default last ): defines how to reduce the output tensor along the s sequence length dimension if the rank of the tensor is greater than 2. Available values are: sum , mean or avg , max , concat (concatenates along the first dimension), last (returns the last vector of the first dimension) and null or None (which does not reduce and returns the full tensor). Example sequence feature entry in the output features list using a parallel cnn encoder: name : sequence_csv_column_name type : sequence encoder : cnnrnn tied_weights : null representation : dense embedding_size : 256 embeddings_on_cpu : false pretrained_embeddings : null embeddings_trainable : true conv_layers : null num_conv_layers : null filter_size : 3 num_filters : 256 pool_size : null norm : null activation : relu num_rec_layers : 1 cell_type : rnn state_size : 256 bidirectional : false dropout : false initializer : null regularize : true reduce_output : last BERT Encoder \u00b6 The BERT encoder allows for loading a pre-trained bert model. Models are available on GitHube for download. The downloaded pretrained model directory contains: - bert_config.json which holds the hyperparameters of the bert architecture, - vocab.txt which contains the vocabulary of BPE word pieces the model was trained on, - bert_model.ckpt files ( .meta , .index and .data-00000-of-00001 ) which contain the names of the tensors and the weights. In order to use this encder, the BERT Tokenizer need to be used at the same time, as if the tokenization is performed differently, the integers associated with each word piece will be wrong. The BERT Tokenizer also adds [CLS] and [SEP] special tokens at the beginning and at the end of each tokenized sentence respectively. The bert encoder simply maps each integer in the sequence to an embedding (made of a token embedding, a positional embedding and a segment embedding), creating a b x s x h tensor where b is the batch size, s is the length of the sequence and h is the embedding size. Tose embeddings are passed through several transformer layers. The tensor is reduced by selecting the first output vector, the one in correspondence to the [CLS] token, to obtain a single vector of size h for each element of the batch. If you want to output the full b x s x h tensor, you can specify reduce_output: null . In this case the first and last element of the tesnor along the s dimension will be removed, as the correspond to the special tokens and not to the word pieces in the input. +------+ +------+ |Emb 12| |Emb 12+--> +------+ +------+ +--+ |Emb 7 | |Emb 7 | |12| +------+ +------+ |7 | |Emb 43| +-------------+ |Emb 43| |43| +------+ | | +------+ |65+---+Emb 65+---> Transformer +--->Emb 65| |23| +------+ | Layers | +------+ |4 | |Emb 23| +-------------+ |Emb 23| |1 | +------+ +------+ +--+ |Emb 4 | |Emb 4 | +------+ +------+ |Emb 1 | |Emb 1 | +------+ +------+ These are the parameters available for the embed encoder config_path : is the path to the BERT configuration JSON file. checkpoint_path (default null ): is the path to the BERT checkpoint file. bert_model.ckpt should be specified, without .index , .meta or .data* . do_lower_case (default True ): this parameter should be set according to the pretrained model to use. reduce_output (default True ): The tensor is reduced by selecting the first output vector, the one in correspondence to the [CLS] token, to obtain a single vector of size h for each element of the batch. If you want to output the full b x s x h tensor, you can specify null . In this case the first and last element of the tesnor along the s dimension will be removed, as the correspond to the special tokens and not to the word pieces in the input. A BERT tokenizer should be specified as tokenizer in preprocessing the input feature. Its parameters should include: - tokenizer: bert ( word_tokenizer: bert in case of text features) - vocab_file: <path_to_bert_vocab.txt> ( word_vocab_file: <path_to_bert_vocab.txt> in case of text features) - padding_symbol: '[PAD]' - unknown_symbol: '[UNK]' Example sequence feature entry in the output features list using a BERT encoder: name : sequence_csv_column_name type : sequence encoder : bert config_path : <path_to_bert_config.json> checkpoint_path : <path_to_bert_model.ckpt> do_lower_case : True preprocessing : tokenizer : bert vocab_file : <path_to_bert_vocab.txt> padding_symbol : '[PAD]' unknown_symbol : '[UNK]' reduce_output : True When using a BERT encoder and finetuning it we suggest using small learning rates around 0.00002 and turning on learning rate warm up for the best results. Passthrough Encoder \u00b6 The passthrough decoder simply transforms each input value into a fleat value and adds a dimension to the input tensor, creating a b x s x 1 tensor where b is the batch size and s is the length of the sequence. The tensor is reduced along the s dimension to obtain a single vector of size h for each element of the batch. If you want to output the full b x s x h tensor, you can specify reduce_output: null . This encoder is not really useful for sequence or text features, but may be useful for timeseries features, as it allows for using them without any processing in later stages of the model, like in a sequence combiner for instance. +--+ |12| |7 | +-----------+ |43| +------------+ |Aggregation| |65+--->Cast float32+--->Reduce +-> |23| +------------+ |Operation | |4 | +-----------+ |1 | +--+ These are the parameters available for the passthrough encoder reduce_output (default null ): defines how to reduce the output tensor along the s sequence length dimension if the rank of the tensor is greater than 2. Available values are: sum , mean or avg , max , concat (concatenates along the first dimension), last (returns the last vector of the first dimension) and null or None (which does not reduce and returns the full tensor). Example sequence feature entry in the output features list using an embed encoder: name : sequence_csv_column_name type : sequence encoder : passthrough reduce_output : null Sequence Output Features and Decoders \u00b6 Sequential features can be used when sequence tagging (classifying each element of an input sequence) or sequence generation needs to be performed. There are two decoders available for those to tasks names tagger and generator . These are the available parameters of a sequence output feature reduce_inputs (default sum ): defines how to reduce an input that is not a vector, but a matrix or a higher order tensor, on the first dimension 9second if you count the batch dimension). Available values are: sum , mean or avg , max , concat (concatenates along the first dimension), last (returns the last vector of the first dimension). dependencies (default [] ): the output features this one is dependent on. For a detailed explanation refer to Output Features Dependencies . reduce_dependencies (default sum ): defines how to reduce the output of a dependent feature that is not a vector, but a matrix or a higher order tensor, on the first dimension 9second if you count the batch dimension). Available values are: sum , mean or avg , max , concat (concatenates along the first dimension), last (returns the last vector of the first dimension). loss (default {type: softmax_cross_entropy, class_similarities_temperature: 0, class_weights: 1, confidence_penalty: 0, distortion: 1, labels_smoothing: 0, negative_samples: 0, robust_lambda: 0, sampler: null, unique: false} ): is a dictionary containing a loss type . The available losses type are softmax_cross_entropy and sampled_softmax_cross_entropy . For details on both losses, please refer to the category feature output feature section . Tagger Decoder \u00b6 In the case of tagger the decoder is a (potentially empty) stack of fully connected layers, followed by a projection into a tensor of size b x s x c , where b is the batch size, s is the length of the sequence and c is the number of classes, followed by a softmax_cross_entropy. This decoder requires its input to be shaped as b x s x h , where h is an hidden dimension, which is the output of a sequence, text or timeseries input feature without reduced outputs or the output of a sequence-based combiner. If a b x h input is provided instead, an error will be raised during model building. Combiner Output +---+ +----------+ +-------+ |emb| +---------+ |Projection| |Softmax| +---+ |Fully | +----------+ +-------+ |...+--->Connected+--->... +--->... | +---+ |Layers | +----------+ +-------+ |emb| +---------+ |Projection| |Softmax| +---+ +----------+ +-------+ These are the available parameters of a tagger decoder: fc_layers (default null ): it is a list of dictionaries containing the parameters of all the fully connected layers. The length of the list determines the number of stacked fully connected layers and the content of each dictionary determines the parameters for a specific layer. The available parameters for each layer are: fc_size , norm , activation , dropout , initializer and regularize . If any of those values is missing from the dictionary, the default one specified as a parameter of the decoder will be used instead. num_fc_layers (default 0): this is the number of stacked fully connected layers that the input to the feature passes through. Their output is projected in the feature's output space. fc_size (default 256 ): if a fc_size is not already specified in fc_layers this is the default fc_size that will be used for each layer. It indicates the size of the output of a fully connected layer. activation (default relu ): if an activation is not already specified in fc_layers this is the default activation that will be used for each layer. It indicates the activation function applied to the output. norm (default null ): if a norm is not already specified in fc_layers this is the default norm that will be used for each layer. It indicates the norm of the output and it can be null , batch or layer . dropout (default false ): determines if there should be a dropout layer after each layer. initializer (default null ): the initializer to use. If null , the default initialized of each variable is used ( glorot_uniform in most cases). Options are: constant , identity , zeros , ones , orthogonal , normal , uniform , truncated_normal , variance_scaling , glorot_normal , glorot_uniform , xavier_normal , xavier_uniform , he_normal , he_uniform , lecun_normal , lecun_uniform . Alternatively it is possible to specify a dictionary with a key type that identifies the type of initializer and other keys for its parameters, e.g. {type: normal, mean: 0, stddev: 0} . To know the parameters of each initializer, please refer to TensorFlow's documentation . regularize (default true ): if true the weights of the layers are added to the set of weights that get regularized by a regularization loss (if the regularization_lambda in training is greater than 0). Example sequence feature entry using a tagger decoder (with default parameters) in the output features list: name : sequence_csv_column_name type : sequence reduce_inputs : sum dependencies : [] reduce_dependencies : sum loss : type : softmax_cross_entropy confidence_penalty : 0 robust_lambda : 0 class_weights : 1 class_similarities : null class_similarities_temperature : 0 labels_smoothing : 0 negative_samples : 0 sampler : null distortion : 1 unique : false fc_layers : null num_fc_layers : 0 fc_size : 256 activation : relu norm : null dropout : false initializer : null regularize : true Generator Decoder \u00b6 In the case of generator the decoder is a (potentially empty) stack of fully connected layers, followed by an rnn that generates outputs feeding on its own previous predictions and generates a tensor of size b x s' x c , where b is the batch size, s' is the length of the generated sequence and c is the number of classes, followed by a softmax_cross_entropy. By default a generator expects a b x h shaped input tensor, where h is a hidden dimension. The h vectors are (after an optional stack of fully connected layers) fed into the rnn generator. One exception is when the generator uses attention, as in that case the expected size of the input tensor is b x s x h , which is the output of a sequence, text or timeseries input feature without reduced outputs or the output of a sequence-based combiner. If a b x h input is provided to a generator decoder using an rnn with attention instead, an error will be raised during model building. Output Output 1 +-+ ... +--+ END ^ | ^ | ^ +--------+ +---------+ | | | | | |Combiner| |Fully | +---+--+ | +---+---+ | +---+--+ |Output +--->Connected+---+RNN +--->RNN... +--->RNN | | | |Layers | +---^--+ | +---^---+ | +---^--+ +--------+ +---------+ | | | | | GO +-----+ +-----+ These are the available parameters of a tagger decoder: fc_layers (default null ): it is a list of dictionaries containing the parameters of all the fully connected layers. The length of the list determines the number of stacked fully connected layers and the content of each dictionary determines the parameters for a specific layer. The available parameters for each layer are: fc_size , norm , activation , dropout , initializer and regularize . If any of those values is missing from the dictionary, the default one specified as a parameter of the decoder will be used instead. num_fc_layers (default 0): this is the number of stacked fully connected layers that the input to the feature passes through. Their output is projected in the feature's output space. fc_size (default 256 ): if a fc_size is not already specified in fc_layers this is the default fc_size that will be used for each layer. It indicates the size of the output of a fully connected layer. activation (default relu ): if an activation is not already specified in fc_layers this is the default activation that will be used for each layer. It indicates the activation function applied to the output. norm (default null ): if a norm is not already specified in fc_layers this is the default norm that will be used for each layer. It indicates the norm of the output and it can be null , batch or layer . dropout (default false ): determines if there should be a dropout layer after each layer. initializer (default null ): the initializer to use. If null , the default initialized of each variable is used ( glorot_uniform in most cases). Options are: constant , identity , zeros , ones , orthogonal , normal , uniform , truncated_normal , variance_scaling , glorot_normal , glorot_uniform , xavier_normal , xavier_uniform , he_normal , he_uniform , lecun_normal , lecun_uniform . Alternatively it is possible to specify a dictionary with a key type that identifies the type of initializer and other keys for its parameters, e.g. {type: normal, mean: 0, stddev: 0} . To know the parameters of each initializer, please refer to TensorFlow's documentation . regularize (default true ): if true the weights of the layers are added to the set of weights that get regularized by a regularization loss (if the regularization_lambda in training is greater than 0). cell_type (default rnn ): the type of recurrent cell to use. Available values are: rnn , lstm , lstm_block , lstm , ln , lstm_cudnn , gru , gru_block , gru_cudnn . For reference about the differences between the cells please refer to TensorFlow's documentstion . We suggest to use the block variants on CPU and the cudnn variants on GPU because of their increased speed. state_size (default 256 ): the size of the state of the rnn. tied_embeddings (default null ): if null the embeddings of the targets are initialized randomly, while if the values is the name of an input feature, the embeddings of that input feature will be used as embeddings of the target. The vocabulary_size of that input feature has to be the same of the output feature one and it has to have an embedding matrix (binary and numerical features will not have one, fo instance). In this case the embedding_size will be the same as the state_size . This is useful for implementing autoencoders where the encoding and decoding part of the model share parameters. embedding_size (default 256): if tied_target_embeddings is false , the input embeddings and the weights of the softmax_cross_entropy weights before the softmax_cross_entropy are not tied together and can have different sizes, this parameter describes the size of the embeddings of the inputs of the generator. beam_width (default 1 ): sampling from the rnn generator is performed using beam search. By default, with a beam of one, only a greedy sequence using always the most probably next token is generated, but the beam size can be increased. This usually leads to better performance at the expense of more computation and slower generation. attention_mechanism (default null ): the recurrent generator may use an attention mechanism. The available ones are bahdanau and luong (for more information refer to TensorFlow's documentation ). When attention is not null the expected size of the input tensor is b x s x h , which is the output of a sequence, text or timeseries input feature without reduced outputs or the output of a sequence-based combiner. If a b x h input is provided to a generator decoder using an rnn with attention instead, an error will be raised during model building. Example sequence feature entry using a tagger decoder (with default parameters) in the output features list: name : sequence_csv_column_name type : sequence reduce_inputs : sum dependencies : [] reduce_dependencies : sum loss : type : softmax_cross_entropy confidence_penalty : 0 robust_lambda : 0 class_weights : 1 class_similarities : null class_similarities_temperature : 0 labels_smoothing : 0 negative_samples : 0 sampler : null distortion : 1 unique : false fc_layers : null num_fc_layers : 0 fc_size : 256 activation : relu norm : null dropout : false initializer : null regularize : true cell_type : rnn state_size : 256 tied_target_embeddings : true embedding_size : 256 beam_width : 1 attention_mechanism : null Sequence Features Measures \u00b6 The measures that are calculated every epoch and are available for category features are accuracy (counts the number of datapoints where all the elements of the predicted sequence are correct over the number of all datapoints), token_accuracy (computes the number of elements in all the sequences that are correctly predicted over the number of all the elements in all the sequences), last_accuracy (accuracy considering only the last element of the sequence, it is useful for being sure special end-of-sequence tokens are generated or tagged), edit_distance (the levenshtein distance between the predicted and ground truth sequence), perplexity (the perplexity of the ground truth sequence according to the model) and the loss itself. You can set either of them as validation_measure in the training section of the model definition if you set the validation_field to be the name of a sequence feature. Text Features \u00b6 Text Features Preprocessing \u00b6 Text features are treated in the same way of sequence features, with a couple differences. Two different formattings/splittings happen, one that splits at every character and one that uses a spaCy based tokenizer (and removes stopwords) are used, and two different key are added to the HDF5 file, one containing the matrix of characters and one containing the matrix of words. The same thing happens in the JSON file, where there are dictionaries for mapping characters to integers (and the inverse) and words to integers (and their inverse). In the model definition you are able to specify which level of representation to use, if the character level or the word level. The parameters available for preprocessing are: missing_value_strategy (default fill_with_const ): what strategy to follow when there's a missing value in a binary column. The value should be one of fill_with_const (replaces the missing value with a specific value specified with the fill_value parameter), fill_with_mode (replaces the missing values with the most frequent value in the column), fill_with_mean (replaces the missing values with the mean of the values in the column), backfill (replaces the missing values with the next valid value). fill_value (default \"\" ): the value to replace the missing values with in case the missing_value_strategy is fill-value . padding (default right ): the direction of the padding. right and left are available options. padding_symbol (default <PAD> ): the string used as a padding symbol. Is is mapped to the integer ID 0 in the vocabulary. unknown_symbol (default <UNK> ): the string used as a unknown symbol. Is is mapped to the integer ID 1 in the vocabulary. lowercase (default false ): if the string has to be lowercased before being handled by the formatter. word_sequence_length_limit (default 256 ): the maximum length of the text in words. Texts that are longer than this value will be truncated, while texts that are shorter will be padded. word_tokenizer (default space_punct ): defines how to map from the raw string content of the CSV column to a sequence of words. The default value space_punct splits the string using a regular expression that separates also punctuation. Other options are: space (splits on space), underscore (splits on underscore), comma (splits on comma), json (decodes the string into a set or a list through a JSON parser), and a set of format functions that rely on spaCy . word_most_common (default 20000 ): the maximum number of most common words to be considered. If the data contains more than this amount, the most infrequent words will be treated as unknown. char_sequence_length_limit (default 1024 ): the maximum length of the text in characters. Texts that are longer than this value will be truncated, while sequences that are shorter will be padded. char_tokenizer (default characters ): defines how to map from the raw string content of the CSV column to a sequence of characters. The default value and only available option is characters and the behavior is to split the string at each character. char_most_common (default 70 ): the maximum number of most common characters to be considered. if the data contains more than this amount, the most infrequent characters will be treated as unknown. spaCy based word format options \u00b6 The spaCy based tokenizer options are functions that use the powerful tokenization and NLP preprocessing models provided the library. Several languages are available: English (code en ), Italian (code it ), Spanish (code es ), German (code de ), French (code fr ), Portuguese (code pt ), Dutch (code nl ), Greek (code el ) and Multi (code xx , useful in case you have a dataset of different languages). For each language different functions are available: - tokenize : uses spaCy tokenizer, - tokenize_filter : uses spaCy tokenizer and filters out punctuation, numbers, stopwords and words shorter than 3 characters, - tokenize_remove_stopwords : uses spaCy tokenizer and filters out stopwords, - lemmatize : uses spaCy lemmatizer, - lemmatize_filter : uses spaCy lemmatizer and filters out punctuation, numbers, stopwords and words shorter than 3 characters, - lemmatize_remove_stopwords : uses spaCy lemmatize and filters out stopwords. In order to use these options, you have to download the the spaCy model: python -m spacy download <language_code> and provide <language>_<function> as tokenizer like: english_tokenizer , italian_lemmatize_filter , multi_tokenize_filter and so on. More details on the models can be found in the spaCy documentation . Text Input Features and Encoders \u00b6 The encoders are the same used for the Sequence Features . The only difference is that you can specify an additional level parameter with possible values word or char to force to use the text words or characters as inputs (by default the encoder will use word ). Text Output Features and Decoders \u00b6 The decoders are the same used for the Sequence Features . The only difference is that you can specify an additional level parameter with possible values word or char to force to use the text words or characters as inputs (by default the encoder will use word ). Text Features Measures \u00b6 The measures are the same used for the Sequence Features . Time Series Features \u00b6 Time Series Features Preprocessing \u00b6 Timeseries features are treated in the same way of sequence features, with the only difference being that the matrix in the HDF5 file does not have integer values, but float values. Moreover, there is no need for any mapping in the JSON file. Time Series Input Features and Encoders \u00b6 The encoders are the same used for the Sequence Features . The only difference is that time series features don't have an embedding layer at the beginning, so the b x s placeholders (where b is the batch size and s is the sequence length) are directly mapped to a b x s x 1 tensor and then passed to the different sequential encoders. Time Series Output Features and Decoders \u00b6 There are no time series decoders at the moment (WIP), so time series cannot be used as output features. Time Series Features Measures \u00b6 As no time series decoders are available at the moment, there are also no time series measures. Audio Features \u00b6 Audio Features Preprocessing \u00b6 Ludwig supports reads in audio files using Python's library SoundFile therefore supporting WAV, FLAC, OGG and MAT files. in_memory (default true ): defines whether image dataset will reside in memory during the training process or will be dynamically fetched from disk (useful for large datasets). In the latter case a training batch of input images will be fetched from disk each training iteration. At the moment only in_memory = true is supported. audio_file_length_limit_in_s : (default 5.0) float value that defines the maximum limit of the audio file in seconds. All files longer than this limit are cut off. All files shorter than this limit are padded with padding_value padding_value : (default 0): float value that is used for padding. norm : (default null ) the normalization method that can be used for the input data. Supported methods: null (data is not normalized), per_file (z-norm is applied on a \u201cper file\u201d level) audio_feature : (default { type: raw } ) dictionary that takes as input the audio feature type as well as additional parameters if type != raw . The following parameters can/should be defined in the dictionary: type (default raw ): defines the type of audio features to be used. Supported types at the moment are raw , stft , stft_phase , group_delay . For more detail, check Audio Input Features and Encoders . window_length_in_s : defines the window length used for the short time Fourier transformation (only needed if type != raw ). window_shift_in_s : defines the window shift used for the short time Fourier transformation (also called hop_length) (only needed if type != raw ). num_fft_points : (default window_length_in_s * sample_rate of audio file) defines the number of fft points used for the short time Fourier transformation. If num_fft_points > window_length_in_s * sample_rate , then the signal is zero-padded at the end. num_fft_points has to be >= window_length_in_s * sample_rate (only needed if type != raw ). window_type : (default hamming ): defines the type window the signal is weighted before the short time Fourier transformation. All windows provided by scipy\u2019s window function can be used (only needed if type != raw ). Example of a preprocessing specification (assuming the audio files have a sample rate of 16000): name : audio_path type : audio preprocessing : audio_file_length_limit_in_s : 7.5 audio_feature : type : stft window_length_in_s : 0.04 window_shift_in_s : 0.02 num_fft_points : 800 window_type : boxcar Audio Input Features and Encoders \u00b6 Audio files are transformed into one of the following types according to type in audio_feature in preprocessing . raw : audio file is transformed into a float valued tensor of size N x L x W (where N is the size of the dataset and L corresponds to audio_file_length_limit_in_s * sample_rate and W = 1 ). stft : audio is transformed to the stft magnitude. Audio file is transformed into a float valued tensor of size N x L x W (where N is the size of the dataset, L corresponds to ceil(audio_file_length_limit_in_s * sample_rate - window_length_in_s * sample_rate + 1/ window_shift_in_s * sample_rate) + 1 and W corresponds to audio_file_length_limit_in_s * sample_rate / 2 ). stft_phase : the phase information for each stft bin is appended to the stft magnitude so that the audio file is transformed into a float valued tensor of size N x L x 2W with N,L,W being equal to the ones in stft . group_delay : audio is transformed to group delay features according to Equation (23) in this paper . Group_delay features has the same tensor size as stft . The encoders are the same used for the Sequence Features . The only difference is that time series features don't have an embedding layer at the beginning, so the b x s placeholders (where b is the batch size and s is the sequence length) are directly mapped to a b x s x w (where w is W as described above) tensor and then passed to the different sequential encoders. Audio Output Features and Decoders \u00b6 There are no audio decoders at the moment (WIP), so audio cannot be used as output features. Audio Features Measures \u00b6 As no audio decoders are available at the moment, there are also no audio measures. Image Features \u00b6 Image Features Preprocessing \u00b6 Ludwig supports both grayscale and color images. The number of channels is inferred, but make sure all your images have the same number of channels. During preprocessing, raw image files are transformed into numpy ndarrays and saved in the hdf5 format. All images in the dataset should have the same size. If they have different sizes, a resize_method , together with a target width and height , must be specified in the feature preprocessing parameters. in_memory (default true ): defines whether image dataset will reside in memory during the training process or will be dynamically fetched from disk (useful for large datasets). In the latter case a training batch of input images will be fetched from disk each training iteration. resize_method (default crop_or_pad ): available options: crop_or_pad - crops images larger than the specified width and height to the desired size or pads smalled images using edge padding; interpolate - uses interpolation to resize images to the specified width and height . height (default null ): image height in pixels, must be set if resizing is required width (default null ): image width in pixels, must be set if resizing is required num_channels (default null ): number of channels in the images. By default, if the value is null , the number of channels of the first image of the dataset will be used and if there is an image in the dataset with a different number of channels, an error will be reported. If the value specified is not null , images in the dataset will be adapted to the specified size. If the value is 1 , all images with more then one channel will be greyscaled and reduced to one channel (trasparecy will be lost). If the value is 3 all images with 1 channel will be repeated 3 times to obtain 3 channels, while images with 4 channels will lose the transparecy channel. If the value is 4 , all the images with less than 4 channels will have the remaining channels filled with zeros. scaling (default pixel_normalization ): what scaling to perform on images. By default pixel_normalization is performed, which consists in dividing each pixel values by 255, but pixel_standardization is also available, whic uses TensorFlow's per image standardization . Depending on the application, it is preferrable not to exceed a size of 256 x 256 , as bigger sizes will, in most cases, not provide much advantage in terms of performance, while they will considerably slow down training and inference and also make both forward and backward passes consume considerably more memory, leading to memory overflows on machines with limited amounts of RAM or on GPUs with limited amounts of VRAM. Example of a preprocessing specification: name : image_feature_name type : image preprocessing : height : 128 width : 128 resize_method : interpolate scaling : pixel_normalization Image Input Features and Encoders \u00b6 Input image features are transformed into a float valued tensors of size N x H x W x C (where N is the size of the dataset and H x W is a specific resizing of the image that can be set, and C is the number of channels) and added to HDF5 with a key that reflects the name of column in the CSV. The column name is added to the JSON file, with an associated dictionary containing preprocessing information about the sizes of the resizing. Currently there are two encoders supported for images: Convolutional Stack Encoder and ResNet encoder which can be set by setting encoder parameter to stacked_cnn or resnet in the input feature dictionary in the model definition ( stacked_cnn is the default one). Convolutional Stack Encoder \u00b6 Convolutional Stack Encoder takes the following optional parameters: conv_layers (default null ): it is a list of dictionaries containing the parameters of all the convolutional layers. The length of the list determines the number of stacked convolutional layers and the content of each dictionary determines the parameters for a specific layer. The available parameters for each layer are: filter_size , num_filters , pool_size , norm , activation and regularize . If any of those values is missing from the dictionary, the default one specified as a parameter of the encoder will be used instead. If both conv_layers and num_conv_layers are null , a default list will be assigned to conv_layers with the value [{filter_size: 7, pool_size: 3, regularize: false}, {filter_size: 7, pool_size: 3, regularize: false}, {filter_size: 3, pool_size: null, regularize: false}, {filter_size: 3, pool_size: null, regularize: false}, {filter_size: 3, pool_size: null, regularize: true}, {filter_size: 3, pool_size: 3, regularize: true}] . num_conv_layers (default null ): if conv_layers is null , this is the number of stacked convolutional layers. filter_size (default 3 ): if a filter_size is not already specified in conv_layers this is the default filter_size that will be used for each layer. It indicates how wide is the 1d convolutional filter. num_filters (default 256 ): if a num_filters is not already specified in conv_layers this is the default num_filters that will be used for each layer. It indicates the number of filters, and by consequence the output channels of the 2d convolution. pool_stride (default 1 ): if a pool_stride is not already specified in conv_layers this is the default pool_stride that will be used for each layer. fc_layers (default null ): it is a list of dictionaries containing the parameters of all the fully connected layers. The length of the list determines the number of stacked fully connected layers and the content of each dictionary determines the parameters for a specific layer. The available parameters for each layer are: fc_size , norm , activation and regularize . If any of those values is missing from the dictionary, the default one specified as a parameter of the encoder will be used instead. If both fc_layers and num_fc_layers are null , a default list will be assigned to fc_layers with the value [{fc_size: 512}, {fc_size: 256}] . (only applies if reduce_output is not null ). num_fc_layers (default 1 ): This is the number of stacked fully connected layers. fc_size (default 256 ): if a fc_size is not already specified in fc_layers this is the default fc_size that will be used for each layer. It indicates the size of the output of a fully connected layer. norm (default null ): if a norm is not already specified in fc_layers or conv_layers this is the default norm that will be used for each layer. It indicates the norm of the output and it can be null , batch or layer . activation (default relu ): if an activation is not already specified in fc_layers or conv_layers this is the default activation that will be used for each layer. It indicates the activation function applied to the output. dropout (default false ): determines if there should be a dropout layer after each layer. initializer (default null ): the initializer to use. If null , the default initialized of each variable is used ( glorot_uniform in most cases). Options are: constant , identity , zeros , ones , orthogonal , normal , uniform , truncated_normal , variance_scaling , glorot_normal , glorot_uniform , xavier_normal , xavier_uniform , he_normal , he_uniform , lecun_normal , lecun_uniform . Alternatively it is possible to specify a dictionary with a key type that identifies the type of initializer and other keys for its parameters, e.g. {type: normal, mean: 0, stddev: 0} . To know the parameters of each initializer, please refer to TensorFlow's documentation . regularize (default true ): if true the weights of the layers are added to the set of weights that get regularized by a regularization loss (if the regularization_lambda in training is greater than 0). Example image feature entry using a convolutional stack encoder (with default parameters) in the input features list: name : image_csv_column_name type : image encoder : stacked_cnn tied_weights : null conv_layers : null num_conv_layers : null filter_size : 3 num_filters : 256 pool_size : null fc_layers : null num_fc_layers : 1 fc_size : 256 activation : relu norm : null dropout : false initializer : null regularize : true preprocessing : # example pre-processing - height : 28 width : 28 num_channels : 1 ResNet Encoder \u00b6 ResNet Encoder takes the following optional parameters: resnet_size (default 50 ): A single integer for the size of the ResNet model. If has to be one of the following values: 8 , 14 , 18 , 34 , 50 , 101 , 152 , 200 . num_filters (default 16 ): It indicates the number of filters, and by consequence the output channels of the 2d convolution. kernel_size (default 3 ): The kernel size to use for convolution. conv_stride (default 1 ): Stride size for the initial convolutional layer. first_pool_size (default null ): Pool size to be used for the first pooling layer. If none, the first pooling layer is skipped. batch_norm_momentum (default 0.9 ): Momentum of the batch norm running statistics. The suggested parameter in TensorFlow's implementation is 0.997 , but that leads to a big discrepancy between the normalization at training time and test time, so the default value is a more conservative 0.9 . batch_norm_epsilon (default 0.001 ): Epsilon of the batch norm. The suggested parameter in TensorFlow's implementation is 1e-5 , but that leads to a big discrepancy between the normalization at training time and test time, so the default value is a more conservative 0.001 . fc_layers (default null ): it is a list of dictionaries containing the parameters of all the fully connected layers. The length of the list determines the number of stacked fully connected layers and the content of each dictionary determines the parameters for a specific layer. The available parameters for each layer are: fc_size , norm , activation and regularize . If any of those values is missing from the dictionary, the default one specified as a parameter of the encoder will be used instead. If both fc_layers and num_fc_layers are null , a default list will be assigned to fc_layers with the value [{fc_size: 512}, {fc_size: 256}] . (only applies if reduce_output is not null ). num_fc_layers (default 1 ): This is the number of stacked fully connected layers. fc_size (default 256 ): if a fc_size is not already specified in fc_layers this is the default fc_size that will be used for each layer. It indicates the size of the output of a fully connected layer. norm (default null ): if a norm is not already specified in fc_layers this is the default norm that will be used for each fully connected layer. It indicates the norm of the output and it can be null , batch or layer . activation (default relu ): if an activation is not already specified in fc_layers this is the default activation that will be used for each fully connected layer. It indicates the activation function applied to the output. dropout (default false ): determines if there should be a dropout layer after each fully connected layer. initializer (default null ): the initializer to use in the fully connected layers. If null , the default initialized of each variable is used ( glorot_uniform in most cases). Options are: constant , identity , zeros , ones , orthogonal , normal , uniform , truncated_normal , variance_scaling , glorot_normal , glorot_uniform , xavier_normal , xavier_uniform , he_normal , he_uniform , lecun_normal , lecun_uniform . Alternatively it is possible to specify a dictionary with a key type that identifies the type of initializer and other keys for its parameters, e.g. {type: normal, mean: 0, stddev: 0} . To know the parameters of each initializer, please refer to TensorFlow's documentation . regularize (default true ): if true the weights of the layers are added to the set of weights that get regularized by a regularization loss (if the regularization_lambda in training is greater than 0). Example image feature entry using a ResNet encoder (with default parameters) in the input features list: name : image_csv_column_name type : image encoder : stacked_cnn tied_weights : null resnet_size : 50 num_filters : 16 kernel_size : 3 conv_stride : 1 first_pool_size : null batch_norm_momentum : 0.9 batch_norm_epsilon : 0.001 fc_layers : null num_fc_layers : 1 fc_size : 256 activation : relu norm : null dropout : false initializer : null regularize : true preprocessing : # example pre-processing - height : 224 width : 224 num_channels : 3 Image Output Features and Decoders \u00b6 There are no image decoders at the moment (WIP), so image cannot be used as output features. Image Features Measures \u00b6 As no image decoders are available at the moment, there are also no image measures. Image Features \u00b6 Image Features Preprocessing \u00b6 Ludwig supports both grayscale and color images. The number of channels is inferred, but make sure all your images have the same number of channels. During preprocessing, raw image files are transformed into numpy ndarrays and saved in the hdf5 format. All images in the dataset should have the same size. If they have different sizes, a resize_method , together with a target width and height , must be specified in the feature preprocessing parameters. in_memory (default true ): defines whether image dataset will reside in memory during the training process or will be dynamically fetched from disk (useful for large datasets). In the latter case a training batch of input images will be fetched from disk each training iteration. resize_method (default crop_or_pad ): available options: crop_or_pad - crops images larger than the specified width and height to the desired size or pads smalled images using edge padding; interpolate - uses interpolation to resize images to the specified width and height . height (default null ): image height in pixels, must be set if resizing is required width (default null ): image width in pixels, must be set if resizing is required num_channels (default null ): number of channels in the images. By default, if the value is null , the number of channels of the first image of the dataset will be used and if there is an image in the dataset with a different number of channels, an error will be reported. If the value specified is not null , images in the dataset will be adapted to the specified size. If the value is 1 , all images with more then one channel will be greyscaled and reduced to one channel (trasparecy will be lost). If the value is 3 all images with 1 channel will be repeated 3 times to obtain 3 channels, while images with 4 channels will lose the transparecy channel. If the value is 4 , all the images with less than 4 channels will have the remaining channels filled with zeros. scaling (default pixel_normalization ): what scaling to perform on images. By default pixel_normalization is performed, which consists in dividing each pixel values by 255, but pixel_standardization is also available, whic uses TensorFlow's per image standardization . Depending on the application, it is preferrable not to exceed a size of 256 x 256 , as bigger sizes will, in most cases, not provide much advantage in terms of performance, while they will considerably slow down training and inference and also make both forward and backward passes consume considerably more memory, leading to memory overflows on machines with limited amounts of RAM or on GPUs with limited amounts of VRAM. Example of a preprocessing specification: name : image_feature_name type : image preprocessing : height : 128 width : 128 resize_method : interpolate scaling : pixel_normalization Image Input Features and Encoders \u00b6 Input image features are transformed into a float valued tensors of size N x H x W x C (where N is the size of the dataset and H x W is a specific resizing of the image that can be set, and C is the number of channels) and added to HDF5 with a key that reflects the name of column in the CSV. The column name is added to the JSON file, with an associated dictionary containing preprocessing information about the sizes of the resizing. Currently there are two encoders supported for images: Convolutional Stack Encoder and ResNet encoder which can be set by setting encoder parameter to stacked_cnn or resnet in the input feature dictionary in the model definition ( stacked_cnn is the default one). Convolutional Stack Encoder \u00b6 Convolutional Stack Encoder takes the following optional parameters: conv_layers (default null ): it is a list of dictionaries containing the parameters of all the convolutional layers. The length of the list determines the number of stacked convolutional layers and the content of each dictionary determines the parameters for a specific layer. The available parameters for each layer are: filter_size , num_filters , pool_size , norm , activation and regularize . If any of those values is missing from the dictionary, the default one specified as a parameter of the encoder will be used instead. If both conv_layers and num_conv_layers are null , a default list will be assigned to conv_layers with the value [{filter_size: 7, pool_size: 3, regularize: false}, {filter_size: 7, pool_size: 3, regularize: false}, {filter_size: 3, pool_size: null, regularize: false}, {filter_size: 3, pool_size: null, regularize: false}, {filter_size: 3, pool_size: null, regularize: true}, {filter_size: 3, pool_size: 3, regularize: true}] . num_conv_layers (default null ): if conv_layers is null , this is the number of stacked convolutional layers. filter_size (default 3 ): if a filter_size is not already specified in conv_layers this is the default filter_size that will be used for each layer. It indicates how wide is the 1d convolutional filter. num_filters (default 256 ): if a num_filters is not already specified in conv_layers this is the default num_filters that will be used for each layer. It indicates the number of filters, and by consequence the output channels of the 2d convolution. pool_stride (default 1 ): if a pool_stride is not already specified in conv_layers this is the default pool_stride that will be used for each layer. fc_layers (default null ): it is a list of dictionaries containing the parameters of all the fully connected layers. The length of the list determines the number of stacked fully connected layers and the content of each dictionary determines the parameters for a specific layer. The available parameters for each layer are: fc_size , norm , activation and regularize . If any of those values is missing from the dictionary, the default one specified as a parameter of the encoder will be used instead. If both fc_layers and num_fc_layers are null , a default list will be assigned to fc_layers with the value [{fc_size: 512}, {fc_size: 256}] . (only applies if reduce_output is not null ). num_fc_layers (default 1 ): This is the number of stacked fully connected layers. fc_size (default 256 ): if a fc_size is not already specified in fc_layers this is the default fc_size that will be used for each layer. It indicates the size of the output of a fully connected layer. norm (default null ): if a norm is not already specified in fc_layers or conv_layers this is the default norm that will be used for each layer. It indicates the norm of the output and it can be null , batch or layer . activation (default relu ): if an activation is not already specified in fc_layers or conv_layers this is the default activation that will be used for each layer. It indicates the activation function applied to the output. dropout (default false ): determines if there should be a dropout layer after each layer. initializer (default null ): the initializer to use. If null , the default initialized of each variable is used ( glorot_uniform in most cases). Options are: constant , identity , zeros , ones , orthogonal , normal , uniform , truncated_normal , variance_scaling , glorot_normal , glorot_uniform , xavier_normal , xavier_uniform , he_normal , he_uniform , lecun_normal , lecun_uniform . Alternatively it is possible to specify a dictionary with a key type that identifies the type of initializer and other keys for its parameters, e.g. {type: normal, mean: 0, stddev: 0} . To know the parameters of each initializer, please refer to TensorFlow's documentation . regularize (default true ): if true the weights of the layers are added to the set of weights that get regularized by a regularization loss (if the regularization_lambda in training is greater than 0). ResNet Encoder \u00b6 ResNet Encoder takes the following optional parameters: resnet_size (default 50 ): A single integer for the size of the ResNet model. If has to be one of the following values: 8 , 14 , 18 , 34 , 50 , 101 , 152 , 200 . num_filters (default 16 ): It indicates the number of filters, and by consequence the output channels of the 2d convolution. kernel_size (default 3 ): The kernel size to use for convolution. conv_stride (default 1 ): Stride size for the initial convolutional layer. first_pool_size (default null ): Pool size to be used for the first pooling layer. If none, the first pooling layer is skipped. batch_norm_momentum (default 0.9 ): Momentum of the batch norm running statistics. The suggested parameter in TensorFlow's implementation is 0.997 , but that leads to a big discrepancy between the normalization at training time and test time, so the default value is a more conservative 0.9 . batch_norm_epsilon (default 0.001 ): Epsilon of the batch norm. The suggested parameter in TensorFlow's implementation is 1e-5 , but that leads to a big discrepancy between the normalization at training time and test time, so the default value is a more conservative 0.001 . fc_layers (default null ): it is a list of dictionaries containing the parameters of all the fully connected layers. The length of the list determines the number of stacked fully connected layers and the content of each dictionary determines the parameters for a specific layer. The available parameters for each layer are: fc_size , norm , activation and regularize . If any of those values is missing from the dictionary, the default one specified as a parameter of the encoder will be used instead. If both fc_layers and num_fc_layers are null , a default list will be assigned to fc_layers with the value [{fc_size: 512}, {fc_size: 256}] . (only applies if reduce_output is not null ). num_fc_layers (default 1 ): This is the number of stacked fully connected layers. fc_size (default 256 ): if a fc_size is not already specified in fc_layers this is the default fc_size that will be used for each layer. It indicates the size of the output of a fully connected layer. norm (default null ): if a norm is not already specified in fc_layers or conv_layers this is the default norm that will be used for each layer. It indicates the norm of the output and it can be null , batch or layer . activation (default relu ): if an activation is not already specified in fc_layers or conv_layers this is the default activation that will be used for each layer. It indicates the activation function applied to the output. dropout (default false ): determines if there should be a dropout layer after each layer. initializer (default null ): the initializer to use. If null , the default initialized of each variable is used ( glorot_uniform in most cases). Options are: constant , identity , zeros , ones , orthogonal , normal , uniform , truncated_normal , variance_scaling , glorot_normal , glorot_uniform , xavier_normal , xavier_uniform , he_normal , he_uniform , lecun_normal , lecun_uniform . Alternatively it is possible to specify a dictionary with a key type that identifies the type of initializer and other keys for its parameters, e.g. {type: normal, mean: 0, stddev: 0} . To know the parameters of each initializer, please refer to TensorFlow's documentation . regularize (default true ): if true the weights of the layers are added to the set of weights that get regularized by a regularization loss (if the regularization_lambda in training is greater than 0). Image Output Features and Decoders \u00b6 There are no image decoders at the moment (WIP), so image cannot be used as output features. Image Features Measures \u00b6 As no image decoders are available at the moment, there are also no image measures. Date Features \u00b6 Date Features Preprocessing \u00b6 Ludwig will try to infer the date format automatically, but a specific fomrat can be provided. The format is the same one described in the datetime package documentation . missing_value_strategy (default fill_with_const ): what strategy to follow when there's a missing value in a binary column. The value should be one of fill_with_const (replaces the missing value with a specific value specified with the fill_value parameter), fill_with_mode (replaces the missing values with the most frequent value in the column), fill_with_mean (replaces the missing values with the mean of the values in the column), backfill (replaces the missing values with the next valid value). fill_value (default \"\" ): the value to replace the missing values with in case the missing_value_strategy is fill_value . This can be a datetime string, if left empty the current datetime will be used. datetime_format (default null ): this parameter can be either null , which implies the datetime format is inferred automaticall, or a datetime format string. Example of a preprocessing specification: name : date_feature_name type : date preprocessing : missing_value_strategy : fill_with_const fill_value : '' datetime_format : \"%d %b %Y\" Date Input Features and Encoders \u00b6 Input image features are transformed into a int valued tensors of size N x 8 (where N is the size of the dataset and the 8 dimensions contain year, month, day, weekday, yearday, hour, minute and second) and added to HDF5 with a key that reflects the name of column in the CSV. Currently there are two encoders supported for images: Convolutional Stack Encoder and ResNet encoder which can be set by setting encoder parameter to stacked_cnn or resnet in the input feature dictionary in the model definition ( stacked_cnn is the default one). Embed Encoder \u00b6 This encoder passes the year through a fully connected layer of one neuron and embeds all other elements for the date, concatenates them and passes the concatenated representation through fully connected layers. It takes the following optional parameters: embedding_size (default 10 ): it is the maximum embedding size adopted.. embeddings_on_cpu (default false ): by default embeddings matrices are stored on GPU memory if a GPU is used, as it allows for faster access, but in some cases the embedding matrix may be really big and this parameter forces the placement of the embedding matrix in regular memory and the CPU is used to resolve them, slightly slowing down the process as a result of data transfer between CPU and GPU memory. dropout (default false ): determines if there should be a dropout layer before returning the encoder output. fc_layers (default null ): it is a list of dictionaries containing the parameters of all the fully connected layers. The length of the list determines the number of stacked fully connected layers and the content of each dictionary determines the parameters for a specific layer. The available parameters for each layer are: fc_size , norm , activation and regularize . If any of those values is missing from the dictionary, the default one specified as a parameter of the encoder will be used instead. If both fc_layers and num_fc_layers are null , a default list will be assigned to fc_layers with the value [{fc_size: 512}, {fc_size: 256}] . (only applies if reduce_output is not null ). num_fc_layers (default 0 ): This is the number of stacked fully connected layers. fc_size (default 10 ): if a fc_size is not already specified in fc_layers this is the default fc_size that will be used for each layer. It indicates the size of the output of a fully connected layer. norm (default null ): if a norm is not already specified in fc_layers or conv_layers this is the default norm that will be used for each layer. It indicates the norm of the output and it can be null , batch or layer . activation (default relu ): if an activation is not already specified in fc_layers or conv_layers this is the default activation that will be used for each layer. It indicates the activation function applied to the output. initializer (default null ): the initializer to use. If null , the default initialized of each variable is used ( glorot_uniform in most cases). Options are: constant , identity , zeros , ones , orthogonal , normal , uniform , truncated_normal , variance_scaling , glorot_normal , glorot_uniform , xavier_normal , xavier_uniform , he_normal , he_uniform , lecun_normal , lecun_uniform . Alternatively it is possible to specify a dictionary with a key type that identifies the type of initializer and other keys for its parameters, e.g. {type: normal, mean: 0, stddev: 0} . To know the parameters of each initializer, please refer to TensorFlow's documentation . regularize (default true ): if true the embedding weights are added to the set of weights that get regularized by a regularization loss (if the regularization_lambda in training is greater than 0). Example date feature entry in the output features list using an embed encoder: name : date_csv_column_name type : date encoder : embed embedding_size : 10 embeddings_on_cpu : false dropout : false fc_layers : null num_fc_layers : 0 fc_size : 10 norm : null activation : relu initializer : null regularize : true reduce_output : last Wave Encoder \u00b6 This encoder passes the year through a fully connected layer of one neuron and represents all other elements for the date by taking the sine of their value with a different period (12 for months, 31 for days, etc.), concatenates them and passes the concatenated representation through fully connected layers. It takes the following optional parameters: fc_layers (default null ): it is a list of dictionaries containing the parameters of all the fully connected layers. The length of the list determines the number of stacked fully connected layers and the content of each dictionary determines the parameters for a specific layer. The available parameters for each layer are: fc_size , norm , activation and regularize . If any of those values is missing from the dictionary, the default one specified as a parameter of the encoder will be used instead. If both fc_layers and num_fc_layers are null , a default list will be assigned to fc_layers with the value [{fc_size: 512}, {fc_size: 256}] . (only applies if reduce_output is not null ). num_fc_layers (default 0 ): This is the number of stacked fully connected layers. fc_size (default 10 ): if a fc_size is not already specified in fc_layers this is the default fc_size that will be used for each layer. It indicates the size of the output of a fully connected layer. norm (default null ): if a norm is not already specified in fc_layers or conv_layers this is the default norm that will be used for each layer. It indicates the norm of the output and it can be null , batch or layer . activation (default relu ): if an activation is not already specified in fc_layers or conv_layers this is the default activation that will be used for each layer. It indicates the activation function applied to the output. dropout (default false ): determines if there should be a dropout layer before returning the encoder output. initializer (default null ): the initializer to use. If null , the default initialized of each variable is used ( glorot_uniform in most cases). Options are: constant , identity , zeros , ones , orthogonal , normal , uniform , truncated_normal , variance_scaling , glorot_normal , glorot_uniform , xavier_normal , xavier_uniform , he_normal , he_uniform , lecun_normal , lecun_uniform . Alternatively it is possible to specify a dictionary with a key type that identifies the type of initializer and other keys for its parameters, e.g. {type: normal, mean: 0, stddev: 0} . To know the parameters of each initializer, please refer to TensorFlow's documentation . regularize (default true ): if true the embedding weights are added to the set of weights that get regularized by a regularization loss (if the regularization_lambda in training is greater than 0). Example date feature entry in the output features list using a wave encoder: name : date_csv_column_name type : date encoder : wave fc_layers : null num_fc_layers : 0 fc_size : 10 norm : null activation : relu dropout : false initializer : null regularize : true reduce_output : last Date Output Features and Decoders \u00b6 There are no date decoders at the moment (WIP), so date cannot be used as output features. Date Features Measures \u00b6 As no date decoders are available at the moment, there are also no date measures. Combiners \u00b6 Combiners are the part of the model that take the outputs of the encoders of all input features and combine them before providing the combined representation to the different output decoders. If you don't specify a combiner, the concat combiner will be used. Concat Combiner \u00b6 The concat combiner assumes all outputs from encoders are tensors of size b x h where b is the batch size and h is the hidden dimension, which can be different for each input. It concatenates along the h dimension, and then (optionally) passes the concatenated tensor through a stack of fully connected layers. It returns the final b x h' tensor where h' is the size of the last fully connected layer or the sum of the sizes of the h of all inputs in the case there are no fully connected layers. If there's only one input feature and no fully connected layers are specified, the output of the input feature is just passed through as output. +-----------+ |Input | |Feature 1 +-+ +-----------+ | +---------+ +-----------+ | +------+ |Fully | |... +--->Concat+--->Connected+-> +-----------+ | +------+ |Layers | +-----------+ | +---------+ |Input +-+ |Feature N | +-----------+ These are the available parameters of a concat combiner fc_layers (default null ): it is a list of dictionaries containing the parameters of all the fully connected layers. The length of the list determines the number of stacked fully connected layers and the content of each dictionary determines the parameters for a specific layer. The available parameters for each layer are: fc_size , norm , activation , dropout , initializer and regularize . If any of those values is missing from the dictionary, the default one specified as a parameter of the decoder will be used instead. num_fc_layers (default 0): this is the number of stacked fully connected layers that the input to the feature passes through. Their output is projected in the feature's output space. fc_size (default 256 ): if a fc_size is not already specified in fc_layers this is the default fc_size that will be used for each layer. It indicates the size of the output of a fully connected layer. activation (default relu ): if an activation is not already specified in fc_layers this is the default activation that will be used for each layer. It indicates the activation function applied to the output. norm (default null ): if a norm is not already specified in fc_layers this is the default norm that will be used for each layer. It indicates the norm of the output and it can be null , batch or layer . dropout (default false ): determines if there should be a dropout layer after each layer. initializer (default null ): the initializer to use. If null , the default initialized of each variable is used ( glorot_uniform in most cases). Options are: constant , identity , zeros , ones , orthogonal , normal , uniform , truncated_normal , variance_scaling , glorot_normal , glorot_uniform , xavier_normal , xavier_uniform , he_normal , he_uniform , lecun_normal , lecun_uniform . Alternatively it is possible to specify a dictionary with a key type that identifies the type of initializer and other keys for its parameters, e.g. {type: normal, mean: 0, stddev: 0} . To know the parameters of each initializer, please refer to TensorFlow's documentation . regularize (default true ): if true the weights of the layers are added to the set of weights that get regularized by a regularization loss (if the regularization_lambda in training is greater than 0). Example concat combiner in the model definition: type : concat fc_layers : null num_fc_layers : 0 fc_size : 256 activation : relu norm : null dropout : false initializer : null regularize : true Sequence Concat Combiner \u00b6 The sequence concat combiner assumes at least one output from encoders is a tensors of size b x s x h where b is the batch size, s is the length of the sequence and h is the hidden dimension. The sequence / text / sequential input can be specified with the main_sequence_feature parameter that should have the name of the sequential feature as value. If no main_sequence_feature is specified, the combiner will look through all the features in the order they are defined in the model definition and will look for a feature with a rank 3 tensor output (sequence, text or time series). If it cannot find one it will raise an exception, otherwise the output of that feature will be used for concatenating the other features along the sequence s dimension. If there are other input features with a rank 3 output tensor, the combiner will concatenate them alongside the s dimension, which means that all of them must have identical s dimension, otherwise an error will be thrown. Specifically, as the placeholders of the sequential features are of dimension [None, None] in order to make the BucketedBatcher trim longer sequences to their actual length, the check if the sequences are of the same length cannot be performed at model building time, and a dimension mismatch error will be returned during training when a datapoint with two sequential features of different lengths are provided. Other features that have a b x h rank 2 tensor output will be replicated s times and concatenated to the s dimension. The final output is a b x s x h' tensor where h' is the size of the concatenation of the h dimensions of all input features. +-----------+ |Input | |Feature 1 +-+ +-----------+ | +---------+ +-----------+ | +------+ |Fully | |... +--->Concat+--->Connected+-> +-----------+ | +------+ |Layers | +-----------+ | +---------+ |Input +-+ |Feature N | +-----------+ These are the available parameters of a sequence concat combiner main_sequence_feature (default null ): name fo the sequence / text/ time series feature to concatenate the outputs of the other features to. If no main_sequence_feature is specified, the combiner will look through all the features in the order they are defined in the model definition and will look for a feature with a rank 3 tensor output (sequence, text or time series). If it cannot find one it will raise an exception, otherwise the output of that feature will be used for concatenating the other features along the sequence s dimension. If there are other input features with a rank 3 output tensor, the combiner will concatenate them alongside the s dimension, which means that all of them must have identical s dimension, otherwise an error will be thrown. Example sequence concat combiner in the model definition: type : sequence_concat main_sequence_feature : null Sequence Combiner \u00b6 The sequence combiner stacks a sequence concat combiner with a sequence encoder one on top of each other. All the considerations about inputs tensor ranks describer for the sequence concat combiner apply also in this case, but the main difference is that this combiner uses the b x s x h' output of the sequence concat combiner, where b is the batch size, s is the sequence length and h' is the sum of the hidden dimensions of all input features, as input fo any of the sequence encoders described in the sequence features encoders section . Refer to that section for more detailed information about the sequence encoders and their parameters. Also all the considerations on the shape of the outputs done for the sequence encoders apply in this case too. Sequence Feature Output +---------+ |emb seq 1| +---------+ |... +--+ +---------+ | +-----------------+ |emb seq n| | |emb seq 1|emb oth| +--------+ +---------+ | +-----------------+ |Sequence| +-->... |... +-->+Encoder +-> Other | +-----------------+ | | Feature | |emb seq n|emb oth| +--------+ Output | +-----------------+ | +-------+ | |emb oth+----+ +-------+ Example sequence concat combiner in the model definition: type : sequence main_sequence_feature : null encoder : parallel_cnn ... encoder parameters ... Distributed Training \u00b6 You can distribute the training and prediction of your models using Horovod , which allows to train on a single machine with multiple GPUs as well as on multiple machines with multiple GPUs. In order to use distributed training you have to install Horovod as detailed in Horovod's installation instructions (which include installing OpenMPI or other MPI implementations) and then install the two packages: pip install horovod mpi4py Horovod works by, in practice, increasing the batch size and distributing a part of each batch to a different node and collecting the gradients from all the nodes in a smart and scalable way. It also adjusts the learning rate to counter balance the increase in the batch size. The advantage is that training speed scales almost linearly with the number of nodes. experiment , train and predict commands accept a `--use_horovod argument that instructs the model building, training and prediction phases to be conducted using Horovod in a distributed way. An MPI command specifying which machines and / or GPUs to use, together with a few more parameters, must be provided before the call to Ludwig's command. For instance, in order to train a Ludwig model on a local machine with four GPUs one you can run: mpirun -np 4 \\ -H localhost:4 \\ -bind-to none -map-by slot \\ -x NCCL_DEBUG=INFO -x LD_LIBRARY_PATH -x PATH \\ -mca pml ob1 -mca btl ^openib \\ ludwig train --use_horovod ...other Ludwig parameters... While for training on four remote machines with four GPUs each you can run: mpirun -np 16 \\ -H server1:4,server2:4,server3:4,server4:4 \\ -bind-to none -map-by slot \\ -x NCCL_DEBUG=INFO -x LD_LIBRARY_PATH -x PATH \\ -mca pml ob1 -mca btl ^openib \\ ludwig train --use_horovod ...other Ludwig parameters... The same applies to experiment and predict . More details on the installation of MPI and how to run Horovod can be found in Horovod's documentation . Programmatic API \u00b6 Ludwig functionalities can also be accessed through a programmatic API. The API consists of one LudwigModel class that can be initialized with a model definition dictionary and then can be trained with data coming in the form of a dataframe or a CSV file. Pretrained models can be loaded and can be used to obtain predictions on new data, again either in dataframe or CSV format. A detailed documentation of all the functions available in LudwigModel is provided in the API documentation . Training a Model \u00b6 To train a model one has first to initialize it using the initializer LudwigModel() and a model definition dictionary, and then calling the train() function using either a dataframe or a CSV file. from ludwig.api import LudwigModel model_definition = { ... } model = LudwigModel ( model_definition ) train_stats = model . train ( data_csv = csv_file_path ) # or train_stats = model . train ( data_df = dataframe ) model_definition is a dictionary that has the same key-value structure of a model definition YAML file, as it's technically equivalent as parsing the YAML file into a Python dictionary. train_statistics will be a dictionary containing statistics about the training. The contents are exactly the same of the training_statistics.json file produced by the experiment and train commands. Loading a Pre-trained Model \u00b6 In order to load a pre-trained Ludwig model you have to call the static function load() of the LudwigModel class providing the path containing the model. from ludwig.api import LudwigModel model = LudwigModel . load ( model_path ) Predicting \u00b6 Either a newly trained model or a pre-trained loaded model can be used for predicting on new data using the predict() function of the model object. The CSV / dataframe has to contain columns with the same names of all the input features of the model. predictions = model . predict ( dataset_csv = csv_file_path ) #or predictions = model . predict ( dataset_df = dataframe ) predictions will be a dataframe containing the prediction and confidence score / probability of all output features. If you want to compute also measures on the quality of the predictions you can run: predictions , test_stats = model . test ( dataset_csv = csv_file_path ) #or predictions , test_stats = model . test ( dataset_df = dataframe ) In this case the CSV / dataframe should also contain columns with the same names of all the output features, as their content is going to be used as ground truth to compare the predictions against and compute the measures and test_statistics will be a dictionary containing several measures of quality depending on the type of each output feature (e.g. category features will have an accuracy measure and a confusion matrix, among other measures, associated to them, while numerical features will have measures like mean squared loss and R2 among others). Visualizations \u00b6 Several visualization can be obtained from the result files from both train , predict and experiment by using the visualize command. The command has several parameters, but not all the visualizations use all of them. Let's first present the parameters of the general script, and then, for each available visualization, we will discuss about the specific parameters needed and what visualization they produce. usage: ludwig visualize [options] This script analyzes results and shows some nice plots. optional arguments: -h, --help show this help message and exit -d DATA_CSV, --data_csv DATA_CSV raw data file -g GROUND_TRUTH, --ground_truth GROUND_TRUTH ground truth file -gm GROUND_TRUTH_METADATA, --ground_truth_metadata GROUND_TRUTH_METADATA input metadata JSON file -v {learning_curves,compare_performance,compare_classifiers_performance_from_prob,compare_classifiers_performance_from_pred,compare_classifiers_performance_subset,compare_classifiers_performance_changing_k,compare_classifiers_multiclass_multimetric,compare_classifiers_predictions,compare_classifiers_predictions_distribution,confidence_thresholding,confidence_thresholding_data_vs_acc,confidence_thresholding_data_vs_acc_subset,confidence_thresholding_data_vs_acc_subset_per_class,confidence_thresholding_2thresholds_2d,confidence_thresholding_2thresholds_3d,binary_threshold_vs_metric,roc_curves,roc_curves_from_test_statistics,calibration_1_vs_all,calibration_multiclass,confusion_matrix,frequency_vs_f1}, --visualization {learning_curves,compare_performance,compare_classifiers_performance_from_prob,compare_classifiers_performance_from_pred,compare_classifiers_performance_subset,compare_classifiers_performance_changing_k,compare_classifiers_multiclass_multimetric,compare_classifiers_predictions,compare_classifiers_predictions_distribution,confidence_thresholding,confidence_thresholding_data_vs_acc,confidence_thresholding_data_vs_acc_subset,confidence_thresholding_data_vs_acc_subset_per_class,confidence_thresholding_2thresholds_2d,confidence_thresholding_2thresholds_3d,binary_threshold_vs_metric,roc_curves,roc_curves_from_test_statistics,calibration_1_vs_all,calibration_multiclass,confusion_matrix,frequency_vs_f1} type of visualization -f FIELD, --field FIELD field containing ground truth -tf THRESHOLD_FIELDS [THRESHOLD_FIELDS ...], --threshold_fields THRESHOLD_FIELDS [THRESHOLD_FIELDS ...] fields for 2d threshold -pred PREDICTIONS [PREDICTIONS ...], --predictions PREDICTIONS [PREDICTIONS ...] predictions files -prob PROBABILITIES [PROBABILITIES ...], --probabilities PROBABILITIES [PROBABILITIES ...] probabilities files -trs TRAINING_STATS [TRAINING_STATS ...], --training_statistics TRAINING_STATS [TRAINING_STATS ...] training stats files -tes TEST_STATS [TEST_STATS ...], --test_statistics TEST_STATS [TEST_STATS ...] test stats files -mn MODEL_NAMES [MODEL_NAMES ...], --model_names MODEL_NAMES [MODEL_NAMES ...] names of the models to use as labels -tn TOP_N_CLASSES [TOP_N_CLASSES ...], --top_n_classes TOP_N_CLASSES [TOP_N_CLASSES ...] number of classes to plot -k TOP_K, --top_k TOP_K number of elements in the ranklist to consider -ll LABELS_LIMIT, --labels_limit LABELS_LIMIT maximum numbers of labels. If labels in dataset are higher than this number, \"rare\" label -ss {ground_truth,predictions}, --subset {ground_truth,predictions} type of subset filtering -n, --normalize normalize rows in confusion matrix -m METRICS [METRICS ...], --metrics METRICS [METRICS ...] metrics to dispay in threshold_vs_metric -pl POSITIVE_LABEL, --positive_label POSITIVE_LABEL label of the positive class for the roc curve -l {critical,error,warning,info,debug,notset}, --logging_level {critical,error,warning,info,debug,notset} the level of logging to use Some additional information on the parameters: The list parameters are considered to be aligned, meaning predictions , probabilities , training_statistics , test_statistics and model_names are indexed altogether, for instance the name of the model producing the second predictions in the list will be the second in the model names. data_csv is intended to be the data the model(s) were trained on. ground_truth and ground_truth_metadata are respectively the HDF5 and JSON file obtained during training preprocessing. If you plan to use the visualizations then be sure not to use the skip_save_preprocessing when training. Those files are needed because they contain the split performed at preprocessing time, so it is easy to extract the test set from them. field is the output feature to use for creating the visualization. Other parameters will be detailed for each visualization as different ones use them differently. Learning Curves \u00b6 learning_curves \u00b6 This visualization uses the training_statistics and model_names parameters. For each model (in the aligned lists of training_statistics and model_names ) and for each output feature and measure of the model, it produces a line plot showing how that measure changed over the course of the epochs of training on the training and validation sets. Confusion Matrix \u00b6 confusion_matrix \u00b6 This visualization uses the top_n_classes , normalize , ground_truth_metadata , test_statistics and model_names parameters. For each model (in the aligned lists of test_statistics and model_names ) it produces a heatmap of the confusion matrix in the predictions for each field that has a confusion matrix in test_statistics . The value of top_n_classes limits the heatmap to the n most frequent classes. The second plot produced, is a barplot showing the entropy of each class, ranked from most entropic to least entropic. Compare Performance \u00b6 compare_performance \u00b6 This visualization uses the field , test_statistics and model_names parameters. For each model (in the aligned lists of test_statistics and model_names ) it produces bars in a bar plot, one for each overall metric available in the test_statistics file for the specified field . compare_classifiers_performance_from_prob \u00b6 This visualization uses the ground_truth , field , probabilities and model_names parameters. field needs to be a category. For each model (in the aligned lists of probabilities and model_names ) it produces bars in a bar plot, one for each overall metric computed on the fly from the probabilities of predictions for the specified field . compare_classifiers_performance_from_pred \u00b6 This visualization uses the ground_truth , ground_truth_metadata , field , predictions and model_names parameters. field needs to be a category. For each model (in the aligned lists of predictions and model_names ) it produces bars in a bar plot, one for each overall metric computed on the fly from the predictions for the specified field . compare_classifiers_performance_subset \u00b6 This visualization uses the top_n_classes , subset , ground_truth , ground_truth_metadata , field , probabilities and model_names parameters. field needs to be a category. For each model (in the aligned lists of predictions and model_names ) it produces bars in a bar plot, one for each overall metric computed on the fly from the probabilities predictions for the specified field , considering only a subset of the full training set. The way the subset is obtained is using the top_n_classes and subset parameters. If the values of subset is ground_truth , then only datapoints where the ground truth class is within the top n most frequent ones will be considered as test set, and the percentage of datapoints that have been kept from the original set will be displayed. If the values of subset is predictions , then only datapoints where the the model predicts a class that is within the top n most frequent ones will be considered as test set, and the percentage of datapoints that have been kept from the original set will be displayed for each model. compare_classifiers_performance_changing_k \u00b6 This visualization uses the top_k , ground_truth , field , probabilities and model_names parameters. field needs to be a category. For each model (in the aligned lists of probabilities and model_names ) it produces a line plot that shows the Hits@K measure (that counts a prediction as correct if the model produces it among the first k ) while changing k from 1 to top_k for the specified field . compare_classifiers_multiclass_multimetric \u00b6 This visualization uses the top_n_classes , ground_truth_metadata , field , test_statistics and model_names parameters. field needs to be a category. For each model (in the aligned lists of test_statistics and model_names ) it produces four plots that show the precision, recall and F1 of the model on several classes for the specified field . The first one show the measures on the n most frequent classes. The second one shows the measures on the n classes where the model performs the best. The third one shows the measures on the n classes where the model performs the worst. The fourth one shows the measures on all the classes, sorted by their frequency. This could become unreadable in case the number of classes is really high. Compare Classifier Predictions \u00b6 compare_classifiers_predictions \u00b6 This visualization uses the ground_truth , field , predictions and model_names parameters. field needs to be a category and there must be two and only two models (in the aligned lists of predictions and model_names ). This visualization produces a pie chart comparing the predictions of the two models for the specified field . compare_classifiers_predictions_distribution \u00b6 This visualization uses the ground_truth , field , predictions and model_names parameters. field needs to be a category. This visualization produces a radar plot comparing the distributions of predictions of the models for the first 10 classes of the specified field . Confidence_Thresholding \u00b6 confidence_thresholding \u00b6 This visualization uses the ground_truth , field , probabilities and model_names parameters. field needs to be a category. For each model (in the aligned lists of probabilities and model_names ) it produces a pair of lines indicating the accuracy of the model and the data coverage while increasing a threshold (x axis) on the probabilities of predictions for the specified field . confidence_thresholding_data_vs_acc \u00b6 This visualization uses the ground_truth , field , probabilities and model_names parameters. field needs to be a category. For each model (in the aligned lists of probabilities and model_names ) it produces a line indicating the accuracy of the model and the data coverage while increasing a threshold on the probabilities of predictions for the specified field . The difference with confidence_thresholding is that it uses two axes instead of three, not visualizing the threshold and having coverage as x axis instead of the threshold. confidence_thresholding_data_vs_acc_subset \u00b6 This visualization uses the top_n_classes , subset , ground_truth , field , probabilities and model_names parameters. field needs to be a category. For each model (in the aligned lists of probabilities and model_names ) it produces a line indicating the accuracy of the model and the data coverage while increasing a threshold on the probabilities of predictions for the specified field , considering only a subset of the full training set. The way the subset is obtained is using the top_n_classes and subset parameters.. The difference with confidence_thresholding is that it uses two axes instead of three, not visualizing the threshold and having coverage as x axis instead of the threshold. If the values of subset is ground_truth , then only datapoints where the ground truth class is within the top n most frequent ones will be considered as test set, and the percentage of datapoints that have been kept from the original set will be displayed. If the values of subset is predictions , then only datapoints where the the model predicts a class that is within the top n most frequent ones will be considered as test set, and the percentage of datapoints that have been kept from the original set will be displayed for each model. confidence_thresholding_data_vs_acc_subset_per_class \u00b6 This visualization uses the top_n_classes , subset , ground_truth , ground_truth_metadata , field , probabilities and model_names parameters. field needs to be a category. For each model (in the aligned lists of probabilities and model_names ) it produces a line indicating the accuracy of the model and the data coverage while increasing a threshold on the probabilities of predictions for the specified field , considering only a subset of the full training set. The way the subset is obtained is using the top_n_classes and subset parameters.. The difference with confidence_thresholding is that it uses two axes instead of three, not visualizing the threshold and having coverage as x axis instead of the threshold. If the values of subset is ground_truth , then only datapoints where the ground truth class is within the top n most frequent ones will be considered as test set, and the percentage of datapoints that have been kept from the original set will be displayed. If the values of subset is predictions , then only datapoints where the the model predicts a class that is within the top n most frequent ones will be considered as test set, and the percentage of datapoints that have been kept from the original set will be displayed for each model. The difference with confidence_thresholding_data_vs_acc_subset is that it produces one plot per class within the top_n_classes . confidence_thresholding_2thresholds_2d \u00b6 This visualization uses the ground_truth , threshold_fields , probabilities and model_names parameters. threshold_fields need to be exactly two, either category or binary. probabilities need to be exactly two, aligned with threshold_fields . model_names has to be exactly one. Three plots are produced. The first plot shows several semi transparent lines. They summarize the 3d surfaces displayed by confidence_thresholding_2thresholds_3d that have thresholds on the confidence of the predictions of the two threshold_fields as x and y axes and either the data coverage percentage or the accuracy as z axis. Each line represents a slice of the data coverage surface projected onto the accuracy surface. The second plot shows the max of all the lines displayed in the first plot. The third plot shows the max line and the values of the thresholds that obtained a specific data coverage vs accuracy pair of values. confidence_thresholding_2thresholds_3d \u00b6 This visualization uses the ground_truth , threshold_fields and probabilities parameters. threshold_fields need to be exactly two, either category or binary. probabilities need to be exactly two, aligned with threshold_fields . The plot shows the 3d surfaces displayed by confidence_thresholding_2thresholds_3d that have thresholds on the confidence of the predictions of the two threshold_fields as x and y axes and either the data coverage percentage or the accuracy as z axis. Binary Threshold vs. Metric \u00b6 binary_threshold_vs_metric \u00b6 This visualization uses the positive_label , metrics , ground_truth , field , probabilities and model_names parameters. field can be a category or binary feature. For each metric specified in metrics (options are f1 , precision , recall , accuracy ), this visualization produces a line chart plotting a threshold on the confidence of the model against the metric for the specified field . If field is a category feature, positive_label indicates which is the class to be considered positive class and all the others will be considered negative. It needs to be an integer, to figure out the association between classes and integers check the ground_truth_metadata JSON file. ROC Curves \u00b6 roc_curves \u00b6 This visualization uses the positive_label , ground_truth , field , probabilities and model_names parameters. field can be a category or binary feature. This visualization produces a line chart plotting the roc curves for the specified field . If field is a category feature, positive_label indicates which is the class to be considered positive class and all the others will be considered negative. It needs to be an integer, to figure out the association between classes and integers check the ground_truth_metadata JSON file. roc_curves_from_test_statistics \u00b6 This visualization uses the field , test_statistics and model_names parameters. field needs to be binary feature. This visualization produces a line chart plotting the roc curves for the specified field . Calibration Plot \u00b6 calibration_1_vs_all \u00b6 This visualization uses the top_k , ground_truth , field , probabilities and model_names parameters. field needs to be a category or binary. For each class or each of the k most frequent classes if top_k is specified, it produces two plots computed on the fly from the probabilities of predictions for the specified field . The first plot is a calibration curve that shows the calibration of the predictions considering the current class to be the true one and all others to be a false one, drawing one line for each model (in the aligned lists of probabilities and model_names ). The second plot shows the distributions of the predictions considering the current class to be the true one and all others to be a false one, drawing the distribution for each model (in the aligned lists of probabilities and model_names ). calibration_multiclass \u00b6 This visualization uses the ground_truth , field , probabilities and model_names parameters. field needs to be a category. For each class, produces two plots computed on the fly from the probabilities of predictions for the specified field . The first plot is a calibration curve that shows the calibration of the predictions considering al classes, drawing one line for each model (in the aligned lists of probabilities and model_names ). The second plot shows a bar plot of the brier score (that calculates how calibrated are the probabilities of the predictions of a model), drawing one bar for each model (in the aligned lists of probabilities and model_names ). Class Frequency vs. F1 score \u00b6 frequency_vs_f1 \u00b6 This visualization uses the ground_truth_metadata , field , test_statistics and model_names parameters. field needs to be a category. For each model (in the aligned lists of test_statistics and model_names ), produces two plots statistics of predictions for the specified field . The first plot is a line plot with one x axis representing the different classes and two vertical axes colored in orange and blue respectively. The orange one is the frequency of the class and an orange line is plotted to show the trend. The blue one is the F1 score for that class and a blue line is plotted to show the trend. The classes on the x axis are sorted by f1 score. The second plot has the same structure of the first one, but the axes are flipped and the classes on the x axis are sorted by frequency.",
      "title": "User Guide"
    },
    {
      "location": "user_guide/#command-line-interface",
      "text": "Ludwig provides six command line interface entry points train predict test experiment visualize collect_weights collect_activations serve They are described in detail below.",
      "title": "Command Line Interface"
    },
    {
      "location": "user_guide/#train",
      "text": "This command lets you train a model from your data. You can call it with: ludwig train [options] or with python -m ludwig.train [options] from within Ludwig's main directory. These are the available arguments: usage: ludwig train [options] This script trains a model. optional arguments: -h, --help show this help message and exit --output_directory OUTPUT_DIRECTORY directory that contains the results --experiment_name EXPERIMENT_NAME experiment name --model_name MODEL_NAME name for the model --data_csv DATA_CSV input data CSV file. If it has a split column, it will be used for splitting (0: train, 1: validation, 2: test), otherwise the dataset will be randomly split --data_train_csv DATA_TRAIN_CSV input train data CSV file --data_validation_csv DATA_VALIDATION_CSV input validation data CSV file --data_test_csv DATA_TEST_CSV input test data CSV file --data_hdf5 DATA_HDF5 input data HDF5 file. It is an intermediate preprocess version of the input CSV created the first time a CSV file is used in the same directory with the same name and a hdf5 extension --data_train_hdf5 DATA_TRAIN_HDF5 input train data HDF5 file. It is an intermediate preprocess version of the input CSV created the first time a CSV file is used in the same directory with the same name and a hdf5 extension --data_validation_hdf5 DATA_VALIDATION_HDF5 input validation data HDF5 file. It is an intermediate preprocess version of the input CSV created the first time a CSV file is used in the same directory with the same name and a hdf5 extension --data_test_hdf5 DATA_TEST_HDF5 input test data HDF5 file. It is an intermediate preprocess version of the input CSV created the first time a CSV file is used in the same directory with the same name and a hdf5 extension --train_set_metadata_json TRAIN_SET_METADATA_JSON input metadata JSON file. It is an intermediate preprocess file containing the mappings of the input CSV created the first time a CSV file is used in the same directory with the same name and a json extension -sspi, --skip_save_processed_input skips saving intermediate HDF5 and JSON files -md MODEL_DEFINITION, --model_definition MODEL_DEFINITION model definition -mdf MODEL_DEFINITION_FILE, --model_definition_file MODEL_DEFINITION_FILE YAML file describing the model. Ignores --model_hyperparameters -mlp MODEL_LOAD_PATH, --model_load_path MODEL_LOAD_PATH path of a pretrained model to load as initialization -mrp MODEL_RESUME_PATH, --model_resume_path MODEL_RESUME_PATH path of a the model directory to resume training of -ssm, --skip_save_model disables saving weights each time the model imrpoves. By default Ludwig saves weights after each epoch the validation measure imrpvoes, but if the model is really big that can be time consuming if you do not want to keep the weights and just find out what performance can a model get with a set of hyperparameters, use this parameter to skip it. -ssp, --skip_save_progress disables saving weights after each epoch. By default ludwig saves weights after each epoch for enabling resuming of training, but if the model is really big that can be time consuming and will save twice as much space, use this parameter to skip it. -ssl, --skip_save_log disables saving TensorBoard logs. By default Ludwig saves logs for the TensorBoard, but if it is not needed turning it off can slightly increase the overall speed. -rs RANDOM_SEED, --random_seed RANDOM_SEED a random seed that is going to be used anywhere there is a call to a random number generator: data splitting, parameter initialization and training set shuffling -g GPUS [GPUS ...], --gpus GPUS [GPUS ...] list of gpus to use -gf GPU_FRACTION, --gpu_fraction GPU_FRACTION fraction of gpu memory to initialize the process with -uh, --use_horovod uses horovod for distributed training -dbg, --debug enables debugging mode -l {critical,error,warning,info,debug,notset}, --logging_level {critical,error,warning,info,debug,notset} the level of logging to use When Ludwig trains a model it creates two intermediate files, one HDF5 and one JSON. The HDF5 file contains the data mapped to numpy ndarrays, while the JSON file contains the mappings from the values in the tensors to their original labels. For instance, for a categorical feature with 3 possible values, the HDF5 file will contain integers from 0 to 3 (with 0 being a <UNK> category), while the JSON file will contain a idx2str list containing all tokens ( [<UNK>, label_1, label_2, label_3] ), a str2idx dictionary ( {\"<UNK>\": 0, \"label_1\": 1, \"label_2\": 2, \"label_3\": 3} ) and a str2freq dictionary ( {\"<UNK>\": 0, \"label_1\": 93, \"label_2\": 55, \"label_3\": 24} ). The reason to have those intermediate files is two-fold: on one hand, if you are going to train your model again Ludwig will try to load them instead of recomputing all tensors, which saves a consistent amount of time, and on the other hand when you want to use your model to predict, data has to be mapped to tensors in exactly the same way it was mapped during training, so you'll be required to load the JSON metadata file in the predict command. The way this works is: the first time you provide a UTF-8 encoded CSV ( --data_csv ), the HDF5 and JSON files are created, from the second time on Ludwig will load them instead of the CSV even if you specify the CSV (it looks in the same directory for files names in the same way but with a different extension), finally you can directly specify the HDF5 and JSON files ( --data_hdf5 and --metadata_json ). As the mapping from raw data to tensors depends on the type of feature that you specify in your model definition, if you change type (for instance from sequential to text ) you also have to redo the preprocessing, which is achieved by deleting the HDF5 and JSON files. Alternatively you can skip saving the HDF5 and JSON files specifying --skip_save_processed_input . Splitting between train, validation and test set can be done in several ways. This allows for a few possible input data scenarios: one single UTF-8 encoded CSV file is provided ( -data_csv ). In this case if the CSV contains a split column with values 0 for training, 1 for validation and 2 for test, this split will be used. If you want to ignore the split column and perform a random split, use a force_split argument in the model definition. In the case when there is no split column, a random 70-20-10 split will be performed. You can set the percentages and specify if you want stratified sampling in the model definition preprocessing section. you can provide separate UTF-8 encoded train, validation and test CSVs ( --data_train_csv , --data_validation_csv , --data_test_csv ). the HDF5 and JSON file indications specified in the case of a single CSV file apply also in the multiple files case ( --data_train_hdf5 , --data_validation_hdf5 , --data_test_hdf5 ), with the only difference that you need to specify only one JSON file ( --metadata_json ) instead of three. The validation set is optional, but if absent the training wil continue until the end of the training epochs, while when there's a validation set the default behavior is to perform early stopping after the validation measure does not improve for a a certain amount of epochs. The test set is optional too. Other optional arguments are --output_directory , --experiment_name and --model name . By default the output directory is ./results . That directory will contain a directory named [experiment_name]_[model_name]_0 if model name and experiment name are specified. If the same combination of experiment and model name is used again, the integer at the end of the name wil be increased. If neither of them is specified the directory will be named run_0 . The directory will contain description.json - a file containing a description of the training process with all the information to reproduce it. training_statistics.json which contains records of all measures and losses for each epoch. model - a directory containing model hyperparameters, weights, checkpoints and logs (for TensorBoard). The model definition can be provided either as a string ( --model_definition ) or as YAML file ( --model_definition_file ). Details on how to write your model definition are provided in the Model Definition section. During training Ludwig saves two sets of weights for the model, one that is the weights at the end of the epoch where the best performance on the validation measure was achieved and one that is the weights at the end of the latest epoch. The reason for keeping the second set is to be able to resume training in case the training process gets interrupted somehow. To resume training using the latest weights and the whole history of progress so far you have to specify the --model_resume_path argument. You can avoid saving the latest weights and the overall progress so far by using the argument --skip_save_progress , but you will not be able to resume it afterwards. Another available option is to load a previously trained model as an initialization for a new training process. In this case Ludwig will start a new training process, without knowing any progress of the previous model, no training statistics, nor the number of epochs the model has been trained on so far. It's not resuming training, just initializing training with a previously trained model with the same model definition, and it is accomplished through the --model_load_path argument. You can specify a random sed to be used by the python environment, python random package, numpy and TensorFlow with the --random_seed argument. This is useful for reproducibility. Be aware that due to asynchronicity in the TensorFlow GPU execution, when training on GPU results may not be reproducible. You can manage which GPUs on your machine are used with the --gpus argument, which accepts a string identical to the format of CUDA_VISIBLE_DEVICES environment variable, namely a list of integers separated by comma. You can also specify the fraction of the GPU memory that will be initially assigned to TensorFlow with --gpu_fraction . By default it is 1.0, but you can set it, for instance, to 0.2 to use only 1/5 of the available memory. If TensorFlow will need more GPU memory it will try to increase this amount. Finally the --logging_level argument lets you set the amount of logging that you want to see during training and the --debug argument turns on TensorFlow's tfdbg . Be careful when doing so, as it will help in catching errors, in particular infs and NaNs but it will consume much more memory. Example: ludwig train --data_csv reuters-allcats.csv --model_definition \"{input_features: [{name: text, type: text, encoder: parallel_cnn, level: word}], output_features: [{name: class, type: category}]}\"",
      "title": "train"
    },
    {
      "location": "user_guide/#predict",
      "text": "This command lets you use a previously trained model to predict on new data. You can call it with: ludwig predict [options] or with python -m ludwig.predict [options] from within Ludwig's main directory. These are the available arguments: usage: ludwig predict [options] This script loads a pretrained model and uses it to predict. optional arguments: -h, --help show this help message and exit --data_csv DATA_CSV input data CSV file. If it has a split column, it will be used for splitting (0: train, 1: validation, 2: test), otherwise the dataset will be randomly split --data_hdf5 DATA_HDF5 input data HDF5 file. It is an intermediate preprocess version of the input CSV created the first time a CSV file is used in the same directory with the same name and a hdf5 extension --train_set_metadata_json TRAIN_SET_METADATA_JSON input metadata JSON file. It is an intermediate preprocess file containing the mappings of the input CSV created the first time a CSV file is used in the same directory with the same name and a json extension -s {training,validation,test,full}, --split {training,validation,test,full} the split to test the model on -m MODEL_PATH, --model_path MODEL_PATH model to load -od OUTPUT_DIRECTORY, --output_directory OUTPUT_DIRECTORY directory that contains the results -ssuo, --skip_save_unprocessed_output skips saving intermediate NPY output files -bs BATCH_SIZE, --batch_size BATCH_SIZE size of batches -g GPUS, --gpus GPUS list of gpu to use -gf GPU_FRACTION, --gpu_fraction GPU_FRACTION fraction of gpu memory to initialize the process with -uh, --use_horovod uses horovod for distributed training -dbg, --debug enables debugging mode -l {critical,error,warning,info,debug,notset}, --logging_level {critical,error,warning,info,debug,notset} the level of logging to use The same distinction between UTF-8 encoded CSV files and HDF5 / JSON files explained in the train section also applies here. In either case, the JSON metadata file obtained during training is needed in order to map the new data into tensors. If the new data contains a split column, you can specify which split to use to calculate the predictions with the --split argument. By default it's full which means all the splits will be used. A model to load is needed, and you can specify its path with the --model_path argument. If you trained a model previously and got the results in, for instance, ./results/experiment_run_0 , you have to specify ./results/experiment_run_0/model for using it to predict. You can specify an output directory with the argument --output-directory , by default it will be ./result_0 , with increasing numbers if a directory with the same name is present. The directory will contain a prediction CSV file and a probability CSV file for each output feature, together with raw NPY files containing raw tensors. You can specify not to save the raw NPY output files with the argument skip_save_unprocessed_output . If the argument --evaluate_performance if provided, a predict_statistics.json file containing all prediction statistics will also be outputted. If this parameter is specified, the data must contain columns for each output feature with ground truth output values in order to compute the performance statistics. If you receive an error regarding a missing output feature column in your data, it means that the data does not contain the columns for each output feature to use as ground truth. A specific batch size for speeding up the prediction can be specified using the argument --batch_size . Finally the --logging_level , --debug and --gpus related arguments behave exactly like described in the train command section. Example: ludwig predict --data_csv reuters-allcats.csv --model_path results/experiment_run_0/model/",
      "title": "predict"
    },
    {
      "location": "user_guide/#test",
      "text": "This command lets you use a previously trained model to predict on new data and evaluate the performance of the prediction compared to ground truth. You can call it with: ludwig test [options] or with python -m ludwig.test_performance [options] from within Ludwig's main directory. These are the available arguments: usage: ludwig predict [options] This script loads a pretrained model and uses it to predict. optional arguments: -h, --help show this help message and exit --data_csv DATA_CSV input data CSV file. If it has a split column, it will be used for splitting (0: train, 1: validation, 2: test), otherwise the dataset will be randomly split --data_hdf5 DATA_HDF5 input data HDF5 file. It is an intermediate preprocess version of the input CSV created the first time a CSV file is used in the same directory with the same name and a hdf5 extension --train_set_metadata_json TRAIN_SET_METADATA_JSON input metadata JSON file. It is an intermediate preprocess file containing the mappings of the input CSV created the first time a CSV file is used in the same directory with the same name and a json extension -s {training,validation,test,full}, --split {training,validation,test,full} the split to test the model on -m MODEL_PATH, --model_path MODEL_PATH model to load -od OUTPUT_DIRECTORY, --output_directory OUTPUT_DIRECTORY directory that contains the results -ssuo, --skip_save_unprocessed_output skips saving intermediate NPY output files -bs BATCH_SIZE, --batch_size BATCH_SIZE size of batches -g GPUS, --gpus GPUS list of gpu to use -gf GPU_FRACTION, --gpu_fraction GPU_FRACTION fraction of gpu memory to initialize the process with -uh, --use_horovod uses horovod for distributed training -dbg, --debug enables debugging mode -l {critical,error,warning,info,debug,notset}, --logging_level {critical,error,warning,info,debug,notset} the level of logging to use All parameters are the same of predict and the behavior is the same. The only difference isthat test requires the dataset to contain also columns with the same name of output features. This is needed because test compares the predictions produced by the model with the ground truth and will save all those statistics in a test_statistics.json file in the result directory. Example: ludwig test --data_csv reuters-allcats.csv --model_path results/experiment_run_0/model/",
      "title": "test"
    },
    {
      "location": "user_guide/#experiment",
      "text": "This command combines training and test into a single handy command. You can call it with: ludwig experiment [options] or with python -m ludwig.experiment [options] from within Ludwig's main directory. These are the available arguments: usage: ludwig experiment [options] This script trains and tests a model. optional arguments: -h, --help show this help message and exit --output_directory OUTPUT_DIRECTORY directory that contains the results --experiment_name EXPERIMENT_NAME experiment name --model_name MODEL_NAME name for the model --data_csv DATA_CSV input data CSV file. If it has a split column, it will be used for splitting (0: train, 1: validation, 2: test), otherwise the dataset will be randomly split --data_train_csv DATA_TRAIN_CSV input train data CSV file --data_validation_csv DATA_VALIDATION_CSV input validation data CSV file --data_test_csv DATA_TEST_CSV input test data CSV file --data_hdf5 DATA_HDF5 input data HDF5 file. It is an intermediate preprocess version of the input CSV created the first time a CSV file is used in the same directory with the same name and a hdf5 extension --data_train_hdf5 DATA_TRAIN_HDF5 input train data HDF5 file. It is an intermediate preprocess version of the input CSV created the first time a CSV file is used in the same directory with the same name and a hdf5 extension --data_validation_hdf5 DATA_VALIDATION_HDF5 input validation data HDF5 file. It is an intermediate preprocess version of the input CSV created the first time a CSV file is used in the same directory with the same name and a hdf5 extension --data_test_hdf5 DATA_TEST_HDF5 input test data HDF5 file. It is an intermediate preprocess version of the input CSV created the first time a CSV file is used in the same directory with the same name and a hdf5 extension --train_set_metadata_json TRAIN_SET_METADATA_JSON input train set metadata JSON file. It is an intermediate preprocess file containing the mappings of the input CSV created the first time a CSV file is used in the same directory with the same name and a json extension -sspi, --skip_save_processed_input skips saving intermediate HDF5 and JSON files -ssuo, --skip_save_unprocessed_output skips saving intermediate NPY output files -md MODEL_DEFINITION, --model_definition MODEL_DEFINITION model definition -mdf MODEL_DEFINITION_FILE, --model_definition_file MODEL_DEFINITION_FILE YAML file describing the model. Ignores --model_hyperparameters -mlp MODEL_LOAD_PATH, --model_load_path MODEL_LOAD_PATH path of a pretrained model to load as initialization -mrp MODEL_RESUME_PATH, --model_resume_path MODEL_RESUME_PATH path of a the model directory to resume training of -ssp SKIP_SAVE_PROGRESS_WEIGHTS, --skip_save_progress SKIP_SAVE_PROGRESS_WEIGHTS disables saving weights after each epoch. By default Ludwig saves weights after each epoch for enabling resuming of training, but if the model is really big that can be time consuming and will use twice as much storage space, use this parameter to skip it. -rs RANDOM_SEED, --random_seed RANDOM_SEED a random seed that is going to be used anywhere there is a call to a random number generator: data splitting, parameter initialization and training set shuffling -g GPUS [GPUS ...], --gpus GPUS [GPUS ...] list of gpus to use -gf GPU_FRACTION, --gpu_fraction GPU_FRACTION fraction of gpu memory to initialize the process with -dbg, --debug enables debugging mode -l {critical,error,warning,info,debug,notset}, --logging_level {critical,error,warning,info,debug,notset} the level of logging to use The parameters combine parameters from both train and test so refer to those sections for an in depth explanation. The output directory will contain the outputs both commands produce. Example: ludwig experiment --data_csv reuters-allcats.csv --model_definition \"{input_features: [{name: text, type: text, encoder: parallel_cnn, level: word}], output_features: [{name: class, type: category}]}\"",
      "title": "experiment"
    },
    {
      "location": "user_guide/#visualize",
      "text": "This command lets you visualize training and prediction statistics, alongside with comparing different models performances and predictions. You can call it with: ludwig visualize [options] or with python -m ludwig.visualize [options] from within Ludwig's main directory. These are the available arguments: usage: ludwig visualize [options] This script analyzes results and shows some nice plots. optional arguments: -h, --help show this help message and exit -d DATA_CSV, --data_csv DATA_CSV raw data file -g GROUND_TRUTH, --ground_truth GROUND_TRUTH ground truth file -gts GROUND_TRUTH_SPLIT, --ground_truth_split GROUND_TRUTH_SPLIT ground truth split - 0:train, 1:validation, 2:test split -gm GROUND_TRUTH_METADATA, --ground_truth_metadata GROUND_TRUTH_METADATA input metadata JSON file -v {compare_performance,compare_classifiers_performance_from_prob,compare_classifiers_performance_from_pred,compare_classifiers_performance_changing_k,compare_classifiers_performance_subset,compare_classifiers_predictions,compare_classifiers_predictions_distribution,confidence_thresholding,confidence_thresholding_2thresholds_3d,confidence_thresholding_data_vs_acc,confidence_thresholding_2thresholds_2d,confidence_thresholding_data_vs_acc_subset,confidence_thresholding_data_vs_acc_subset_per_class,binary_threshold_vs_metric,roc_curves,roc_curves_from_test_statistics,data_vs_acc_subset,data_vs_acc_subset_per_class,calibration_1_vs_all,calibration_multiclass,confusion_matrix,compare_classifiers_multiclass_multimetric,frequency_vs_f1,learning_curves}, --visualization {compare_performance,compare_classifiers_performance_from_prob,compare_classifiers_performance_from_pred,compare_classifiers_performance_changing_k,compare_classifiers_performance_subset,compare_classifiers_predictions,compare_classifiers_predictions_distribution,confidence_thresholding,confidence_thresholding_2thresholds_3d,confidence_thresholding_data_vs_acc,confidence_thresholding_2thresholds_2d,confidence_thresholding_data_vs_acc_subset,confidence_thresholding_data_vs_acc_subset_per_class,binary_threshold_vs_metric,roc_curves,roc_curves_from_test_statistics,data_vs_acc_subset,data_vs_acc_subset_per_class,calibration_1_vs_all,calibration_multiclass,confusion_matrix,compare_classifiers_multiclass_multimetric,frequency_vs_f1,learning_curves} type of visualization -f FIELD, --field FIELD field containing ground truth -tf THRESHOLD_FIELDS [THRESHOLD_FIELDS ...], --threshold_fields THRESHOLD_FIELDS [THRESHOLD_FIELDS ...] fields for 2d threshold -pred PREDICTIONS [PREDICTIONS ...], --predictions PREDICTIONS [PREDICTIONS ...] predictions files -prob PROBABILITIES [PROBABILITIES ...], --probabilities PROBABILITIES [PROBABILITIES ...] probabilities files -trs TRAINING_STATS [TRAINING_STATS ...], --training_statistics TRAINING_STATS [TRAINING_STATS ...] training stats files -tes TEST_STATS [TEST_STATS ...], --test_statistics TEST_STATS [TEST_STATS ...] test stats files -alg ALGORITHMS [ALGORITHMS ...], --algorithms ALGORITHMS [ALGORITHMS ...] names of the algorithms (for better graphs) -tn TOP_N_CLASSES [TOP_N_CLASSES ...], --top_n_classes TOP_N_CLASSES [TOP_N_CLASSES ...] number of classes to plot -k TOP_K, --top_k TOP_K number of elements in the ranklist to consider -ll LABELS_LIMIT, --labels_limit LABELS_LIMIT maximum numbers of labels. If labels in dataset are higher than this number, \"rare\" label -ss {ground_truth,predictions}, --subset {ground_truth,predictions} type of subset filtering -n, --normalize normalize rows in confusion matrix -m METRICS [METRICS ...], --metrics METRICS [METRICS ...] metrics to dispay in threshold_vs_metric -pl POSITIVE_LABEL, --positive_label POSITIVE_LABEL label of the positive class for the roc curve -l {critical,error,warning,info,debug,notset}, --logging_level {critical,error,warning,info,debug,notset} the level of logging to use As the --visualization parameters suggests, there is a vast number of visualizations readily available. Each of them requires a different subset of this command's arguments, so they will be described one by one in the Visualizations section.",
      "title": "visualize"
    },
    {
      "location": "user_guide/#collect_weights",
      "text": "This command lets you load a pre-trained model and collect the tensors with a specific name in order to save them in a NPY format. This may be useful in order to visualize the learned weights (for instance collecting embedding matrices) and for some post-hoc analyses. You can call it with: ludwig collect_weights [options] or with python -m ludwig.collect weights [options] from within Ludwig's main directory. These are the available arguments: usage: ludwig collect_weights [options] This script loads a pretrained model and uses it collect weights. optional arguments: -h, --help show this help message and exit -m MODEL_PATH, --model_path MODEL_PATH model to load -t TENSORS [TENSORS ...], --tensors TENSORS [TENSORS ...] tensors to collect -od OUTPUT_DIRECTORY, --output_directory OUTPUT_DIRECTORY directory that contains the results -dbg, --debug enables debugging mode -l {critical,error,warning,info,debug,notset}, --logging_level {critical,error,warning,info,debug,notset} the level of logging to use The three most important arguments are --model_path where you have to specify the path of the model to load, --tensors that lets you specify a list of tensor names in the TensorFlow graph that contain the weights you want to collect, and finally --output_directory that lets you specify where the NPY files (one for each tensor name specified) will be saved. In order to figure out the names fo the tensors containing the weights you want to collect, the best way is to inspect the graph of the model with TensorBoard. tensorboard --logdir /path/to/model/log",
      "title": "collect_weights"
    },
    {
      "location": "user_guide/#collect_activations",
      "text": "This command lets you load a pre-trained model and input data and collects the values of activations contained in tensors with a specific name in order to save them in a NPY format. This may be useful in order to visualize the activations (for instance collecting last layer's activations as embeddings representations of the input datapoint) and for some post-hoc analyses. You can call it with: ludwig collect_activations [options] or with python -m ludwig.collect activations [options] from within Ludwig's main directory. These are the available arguments: usage: ludwig collect_activations [options] This script loads a pretrained model and uses it collect tensors for each datapoint in the dataset. optional arguments: -h, --help show this help message and exit --data_csv DATA_CSV input data CSV file --data_hdf5 DATA_HDF5 input data HDF5 file -s {training,validation,test,full}, --split {training,validation,test,full} the split to test the model on -m MODEL_PATH, --model_path MODEL_PATH model to load -t TENSORS [TENSORS ..], --tensors TENSORS [TENSORS ..] tensors to collect -od OUTPUT_DIRECTORY, --output_directory OUTPUT_DIRECTORY directory that contains the results -bs BATCH_SIZE, --batch_size BATCH_SIZE size of batches -g GPUS, --gpus GPUS list of gpu to use -gf GPU_FRACTION, --gpu_fraction GPU_FRACTION fraction of gpu memory to initialize the process with -dbg, --debug enables debugging mode -l {critical,error,warning,info,debug,notset}, --logging_level {critical,error,warning,info,debug,notset} the level of logging to use The data related and runtime related arguments (GPUs, batch size, etc.) are the same used in predict , you can refer to that section for an explanation. The collect specific arguments --model_path , --tensors and --output_directory are the same used in collect_weights , you can refer to that section for an explanation. In order to figure out the names fo the tensors containing the activations you want to collect, the best way is to inspect the graph of the model with TensorBoard. tensorboard --logdir /path/to/model/log",
      "title": "collect_activations"
    },
    {
      "location": "user_guide/#serve",
      "text": "This command lets you load a pre-trained model and serve it on an http server. You can call it with: ludwig serve [options] or with python -m ludwig.serve [options] from within Ludwig's main directory. These are the available arguments: usage: ludwig serve [options] This script serves a pretrained model optional arguments: -h, --help show this help message and exit -m MODEL_PATH, --model_path MODEL_PATH model to load -l {critical,error,warning,info,debug,notset}, --logging_level {critical,error,warning,info,debug,notset} the level of logging to use -p PORT, --port PORT port for server (default: 8000) -H HOST, --host HOST host for server (default: 0.0.0.0) The most important argument is --model_path where you have to specify the path of the model to load. Once running, you can make a POST request on the /predict endpoint to run inference on the form data submitted.",
      "title": "serve"
    },
    {
      "location": "user_guide/#example-curl",
      "text": "",
      "title": "Example curl"
    },
    {
      "location": "user_guide/#file",
      "text": "curl http://0.0.0.0:8000/predict -X POST -F 'image_path=@path_to_image/example.png'",
      "title": "File"
    },
    {
      "location": "user_guide/#text",
      "text": "curl http://0.0.0.0:8000/predict -X POST -F 'english_text=words to be translated'",
      "title": "Text"
    },
    {
      "location": "user_guide/#both-text-and-file",
      "text": "curl http://0.0.0.0:8000/predict -X POST -F 'text=mixed together with' -F 'image=@path_to_image/example.png'",
      "title": "Both Text and File"
    },
    {
      "location": "user_guide/#data-preprocessing",
      "text": "Ludwig data preprocessing maps raw data coming in UTF-8 encoded CSV format into an HDF5 file containing tensors and a JSON file containing mappings from strings to tensors when needed. This mapping is performed when a UTF-8 encoded CSV is provided as input and both HDF5 and JSON files are saved in the same directory as the input CSV, unless the argument --skip_save_processed_input is used (both in train and experiment commands). The reason to save those files is both to provide a cache and avoid performing the preprocessing again (as, depending on the type of features involved, it could be time consuming) and to provide the needed mappings to be able to map unseen data into tensors. The preprocessing process is personalizable to fit the specifics of your data format, but the basic assumption is always that your UTF-8 encoded CSV files contains one row for each datapoint and one column for each feature (either input or output), and that you are able to determine the type of that column among the ones supported by Ludwig. The reason for that is that each data type is mapped into tensors in a different way and expects the content to be formatted in a specific way. Different datatypes may have different formatters that format the values of a cell. For instance the value of a cell of a sequence feature column by default is managed by a space formatter, that splits the content of the value into a list of strings using space. before formatter after formatter \"token3 token4 token2\" [token3, token4, token2] \"token3 token1\" [token3, token1] Then a list idx2str and two dictionaries str2idx and str2freq are created containing all the tokens in all the lists obtained by splitting all the rows of the column and an integer id is assigned to each of them (in order of frequency). { \"column_name\" : { \"idx2str\" : [ \"<PAD>\" , \"<UNK>\" , \"token3\" , \"token2\" , \"token4\" , \"token1\" ], \"str2idx\" : { \"<PAD>\" : 0 , \"<UNK>\" : 1 , \"token3\" : 2 , \"token2\" : 3 , \"token4\" : 4 , \"token1\" : 5 }, \"str2freq\" : { \"<PAD>\" : 0 , \"<UNK>\" : 0 , \"token3\" : 2 , \"token2\" : 1 , \"token4\" : 1 , \"token1\" : 1 } } } Finally a numpy matrix is created with sizes n x l where n is the number of rows in the column and l is the minimum of the longest tokenized list and a max_length parameter that can be set. All sequences shorter than l are padded on the right (but this behavior may also be modified through a parameter). after formatter numpy matrix [token3, token4, token2] 2 4 3 [token3, token1] 2 5 0 The final result matrix is saved in the HDF5 the name of the original column in the CSV as key, while the mapping from token to integer ID (and its inverse mapping) is saved in the JSON file. Each datatype is preprocessed in a different way, using different parameters and different formatters. Details on how to set those parameters for each feature type and for each specific feature will be described in the Model Definition - Preprocessing section. Binary features are directly transformed into a binary valued vector of length n (where n is the size of the dataset) and added to HDF5 with a key that reflects the name of column in the CSV. No additional information about them is available in the JSON metadata file. Numerical features are directly transformed into a float valued vector of length n (where n is the size of the dataset) and added to HDF5 with a key that reflects the name of column in the CSV. No additional information about them is available in the JSON metadata file. Category features are transformed into an integer valued vector of size n (where n is the size of the dataset) and added to HDF5 with a key that reflects the name of column in the CSV. The way categories are mapped into integers consists in first collecting a dictionary of all the different category strings present in the column of the CSV, then rank them by frequency and then assign them an increasing integer ID from the most frequent to the most rare (with 0 being assigned to a <UNK> token). The column name is added to the JSON file, with an associated dictionary containing 1. the mapping from integer to string ( idx2str ) 2. the mapping from string to id ( str2idx ) 3. the mapping from string to frequency ( str2freq ) 4. the size of the set of all tokens ( vocab_size ) 4. additional preprocessing information (by default how to fill missing values and what token to use to fill missing values) Set features are transformed into a binary (int8 actually) valued matrix of size n x l (where n is the size of the dataset and l is the minimum of the size of the biggest set and a max_size parameter) and added to HDF5 with a key that reflects the name of column in the CSV. The way sets are mapped into integers consists in first using a formatter to map from strings to sequences of set items (by default this is done by splitting on spaces). Then a a dictionary of all the different set item strings present in the column of the CSV is collected, then they are ranked by frequency and an increasing integer ID is assigned to them from the most frequent to the most rare (with 0 being assigned to <PAD> used for padding and 1 assigned to <UNK> item). The column name is added to the JSON file, with an associated dictionary containing 1. the mapping from integer to string ( idx2str ) 2. the mapping from string to id ( str2idx ) 3. the mapping from string to frequency ( str2freq ) 4. the maximum size of all sets ( max_set_size ) 5. additional preprocessing information (by default how to fill missing values and what token to use to fill missing values) Bag features are treated in the same way of set features, with the only difference being that the matrix had float values (frequencies). Sequence features are transformed into an integer valued matrix of size n x l (where n is the size of the dataset and l is the minimum of the length of the longest sequence and a sequence_length_limit parameter) and added to HDF5 with a key that reflects the name of column in the CSV. The way sets are mapped into integers consists in first using a formatter to map from strings to sequences of tokens (by default this is done by splitting on spaces). Then a a dictionary of all the different token strings present in the column of the CSV is collected, then they are ranked by frequency and an increasing integer ID is assigned to them from the most frequent to the most rare (with 0 being assigned to <PAD> used for padding and 1 assigned to <UNK> item). The column name is added to the JSON file, with an associated dictionary containing 1. the mapping from integer to string ( idx2str ) 2. the mapping from string to id ( str2idx ) 3. the mapping from string to frequency ( str2freq ) 4. the maximum length of all sequences ( sequence_length_limit ) 5. additional preprocessing information (by default how to fill missing values and what token to use to fill missing values) Text features are treated in the same way of sequence features, with a couple differences. Two different formatting/splitting happen, one that splits at every character and one that uses a spaCy based tokenizer (and removes stopwords) are used, and two different key are added to the HDF5 file, one containing the matrix of characters and one containing the matrix of words. The same thing happens in the JSON file, where there are dictionaries for mapping characters to integers (and the inverse) and words to integers (and their inverse). In the model definition you are able to specify which level of representation to use, if the character level or the word level. Timeseries features are treated in the same way of sequence features, with the only difference being that the matrix in the HDF5 file does not have integer values, but float values. Moreover, there is no need for any mapping in the JSON file. Image features are transformed into a int8 valued tensor of size n x h x w x c (where n is the size of the dataset and h x w is a specific resizing of the image that can be set, and c is the number of color channels) and added to HDF5 with a key that reflects the name of column in the CSV. The column name is added to the JSON file, with an associated dictionary containing preprocessing information about the sizes of the resizing.",
      "title": "Data Preprocessing"
    },
    {
      "location": "user_guide/#csv-format",
      "text": "Ludwig uses Pandas under the hood to read the UTF-8 encoded CSV files. Pandas tries to automatically identify the separator (generally ',' ) from the data. The default escape character is '\\' . For example, if ',' is the column separator and one of your data columns has a ',' in it, Pandas would fail to load the data properly. To handle such cases, we expect the values in the columns to be escaped with backslashes (replace ',' in the data with '\\\\,' ).",
      "title": "CSV Format"
    },
    {
      "location": "user_guide/#data-postprocessing",
      "text": "The JSON file obtained from preprocessing is used also for postprocessing: Ludwig models return output predictions and, depending on their datatype they are mapped back into the original space. Numerical and timeseries are returned as they are, while category, set, sequence, and text features output integers, those integers are mapped back into the original tokens / names using the idx2str in the JSON file. When you run experiment or predict you will find both a CSV file for each output containing the mapped predictions, a probability CSV file containing the probability of that prediction, a probabilities CSV file containing the probabilities for all alternatives (for instance, the probabilities of all the categories in case of a categorical feature). You will also find the unmapped NPY files. If you don't need them you can use the --skip_save_unprocessed_output argument.",
      "title": "Data Postprocessing"
    },
    {
      "location": "user_guide/#model-definition",
      "text": "The model definition is the core of Ludwig. It is a dictionary that contains all the information needed to build and train a Ludwig model. It mixes ease of use, by means of reasonable defaults, with flexibility, by means of detailed control over the parameters of your model. It is provided to both experiment and train commands either as a string ( --model_definition ) or as a file ( --model_definition_file ). The string or the content of the file will be parsed by PyYAML into a dictionary in memory, so any style of YAML accepted by the parser is considered to be valid, so both multiline and oneline formats are accepted. For instance a list of dictionaries can be written both as mylist : [{ name : item1 , score : 2 }, { name : item2 , score : 1 }, { name : item3 , score : 4 }] or as: mylist : - name : item1 score : 2 - name : item2 score : 1 - name : item3 score : 4 The structure of the model definition file is a dictionary with five keys: input_features : [] combiner : {} output_features : [] training : {} preprocessing : {} Only input_features and output_features are required, the other three fields have default values, but you are free to modify them.",
      "title": "Model Definition"
    },
    {
      "location": "user_guide/#input-features",
      "text": "The input_features list contains a list of dictionaries, each of them containing two required fields name and type . name is the name of the feature and is the same name of the column of the CSV input file, type is one of the supported datatypes. Input features may have different ways to be encoded and the parameter to decide it is encoder . All the other parameters you specify in an input feature will be passed as parameters to the function that build the encoder, and each encoder can have different parameters. For instance a sequence feature can be encoded by a stacked_cnn or by and rnn , but only the stacked_cnn will accept the parameter num_filters while only the rnn will accept the parameter bidirectional . A list of all the encoders available for all the datatypes alongside with the description of all parameters will be provided in the datatype-specific sections. Some datatypes have only one type of encoder, so you are not required to specify it. The role of the encoders is to map inputs into tensors, usually vectors in the case of datatype without a temporal / sequential aspect, matrices in case there is a temporal / sequential aspect or higher rank tensors in case there is a spatial or a spatio-temporal aspect to the input data. Different configurations of the same encoder may return a tensor with different rank, for instance a sequential encoder may return a vector of size h that is either the final vector of a sequence or the result of pooling over the sequence length, or it can return a matrix of size l x h where l is the length of the sequence and h is the hidden dimension if you specify the pooling reduce operation ( reduce_output ) to be null . For the sake of simplicity you can imagine the output to be a vector in most of the cases, but there is a reduce_output parameter one can specify to change the default behavior. An additional feature that ludwig provides is the option to have tied weights between different encoders. For instance if my model takes two sentences as input and return the probability of their entailment, I may want to encode both sentences with the same encoder. The way to do it is by specifying the tied-weights parameter of the second feature you define to be the name of the first feature you defined. input_features : - name : sentence1 type : text - name : sentence2 type : text tied_weights : sentence1 If you specify a name of an input feature that has not been defined yet, it will result in an error. Also, in order to be able to have tied weights, all encoder parameters have to be identical between the two input features.",
      "title": "Input features"
    },
    {
      "location": "user_guide/#combiner",
      "text": "Combiners are part of the model that take all the outputs of the different input features and combine them in a single representation that is passed to the outputs. You can specify which one to use in the combiner section of the model definition. Different combiners implement different combination logic, but the default one concat just concatenates all outputs of input feature encoders and optionally passes the concatenation through fully connected layers, with the output of the last layer being forwarded to the outputs decoders. +-----------+ |Input | |Feature 1 +-+ +-----------+ | +---------+ +-----------+ | +------+ |Fully | |... +--->Concat+--->Connected+-> +-----------+ | +------+ |Layers | +-----------+ | +---------+ |Input +-+ |Feature N | +-----------+ For the sake of simplicity you can imagine the both inputs and outputs are vectors in most of the cases, but there are reduce_input and reduce_output parameters to specify to change the default behavior.",
      "title": "Combiner"
    },
    {
      "location": "user_guide/#output-features",
      "text": "The output_features list has the same structure of the input_features list: it is a list of dictionaries containing a name and a type . They represent outputs / targets that you want your model to predict. In most machine learning tasks you want to predict only one target variable, but in Ludwig you are allowed to specify as many outputs as you want and they are going to be optimized in a multi-task fashion, using a weighted sum of their losses as a combined loss to optimize. Instead of having encoders , output features have decoders , but most of them have only one decoder so you don't have to specify it. Decoders take the output of the combiner as input, process it further, for instance passing it through fully connected layers, and finally predict values and compute a loss and some measures (depending on the datatype different losses and measures apply). Decoders have additional parameters, in particular loss that allows you to specify a different loss to optimize for this specific decoder, for instance numerical features support both mean_squared_error and mean_absolute_error as losses. Details about the available decoders and losses alongside with the description of all parameters will be provided in the datatype-specific sections. For the sake of simplicity you can imagine the input coming from the combiner to be a vector in most of the cases, but there is a reduce_input parameter one can specify to change the default behavior.",
      "title": "Output Features"
    },
    {
      "location": "user_guide/#output-features-dependencies",
      "text": "An additional feature that Ludwig provides is the concept of dependency between output_features . You can specify a list of output features as dependencies when you write the dictionary of a specific feature. At model building time Ludwig checks that no cyclic dependency exists. If you do so Ludwig will concatenate all the final representations before the prediction of those output features to the original input of the decoder. The reason is that if different output features have a causal dependency, knowing which prediction has been made for one can help making the prediction of the other. For instance if two output features are one coarse grained category and one fine-grained category that are in a hierarchical structure with each other, knowing the prediction made for coarse grained restricts the possible categories to predict for the fine-grained. In this case the following model definition structure can be used: output_features : - name : coarse_class type : category num_fc_layers : 2 fc_size : 64 - name : fine_class type : category dependencies : - coarse_class num_fc_layers : 1 fc_size : 64 Assuming the input coming from the combiner has hidden dimension h 128, there are two fully connected layers that return a vector with hidden size 64 at the end of the coarse_class decoder (that vector will be used for the final layer before projecting in the output coarse_class space) In the decoder of fine_class , the 64 dimensional vector of coarse_class will be concatenated to the combiner output vector, making a vector of hidden size 192 that will be passed through a fully connected layer and the 64 dimensional output will be used for the final layer before projecting in the output class space of the fine_class .",
      "title": "Output Features Dependencies"
    },
    {
      "location": "user_guide/#training",
      "text": "The training section of the model definition lets you specify some parameters of the training process, like for instance the number of epochs or the learning rate. These are the available training parameters: batch_size (default 128 ): size of the batch used for training the model. eval_batch_size (default 0 ): size of the batch used for evaluating the model. If it is 0 , the same value of batch_size is used. This is usefult to speedup evaluation with a much bigger batch size than training, if enough memory is available, or to decrease the batch size when sampled_softmax_cross_entropy is used as loss for sequential and categorical features with big vocabulary sizes (evaluation needs to be performed on the full vocabulary, so a much smaller batch size may be needed to fit the activation tensors in memory). epochs (default 100 ): number of epochs the training process will run for. early_stop (default 5 ): if there's a validation set, number of epochs of patience without an improvement on the validation measure before the training is stopped. optimizer (default {type: adam, beta1: 0.9, beta2: 0.999, epsilon: 1e-08} ): which optimizer to use with the relative parameters. The available optimizers are: sgd (or stochastic_gradient_descent , gd , gradient_descent , they are all the same), adam , adadelta , adagrad , adagradda , momentum , ftrl , proximalgd , proximaladagrad , rmsprop . To know their parameters check TensorFlow's optimizer documentation . learning_rate (default 0.001 ): the learning rate to use. decay (default false ): if to use exponential decay of the learning rate or not. decay_rate (default 0.96 ): the rate of the exponential learning rate decay. decay_steps (default 10000 ): the number of steps of the exponential learning rate decay. staircase (default false ): decays the learning rate at discrete intervals. regularization_lambda (default 0 ): the lambda parameter used for adding a l2 regularization loss to the overall loss. dropout_rate (default 0.0 ): the probability to drop neurons in dropout. The dropout_rate is used throughout the whole model, but to decide which parts of the model will use it, use the dropout boolean parameter available in each encoder, combiner and decoder. reduce_learning_rate_on_plateau (default 0 ): if there's a validation set, how many times to reduce the learning rate when a plateau of validation measure is reached. reduce_learning_rate_on_plateau_patience (default 5 ): if there's a validation set, number of epochs of patience without an improvement on the validation measure before reducing the learning rate. reduce_learning_rate_on_plateau_rate (default 0.5 ): if there's a validation set, the reduction rate of the learning rate. increase_batch_size_on_plateau (default 0 ): if there's a validation set, how many times to increase the batch size when a plateau of validation measure is reached. increase_batch_size_on_plateau_patience (default 5 ): if there's a validation set, number of epochs of patience without an improvement on the validation measure before increasing the learning rate. increase_batch_size_on_plateau_rate (default 2 ): if there's a validation set, the increase rate of the batch size. increase_batch_size_on_plateau_max (default 512 ): if there's a validation set, the maximum value of batch size. validation_field (default combined ): when there is more than one output feature, which one to use for computing if there was an improvement on validation. The measure to use to determine if there was an improvement can be set with the validation_measure parameter. Different datatypes have different available measures, refer to the datatype-specific section for more details. combined indicates the use the combination of all features. For instance the combination of combined and loss as measure uses a decrease in the combined loss of all output features to check for improvement on validation, while combined and accuracy considers on how many datapoints the predictions for all output features were correct (but consider that for some features, for instance numeric there is no accuracy measure, so you should use accuracy only if all your output features have an accuracy measure). validation_measure: (default accuracy ): the measure to use to determine if there was an improvement. The measure is considered for the output feature specified in validation_field . Different datatypes have different available measures, refer to the datatype-specific section for more details. bucketing_field (default null ): when not null , when creating batches, instead of shuffling randomly, the length along the last dimension of the matrix of the specified input feature is used for bucketing datapoints and then randomly shuffled datapoints from the same bin are sampled. Padding is trimmed to the longest datapoint in the batch. The specified feature should be either a sequence or text feature and the encoder encoding it has to be rnn . When used, bucketing improves speed of rnn encoding up to 1.5x, depending on the length distribution of the inputs. learning_rate_warmup_epochs (default 1 ): It's the number or training epochs where learning rate warmup will be used. It is calculated as `described in [Accurate, Large Minibatch SGD: Training ImageNet in 1 Hour](https://arxiv.org/abs/1706.02677). In the paper the authors suggest 6` epochs of warmup, that parameter is suggested for large datasets and big batches.",
      "title": "Training"
    },
    {
      "location": "user_guide/#optimizers-details",
      "text": "",
      "title": "Optimizers details"
    },
    {
      "location": "user_guide/#preprocessing",
      "text": "The preprocessing section of the model definition makes it possible to specify datatype specific parameters to perform data preprocessing. The preprocessing dictionary contains one key of each datatype, but you have to specify only the ones that apply to your case, the other ones will be kept as defaults. Moreover, the preprocessing dictionary contains parameters related to how to split the data that are not feature specific. force_split (default false ): if true the split column in the CSV data file is ignored and the dataset is randomly split. If false the split column is used if available. split_probabilities (default [0.7, 0.1, 0.2] ): the proportion of the CSV data to end up in training, validation and test. The three values have to sum up to one. stratify (default null ): if null the split is random, otherwise you can specify the name of a category feature and the split will be stratified on that feature. Example preprocessing dictionary (showing default values): preprocessing : force_split : false split_probabilities : [ 0.7 , 0.1 , 0.2 ] stratify : null category : { ... } sequence : { ... } text : { ... } ... The details about the preprocessing parameters that each datatype accepts will be provided in the datatype-specific sections. It is important to point out that different features within the same datatype may require different preprocessing. For instance a document classification model may have two text input features, one for the title of the document and one for the body. As the length of the title is much shorter than the length of the body, the parameter word_length_limit should be set to 10 for the title and 2000 for the body, but both of them share the same parameter most_common_words with value 10000. The way to do this is adding a preprocessing key inside the title input_feature dictionary and one in the body input feature dictionary containing the desired parameter and value. The model definition will look like: preprocessing : text : most_common_word : 10000 input_features : - name : title type : text preprocessing : word_length_limit : 20 - name : body type : text preprocessing : word_length_limit : 2000",
      "title": "Preprocessing"
    },
    {
      "location": "user_guide/#binary-features",
      "text": "",
      "title": "Binary Features"
    },
    {
      "location": "user_guide/#binary-features-preprocessing",
      "text": "Binary features are directly transformed into a binary valued vector of length n (where n is the size of the dataset) and added to HDF5 with a key that reflects the name of column in the CSV. No additional information about them is available in the JSON metadata file. The parameters available for preprocessing are missing_value_strategy (default fill_with_const ): what strategy to follow when there's a missing value in a binary column. The value should be one of fill_with_const (replaces the missing value with a specific value specified with the fill_value parameter), fill_with_mode (replaces the missing values with the most frequent value in the column), fill_with_mean (replaces the missing values with the mean of the values in the column), backfill (replaces the missing values with the next valid value). fill_value (default 0 ): the value to replace the missing values with in case the missing_value_strategy is fill-value .",
      "title": "Binary Features Preprocessing"
    },
    {
      "location": "user_guide/#binary-input-features-and-encoders",
      "text": "Binary features have no encoder, the raw binary values coming from the input placeholders are just returned as outputs. By consequence there are no encoding parameters. Inputs are of size b while outputs are of size b x 1 where b is the batch size. Example binary feature entry in the output features list: name : binary_csv_column_name type : binary",
      "title": "Binary Input Features and Encoders"
    },
    {
      "location": "user_guide/#binary-output-features-and-decoders",
      "text": "Binary features can be used when a binary classification needs to be performed or when the output is a single probability. There is only one decoder available for binary features and it is a (potentially empty) stack of fully connected layers, followed by a projection into a single number followed by a sigmoid function. These are the available parameters of a binary output feature reduce_inputs (default sum ): defines how to reduce an input that is not a vector, but a matrix or a higher order tensor, on the first dimension 9second if you count the batch dimension). Available values are: sum , mean or avg , max , concat (concatenates along the first dimension), last (returns the last vector of the first dimension). dependencies (default [] ): the output features this one is dependent on. For a detailed explanation refer to Output Features Dependencies . reduce_dependencies (default sum ): defines how to reduce the output of a dependent feature that is not a vector, but a matrix or a higher order tensor, on the first dimension 9second if you count the batch dimension). Available values are: sum , mean or avg , max , concat (concatenates along the first dimension), last (returns the last vector of the first dimension). loss (default {type: cross_entropy, confidence_penalty: 0, robust_lambda: 0} ): is a dictionary containing a loss type and its hyperparameters. The only available loss type is cross_entropy (cross entropy), and the two optional parameters are confidence_penalty (an additional term that penalizes too confident predictions by adding a a * (max_entropy - entropy) / max_entropy term to the loss, where a is the value of this parameter) and robust_lambda (replaces the loss with (1 - robust_lambda) * loss + robust_lambda / 2 which is useful in case of noisy labels). These are the available parameters of a binary output feature decoder fc_layers (default null ): it is a list of dictionaries containing the parameters of all the fully connected layers. The length of the list determines the number of stacked fully connected layers and the content of each dictionary determines the parameters for a specific layer. The available parameters for each layer are: fc_size , norm , activation , dropout , initializer and regularize . If any of those values is missing from the dictionary, the default one specified as a parameter of the decoder will be used instead. num_fc_layers (default 0): this is the number of stacked fully connected layers that the input to the feature passes through. Their output is projected in the feature's output space. fc_size (default 256 ): if a fc_size is not already specified in fc_layers this is the default fc_size that will be used for each layer. It indicates the size of the output of a fully connected layer. activation (default relu ): if an activation is not already specified in fc_layers this is the default activation that will be used for each layer. It indicates the activation function applied to the output. norm (default null ): if a norm is not already specified in fc_layers this is the default norm that will be used for each layer. It indicates the norm of the output and it can be null , batch or layer . dropout (default false ): determines if there should be a dropout layer after each layer. initializer (default null ): the initializer to use. If null , the default initialized of each variable is used ( glorot_uniform in most cases). Options are: constant , identity , zeros , ones , orthogonal , normal , uniform , truncated_normal , variance_scaling , glorot_normal , glorot_uniform , xavier_normal , xavier_uniform , he_normal , he_uniform , lecun_normal , lecun_uniform . Alternatively it is possible to specify a dictionary with a key type that identifies the type of initializer and other keys for its parameters, e.g. {type: normal, mean: 0, stddev: 0} . To know the parameters of each initializer, please refer to TensorFlow's documentation . regularize (default true ): if true the wights of the layers are added to the set of weights that get regularized by a regularization loss (if the regularization_lambda in training is greater than 0). threshold (default 0.5 ): The threshold above (greater or equal) which the predicted output of the sigmoid will be mapped to 1. Example binary feature entry (with default parameters) in the output features list: name : binary_csv_column_name type : binary reduce_inputs : sum dependencies : [] reduce_dependencies : sum loss : type : cross_entropy confidence_penalty : 0 robust_lambda : 0 fc_layers : null num_fc_layers : 0 fc_size : 256 activation : relu norm : null dropout : false initializer : null regularize : true threshold : 0.5",
      "title": "Binary Output Features and Decoders"
    },
    {
      "location": "user_guide/#binary-features-measures",
      "text": "The only measures that are calculated every epoch and are available for binary features are the accuracy and the loss itself. You can set either of them as validation_measure in the training section of the model definition if you set the validation_field to be the name of a binary feature.",
      "title": "Binary Features Measures"
    },
    {
      "location": "user_guide/#numerical-features",
      "text": "",
      "title": "Numerical Features"
    },
    {
      "location": "user_guide/#numerical-features-preprocessing",
      "text": "Numerical features are directly transformed into a float valued vector of length n (where n is the size of the dataset) and added to HDF5 with a key that reflects the name of column in the CSV. No additional information about them is available in the JSON metadata file. Parameters available for preprocessing are missing_value_strategy (default fill_with_const ): what strategy to follow when there's a missing value in a binary column. The value should be one of fill_with_const (replaces the missing value with a specific value specified with the fill_value parameter), fill_with_mode (replaces the missing values with the most frequent value in the column), fill_with_mean (replaces the missing values with the mean of the values in the column), backfill (replaces the missing values with the next valid value). fill_value (default 0 ): the value to replace the missing values with in case the missing_value_strategy is fill-value . normalization (default None ): technique to be used when normalizing the numerical feature types. The available options are None , zscore and minmax . If the value is None no normalization is performed. If the value is zscore , the mean and standard deviation are computed so that values are shifted to have zero mean and 1 standard deviation. If the value is minmax , minimun and maximum values are computed and the minimum is subtracted from values and the result is divided by difference between maximum and minimum.",
      "title": "Numerical Features Preprocessing"
    },
    {
      "location": "user_guide/#numerical-input-features-and-encoders",
      "text": "Numerical features have one encoder, the raw float values coming from the input placeholders are passed through a single neuron for scaling purposes, (optionally) passed through a normalization layer (either null , batch_norm , or layer_norm ) and returned as outputs. Inputs are of size b while outputs are fo size b x 1 where b is the batch size. The available encoder parameters are: norm' (default null ): norm to apply after the single neuron. It can be null , batch or layer . tied_weights (default null ): name of the input feature to tie the weights the encoder with. It needs to be the name of a feature of the same type and with the same encoder parameters. Example numerical feature entry in the output features list: name : numerical_csv_column_name type : numerical norm : null tied_weights : null",
      "title": "Numerical Input Features and Encoders"
    },
    {
      "location": "user_guide/#numerical-output-features-and-decoders",
      "text": "Numerical features can be used when a regression needs to be performed. There is only one decoder available for numerical features and it is a (potentially empty) stack of fully connected layers, followed by a projection into a single number. These are the available parameters of a numerical output feature reduce_inputs (default sum ): defines how to reduce an input that is not a vector, but a matrix or a higher order tensor, on the first dimension 9second if you count the batch dimension). Available values are: sum , mean or avg , max , concat (concatenates along the first dimension), last (returns the last vector of the first dimension). dependencies (default [] ): the output features this one is dependent on. For a detailed explanation refer to Output Features Dependencies . reduce_dependencies (default sum ): defines how to reduce the output of a dependent feature that is not a vector, but a matrix or a higher order tensor, on the first dimension 9second if you count the batch dimension). Available values are: sum , mean or avg , max , concat (concatenates along the first dimension), last (returns the last vector of the first dimension). loss (default {type: mean_squared_error} ): is a dictionary containing a loss type . The available losses type are mean_squared_error and mean_absolute_error . These are the available parameters of a numerical output feature decoder fc_layers (default null ): it is a list of dictionaries containing the parameters of all the fully connected layers. The length of the list determines the number of stacked fully connected layers and the content of each dictionary determines the parameters for a specific layer. The available parameters for each layer are: fc_size , norm , activation , dropout , initializer and regularize . If any of those values is missing from the dictionary, the default one specified as a parameter of the decoder will be used instead. num_fc_layers (default 0): this is the number of stacked fully connected layers that the input to the feature passes through. Their output is projected in the feature's output space. fc_size (default 256 ): if a fc_size is not already specified in fc_layers this is the default fc_size that will be used for each layer. It indicates the size of the output of a fully connected layer. activation (default relu ): if an activation is not already specified in fc_layers this is the default activation that will be used for each layer. It indicates the activation function applied to the output. norm (default null ): if a norm is not already specified in fc_layers this is the default norm that will be used for each layer. It indicates the norm of the output and it can be null , batch or layer . dropout (default false ): determines if there should be a dropout layer after each layer. initializer (default null ): the initializer to use. If null , the default initialized of each variable is used ( glorot_uniform in most cases). Options are: constant , identity , zeros , ones , orthogonal , normal , uniform , truncated_normal , variance_scaling , glorot_normal , glorot_uniform , xavier_normal , xavier_uniform , he_normal , he_uniform , lecun_normal , lecun_uniform . Alternatively it is possible to specify a dictionary with a key type that identifies the type of initializer and other keys for its parameters, e.g. {type: normal, mean: 0, stddev: 0} . To know the parameters of each initializer, please refer to TensorFlow's documentation . regularize (default true ): if true the weights of the layers are added to the set of weights that get regularized by a regularization loss (if the regularization_lambda in training is greater than 0). clip (default null ): If not null it specifies a minimum and maximum value the predictions will be clipped to. The value can be either a list or a tuple of length 2, with the first value representing the minimum and the second the maximum. For instance (-5,5) will make it so that all predictions will be clipped in the [-5,5] interval. Example numerical feature entry (with default parameters) in the output features list: name : numerical_csv_column_name type : numerical reduce_inputs : sum dependencies : [] reduce_dependencies : sum loss : type : mean_squared_error fc_layers : null num_fc_layers : 0 fc_size : 256 activation : relu norm : null dropout : false initializer : null regularize : true",
      "title": "Numerical Output Features and Decoders"
    },
    {
      "location": "user_guide/#numerical-features-measures",
      "text": "The measures that are calculated every epoch and are available for numerical features are mean_squared_error , mean_absolute_error , r2 and the loss itself. You can set either of them as validation_measure in the training section of the model definition if you set the validation_field to be the name of a numerical feature.",
      "title": "Numerical Features Measures"
    },
    {
      "location": "user_guide/#category-features",
      "text": "",
      "title": "Category Features"
    },
    {
      "location": "user_guide/#category-features-preprocessing",
      "text": "Category features are transformed into an integer valued vector of size n (where n is the size of the dataset) and added to HDF5 with a key that reflects the name of column in the CSV. The way categories are mapped into integers consists in first collecting a dictionary of all the different category strings present in the column of the CSV, then rank them by frequency and then assign them an increasing integer ID from the most frequent to the most rare (with 0 being assigned to a <UNK> token). The column name is added to the JSON file, with an associated dictionary containing 1. the mapping from integer to string ( idx2str ) 2. the mapping from string to id ( str2idx ) 3. the mapping from string to frequency ( str2freq ) 4. the size of the set of all tokens ( vocab_size ) 4. additional preprocessing information (by default how to fill missing values and what token to use to fill missing values) The parameters available for preprocessing are missing_value_strategy (default fill_with_const ): what strategy to follow when there's a missing value in a binary column. The value should be one of fill_with_const (replaces the missing value with a specific value specified with the fill_value parameter), fill_with_mode (replaces the missing values with the most frequent value in the column), fill_with_mean (replaces the missing values with the mean of the values in the column), backfill (replaces the missing values with the next valid value). fill_value (default \"<UNK>\" ): the value to replace the missing values with in case the missing_value_strategy is fill-value . lowercase (default false ): if the string has to be lowercased before being handled by the formatter. most_common (default 10000 ): the maximum number of most common tokens to be considered. if the data contains more than this amount, the most infrequent tokens will be treated as unknown.",
      "title": "Category Features Preprocessing"
    },
    {
      "location": "user_guide/#category-input-features-and-encoders",
      "text": "Category features have one encoder, the raw integer values coming from the input placeholders are mapped to either dense or sparse embeddings (one-hot encodings) and returned as outputs. Inputs are of size b while outputs are fo size b x h where b is the batch size and h is the dimensionality of the embeddings. The available encoder parameters are representation' (default dense ): the possible values are dense and sparse . dense means the embeddings are initialized randomly, sparse means they are initialized to be one-hot encodings. embedding_size (default 256 ): it is the maximum embedding size, the actual size will be min(vocabulary_size, embedding_size) for dense representations and exactly vocabulary_size for the sparse encoding, where vocabulary_size is the number of different strings appearing in the training set in the column the feature is named after (plus 1 for <UNK> ). embeddings_on_cpu (default false ): by default embeddings matrices are stored on GPU memory if a GPU is used, as it allows for faster access, but in some cases the embedding matrix may be really big and this parameter forces the placement of the embedding matrix in regular memory and the CPU is used to resolve them, slightly slowing down the process as a result of data transfer between CPU and GPU memory. pretrained_embeddings (default null ): by default dense embeddings are initialized randomly, but this parameter allow to specify a path to a file containing embeddings in the GloVe format . When the file containing the embeddings is loaded, only the embeddings with labels present in the vocabulary are kept, the others are discarded. If the vocabulary contains strings that have no match in the embeddings file, their embeddings are initialized with the average of all other embedding plus some random noise to make them different from each other. This parameter has effect only if representation is dense . embeddings_trainable (default true ): If true embeddings are trained during the training process, if false embeddings are fixed. It may be useful when loading pretrained embeddings for avoiding finetuning them. This parameter has effect only for representation is dense as sparse one-hot encodings are not trainable. dropout (default false ): determines if there should be a dropout layer after embedding. initializer (default null ): the initializer to use. If null , the default initialized of each variable is used ( glorot_uniform in most cases). Options are: constant , identity , zeros , ones , orthogonal , normal , uniform , truncated_normal , variance_scaling , glorot_normal , glorot_uniform , xavier_normal , xavier_uniform , he_normal , he_uniform , lecun_normal , lecun_uniform . Alternatively it is possible to specify a dictionary with a key type that identifies the type of initializer and other keys for its parameters, e.g. {type: normal, mean: 0, stddev: 0} . To know the parameters of each initializer, please refer to TensorFlow's documentation . regularize (default true ): if true the embedding weights are added to the set of weights that get regularized by a regularization loss (if the regularization_lambda in training is greater than 0). tied_weights (default null ): name of the input feature to tie the weights the encoder with. It needs to be the name of a feature of the same type and with the same encoder parameters. Example category feature entry in the input features list: name : category_csv_column_name type : category representation : dense embedding_size : 256 embeddings_on_cpu : false pretrained_embeddings : null embeddings_trainable : true dropout : false initializer : null regularize : true tied_weights : null",
      "title": "Category Input Features and Encoders"
    },
    {
      "location": "user_guide/#category-output-features-and-decoders",
      "text": "Category features can be used when a multi-class classification needs to be performed. There is only one decoder available for category features and it is a (potentially empty) stack of fully connected layers, followed by a projection into a vector of size of the number of available classes, followed by a softmax. +--------------+ +---------+ +-----------+ |Combiner | |Fully | |Projection | +-------+ |Output +--->Connected+--->into Output+--->Softmax| |Representation| |Layers | |Space | +-------+ +--------------+ +---------+ +-----------+ These are the available parameters of a category output feature reduce_inputs (default sum ): defines how to reduce an input that is not a vector, but a matrix or a higher order tensor, on the first dimension 9second if you count the batch dimension). Available values are: sum , mean or avg , max , concat (concatenates along the first dimension), last (returns the last vector of the first dimension). dependencies (default [] ): the output features this one is dependent on. For a detailed explanation refer to Output Features Dependencies . reduce_dependencies (default sum ): defines how to reduce the output of a dependent feature that is not a vector, but a matrix or a higher order tensor, on the first dimension 9second if you count the batch dimension). Available values are: sum , mean or avg , max , concat (concatenates along the first dimension), last (returns the last vector of the first dimension). loss (default {type: softmax_cross_entropy, class_similarities_temperature: 0, class_weights: 1, confidence_penalty: 0, distortion: 1, labels_smoothing: 0, negative_samples: 0, robust_lambda: 0, sampler: null, unique: false} ): is a dictionary containing a loss type . The available losses type are softmax_cross_entropy and sampled_softmax_cross_entropy . These are the loss parameters confidence_penalty (default 0 ): penalizes overconfident predictions (low entropy) by adding an additional term that penalizes too confident predictions by adding a a * (max_entropy - entropy) / max_entropy term to the loss, where a is the value of this parameter. Useful in case of noisy labels. robust_lambda (default 0 ): replaces the loss with (1 - robust_lambda) * loss + robust_lambda / c where c is the number of classes, which is useful in case of noisy labels. class_weights (default 1 ): the value can be a vector of weights, one of each class, that is multiplied to the loss of the datapoints that have that class as ground truth. It is an alternative to oversampling in case of unbalanced class distribution. The ordering of the vector follows the category to integer ID mapping in the JSON metadata file (the <UNK> class needs to be included too). class_similarities (default null ): if not null it is a c x c matrix in the form of a list of lists that contains the mutual similarity of classes. It is used if class_similarities_temperature is greater than 0. The ordering of the vector follows the category to integer ID mapping in the JSON metadata file (the <UNK> class needs to be included too). class_similarities_temperature (default 0 ): is the temperature parameter of the softmax that is performed on each row of class_similarities . The output of that softmax is used to determine the supervision vector to provide instead of the one hot vector that would be provided otherwise for each datapoint. The intuition behind it is that errors between similar classes are more tollerable than errors between really different classes. labels_smoothing (default 0 ): If label_smoothing is nonzero, smooth the labels towards 1/num_classes : new_onehot_labels = onehot_labels * (1 - label_smoothing) + label_smoothing / num_classes . negative_samples (default 0 ): if type is sampled_softmax_cross_entropy , this parameter indicates how many negative samples to use. sampler (default null ): options are fixed_unigram , uniform , log_uniform , learned_unigram . For a detailed description of the samplers refer to TensorFlow's documentation . distortion (default 1 ): when loss is sampled_softmax_cross_entropy and the sampler is either unigram or learned_unigram this is used to skew the unigram probability distribution. Each weight is first raised to the distortion's power before adding to the internal unigram distribution. As a result, distortion = 1.0 gives regular unigram sampling (as defined by the vocab file), and distortion = 0.0 gives a uniform distribution. unique (default false ): Determines whether all sampled classes in a batch are unique. These are the available parameters of a category output feature decoder fc_layers (default null ): it is a list of dictionaries containing the parameters of all the fully connected layers. The length of the list determines the number of stacked fully connected layers and the content of each dictionary determines the parameters for a specific layer. The available parameters for each layer are: fc_size , norm , activation , dropout , initializer and regularize . If any of those values is missing from the dictionary, the default one specified as a parameter of the decoder will be used instead. num_fc_layers (default 0): this is the number of stacked fully connected layers that the input to the feature passes through. Their output is projected in the feature's output space. fc_size (default 256 ): if a fc_size is not already specified in fc_layers this is the default fc_size that will be used for each layer. It indicates the size of the output of a fully connected layer. activation (default relu ): if an activation is not already specified in fc_layers this is the default activation that will be used for each layer. It indicates the activation function applied to the output. norm (default null ): if a norm is not already specified in fc_layers this is the default norm that will be used for each layer. It indicates the norm of the output and it can be null , batch or layer . dropout (default false ): determines if there should be a dropout layer after each layer. initializer (default null ): the initializer to use. If null , the default initialized of each variable is used ( glorot_uniform in most cases). Options are: constant , identity , zeros , ones , orthogonal , normal , uniform , truncated_normal , variance_scaling , glorot_normal , glorot_uniform , xavier_normal , xavier_uniform , he_normal , he_uniform , lecun_normal , lecun_uniform . Alternatively it is possible to specify a dictionary with a key type that identifies the type of initializer and other keys for its parameters, e.g. {type: normal, mean: 0, stddev: 0} . To know the parameters of each initializer, please refer to TensorFlow's documentation . regularize (default true ): if true the weights of the layers are added to the set of weights that get regularized by a regularization loss (if the regularization_lambda in training is greater than 0). top_k (default 3 ): determines the parameter k , the number of categories to consider when computing the top_k measure. It computes accuracy but considering as a match if the true category appears in the first k predicted categories ranked by decoder's confidence. Example category feature entry (with default parameters) in the output features list: name : category_csv_column_name type : category reduce_inputs : sum dependencies : [] reduce_dependencies : sum loss : type : softmax_cross_entropy confidence_penalty : 0 robust_lambda : 0 class_weights : 1 class_similarities : null class_similarities_temperature : 0 labels_smoothing : 0 negative_samples : 0 sampler : null distortion : 1 unique : false fc_layers : null num_fc_layers : 0 fc_size : 256 activation : relu norm : null dropout : false initializer : null regularize : true top_k : 3",
      "title": "Category Output Features and Decoders"
    },
    {
      "location": "user_guide/#category-features-measures",
      "text": "The measures that are calculated every epoch and are available for category features are accuracy , top_k (computes accuracy considering as a match if the true category appears in the first k predicted categories ranked by decoder's confidence) and the loss itself. You can set either of them as validation_measure in the training section of the model definition if you set the validation_field to be the name of a category feature.",
      "title": "Category Features Measures"
    },
    {
      "location": "user_guide/#set-features",
      "text": "",
      "title": "Set Features"
    },
    {
      "location": "user_guide/#set-features-preprocessing",
      "text": "Set features are transformed into a binary (int8 actually) valued matrix of size n x l (where n is the size of the dataset and l is the minimum of the size of the biggest set and a max_size parameter) and added to HDF5 with a key that reflects the name of column in the CSV. The way sets are mapped into integers consists in first using a formatter to map from strings to sequences of set items (by default this is done by splitting on spaces). Then a a dictionary of all the different set item strings present in the column of the CSV is collected, then they are ranked by frequency and an increasing integer ID is assigned to them from the most frequent to the most rare (with 0 being assigned to <PAD> used for padding and 1 assigned to <UNK> item). The column name is added to the JSON file, with an associated dictionary containing 1. the mapping from integer to string ( idx2str ) 2. the mapping from string to id ( str2idx ) 3. the mapping from string to frequency ( str2freq ) 4. the maximum size of all sets ( max_set_size ) 5. additional preprocessing information (by default how to fill missing values and what token to use to fill missing values) The parameters available for preprocessing arehe parameters available for preprocessing are missing_value_strategy (default fill_with_const ): what strategy to follow when there's a missing value in a binary column. The value should be one of fill_with_const (replaces the missing value with a specific value specified with the fill_value parameter), fill_with_mode (replaces the missing values with the most frequent value in the column), fill_with_mean (replaces the missing values with the mean of the values in the column), backfill (replaces the missing values with the next valid value). fill_value (default 0 ): the value to replace the missing values with in case the missing_value_strategy is fill-value . format (default space ): defines how to map from the raw string content of the CSV column to a set of elements. The default value space splits the string on spaces. Other options are: underscore (splits on underscore), comma (splits on comma), json (decodes the string into a set or a list through a JSON parser). lowercase (default false ): if the string has to be lowercased before being handled by the formatter. most_common (default 10000 ): the maximum number of most common tokens to be considered. if the data contains more than this amount, the most infrequent tokens will be treated as unknown.",
      "title": "Set Features Preprocessing"
    },
    {
      "location": "user_guide/#set-input-features-and-encoders",
      "text": "Set features have one encoder, the raw binary values coming from the input placeholders are first transformed in sparse integer lists, then they are mapped to either dense or sparse embeddings (one-hot encodings), finally they are aggregated and returned as outputs. Inputs are of size b while outputs are fo size b x h where b is the batch size and h is the dimensionally of the embeddings. +-+ |0| +-----+ |0| +-+ |emb 2| +-----------+ |1| |2| +-----+ |Aggregation| |0+--->4+---->emb 4+--->Reduce +-> |1| |5| +-----+ |Operation | |1| +-+ |emb 5| +-----------+ |0| +-----+ +-+ The available encoder parameters are representation' (default dense ): the possible values are dense and sparse . dense means the embeddings are initialized randomly, sparse means they are initialized to be one-hot encodings. embedding_size (default 50 ): it is the maximum embedding size, the actual size will be min(vocabulary_size, embedding_size) for dense representations and exactly vocabulary_size for the sparse encoding, where vocabulary_size is the number of different strings appearing in the training set in the column the feature is named after (plus 1 for <UNK> ). embeddings_on_cpu (default false ): by default embeddings matrices are stored on GPU memory if a GPU is used, as it allows for faster access, but in some cases the embedding matrix may be really big and this parameter forces the placement of the embedding matrix in regular memory and the CPU is used to resolve them, slightly slowing down the process as a result of data transfer between CPU and GPU memory. pretrained_embeddings (default null ): by default dense embeddings are initialized randomly, but this parameter allow to specify a path to a file containing embeddings in the GloVe format . When the file containing the embeddings is loaded, only the embeddings with labels present in the vocabulary are kept, the others are discarded. If the vocabulary contains strings that have no match in the embeddings file, their embeddings are initialized with the average of all other embedding plus some random noise to make them different from each other. This parameter has effect only if representation is dense . embeddings_trainable (default true ): If true embeddings are trained during the training process, if false embeddings are fixed. It may be useful when loading pretrained embeddings for avoiding finetuning them. This parameter has effect only for representation is dense as sparse one-hot encodings are not trainable. dropout (default false ): determines if there should be a dropout layer before returning the encoder output. initializer (default null ): the initializer to use. If null , the default initialized of each variable is used ( glorot_uniform in most cases). Options are: constant , identity , zeros , ones , orthogonal , normal , uniform , truncated_normal , variance_scaling , glorot_normal , glorot_uniform , xavier_normal , xavier_uniform , he_normal , he_uniform , lecun_normal , lecun_uniform . Alternatively it is possible to specify a dictionary with a key type that identifies the type of initializer and other keys for its parameters, e.g. {type: normal, mean: 0, stddev: 0} . To know the parameters of each initializer, please refer to TensorFlow's documentation . regularize (default true ): if true the embedding weights are added to the set of weights that get regularized by a regularization loss (if the regularization_lambda in training is greater than 0). reduce_output (default sum ): describes the strategy to use to aggregate the embeddings of the items of the set. Possible values are sum , mean and sqrt (the weighted sum divided by the square root of the sum of the squares of the weights). tied_weights (default null ): name of the input feature to tie the weights the encoder with. It needs to be the name of a feature of the same type and with the same encoder parameters. Example set feature entry in the output features list: name : set_csv_column_name type : set representation : dense embedding_size : 50 embeddings_on_cpu : false pretrained_embeddings : null embeddings_trainable : true dropout : false initializer : null regularize : true reduce_output : sum tied_weights : null",
      "title": "Set Input Features and Encoders"
    },
    {
      "location": "user_guide/#set-output-features-and-decoders",
      "text": "Set features can be used when multi-label classification needs to be performed. There is only one decoder available for set features and it is a (potentially empty) stack of fully connected layers, followed by a projection into a vector of size of the number of available classes, followed by a sigmoid. +--------------+ +---------+ +-----------+ |Combiner | |Fully | |Projection | +-------+ |Output +--->Connected+--->into Output+--->Sigmoid| |Representation| |Layers | |Space | +-------+ +--------------+ +---------+ +-----------+ These are the available parameters of the set output feature reduce_inputs (default sum ): defines how to reduce an input that is not a vector, but a matrix or a higher order tensor, on the first dimension 9second if you count the batch dimension). Available values are: sum , mean or avg , max , concat (concatenates along the first dimension), last (returns the last vector of the first dimension). dependencies (default [] ): the output features this one is dependent on. For a detailed explanation refer to Output Features Dependencies . reduce_dependencies (default sum ): defines how to reduce the output of a dependent feature that is not a vector, but a matrix or a higher order tensor, on the first dimension 9second if you count the batch dimension). Available values are: sum , mean or avg , max , concat (concatenates along the first dimension), last (returns the last vector of the first dimension). loss (default {type: sigmoid_cross_entropy} ): is a dictionary containing a loss type . The available loss type is sigmoid_cross_entropy . These are the available parameters of a set output feature decoder fc_layers (default null ): it is a list of dictionaries containing the parameters of all the fully connected layers. The length of the list determines the number of stacked fully connected layers and the content of each dictionary determines the parameters for a specific layer. The available parameters for each layer are: fc_size , norm , activation , dropout , initializer and regularize . If any of those values is missing from the dictionary, the default one specified as a parameter of the decoder will be used instead. num_fc_layers (default 0): this is the number of stacked fully connected layers that the input to the feature passes through. Their output is projected in the feature's output space. fc_size (default 256 ): if a fc_size is not already specified in fc_layers this is the default fc_size that will be used for each layer. It indicates the size of the output of a fully connected layer. activation (default relu ): if an activation is not already specified in fc_layers this is the default activation that will be used for each layer. It indicates the activation function applied to the output. norm (default null ): if a norm is not already specified in fc_layers this is the default norm that will be used for each layer. It indicates the norm of the output and it can be null , batch or layer . dropout (default false ): determines if there should be a dropout layer after each layer. initializer (default null ): the initializer to use. If null , the default initialized of each variable is used ( glorot_uniform in most cases). Options are: constant , identity , zeros , ones , orthogonal , normal , uniform , truncated_normal , variance_scaling , glorot_normal , glorot_uniform , xavier_normal , xavier_uniform , he_normal , he_uniform , lecun_normal , lecun_uniform . Alternatively it is possible to specify a dictionary with a key type that identifies the type of initializer and other keys for its parameters, e.g. {type: normal, mean: 0, stddev: 0} . To know the parameters of each initializer, please refer to TensorFlow's documentation . regularize (default true ): if true the wights of the layers are added to the set of weights that get regularized by a regularization loss (if the regularization_lambda in training is greater than 0). threshold (default 0.5 ): The threshold above (greater or equal) which the predicted output of the sigmoid will be mapped to 1. Example set feature entry (with default parameters) in the output features list: name : set_csv_column_name type : set reduce_inputs : sum dependencies : [] reduce_dependencies : sum loss : type : sigmoid_cross_entropy fc_layers : null num_fc_layers : 0 fc_size : 256 activation : relu norm : null dropout : false initializer : null regularize : true threshold : 0.5",
      "title": "Set Output Features and Decoders"
    },
    {
      "location": "user_guide/#set-features-measures",
      "text": "The measures that are calculated every epoch and are available for category features are jaccard_index and the loss itself. You can set either of them as validation_measure in the training section of the model definition if you set the validation_field to be the name of a set feature.",
      "title": "Set Features Measures"
    },
    {
      "location": "user_guide/#bag-features",
      "text": "",
      "title": "Bag Features"
    },
    {
      "location": "user_guide/#bag-features-preprocessing",
      "text": "Bag features are treated in the same way of set features, with the only difference being that the matrix had float values (frequencies).",
      "title": "Bag Features Preprocessing"
    },
    {
      "location": "user_guide/#bag-input-features-and-encoders",
      "text": "Bag features have one encoder, the raw float values coming from the input placeholders are first transformed in sparse integer lists, then they are mapped to either dense or sparse embeddings (one-hot encodings), they are aggregated as a weighted sum, where the weights are the original float values, and finally returned as outputs. Inputs are of size b while outputs are fo size b x h where b is the batch size and h is the dimensionality of the embeddings. The parameters are the same used for set input features with the exception of reduce_output that does not apply in this case because the weighted sum already acts as a reducer.",
      "title": "Bag Input Features and Encoders"
    },
    {
      "location": "user_guide/#bag-output-features-and-decoders",
      "text": "There is no bag decoder available yet.",
      "title": "Bag Output Features and Decoders"
    },
    {
      "location": "user_guide/#bag-features-measures",
      "text": "As there is no decoder there is also no measure available yet for bag feature.",
      "title": "Bag Features Measures"
    },
    {
      "location": "user_guide/#sequence-features",
      "text": "",
      "title": "Sequence Features"
    },
    {
      "location": "user_guide/#sequence-features-preprocessing",
      "text": "Sequence features are transformed into an integer valued matrix of size n x l (where n is the size of the dataset and l is the minimum of the length of the longest sequence and a sequence_length_limit parameter) and added to HDF5 with a key that reflects the name of column in the CSV. The way sequences are mapped into integers consists in first using a formatter to map from strings to sequences of tokens (by default this is done by splitting on spaces). Then a a dictionary of all the different token strings present in the column of the CSV is collected, then they are ranked by frequency and an increasing integer ID is assigned to them from the most frequent to the most rare (with 0 being assigned to <PAD> used for padding and 1 assigned to <UNK> item). The column name is added to the JSON file, with an associated dictionary containing 1. the mapping from integer to string ( idx2str ) 2. the mapping from string to id ( str2idx ) 3. the mapping from string to frequency ( str2freq ) 4. the maximum length of all sequences ( sequence_length_limit ) 5. additional preprocessing information (by default how to fill missing values and what token to use to fill missing values) The parameters available for preprocessing are missing_value_strategy (default fill_with_const ): what strategy to follow when there's a missing value in a binary column. The value should be one of fill_with_const (replaces the missing value with a specific value specified with the fill_value parameter), fill_with_mode (replaces the missing values with the most frequent value in the column), fill_with_mean (replaces the missing values with the mean of the values in the column), backfill (replaces the missing values with the next valid value). fill_value (default \"\" ): the value to replace the missing values with in case the missing_value_strategy is fill_value . padding (default right ): the direction of the padding. right and left are available options. padding_symbol (default <PAD> ): the string used as a padding symbol. Is is mapped to the integer ID 0 in the vocabulary. unknown_symbol (default <UNK> ): the string used as a unknown symbol. Is is mapped to the integer ID 1 in the vocabulary. lowercase (default false ): if the string has to be lowercase before being handled by the formatter. format (default space ): defines how to map from the raw string content of the CSV column to a sequence of elements. The default value space splits the string on spaces. Other options are: underscore (splits on underscore), comma (splits on comma), json (decodes the string into a set or a list through a JSON parser). most_common (default 20000 ): the maximum number of most common tokens to be considered. if the data contains more than this amount, the most infrequent tokens will be treated as unknown. sequence_length_limit (default 256 ): the maximum length of the sequence. Sequences that are longer than this value will be truncated, while sequences that are shorter will be padded.",
      "title": "Sequence Features Preprocessing"
    },
    {
      "location": "user_guide/#sequence-input-features-and-encoders",
      "text": "Sequence features have several encoders and each of them has its own parameters. Inputs are of size b while outputs are fo size b x h where b is the batch size and h is the dimensionally of the output of the encoder. In case a representation for each element of the sequence is needed (for example for tagging them, or for using an attention mechanism), one can specify the parameter reduce_output to be null or None and the output will be a b x s x h tensor where s is the length of the sequence. Some encoders, because of their inner workings, may require additional parameters to be specified in order to obtain one representation for each element of the sequence. For instance the parallel_cnn encoder, by default pools and flattens the sequence dimension and then passes the flattened vector through fully connected layers, so in order to obtain the full tesnor one has to specify reduce_output: null . Sequence input feature parameters are encoder (default parallel_cnn ): the name of the encoder to use to encode the sequence. The available ones are embed , parallel_cnn , stacked_cnn , stacked_parallel_cnn , rnn , cnnrnn and passthrough (equivalent to specify None or null ). tied_weights (default null ): name of the input feature to tie the weights the encoder with. It needs to be the name of a feature of the same type and with the same encoder parameters.",
      "title": "Sequence Input Features and Encoders"
    },
    {
      "location": "user_guide/#embed-encoder",
      "text": "The embed encoder simply maps each integer in the sequence to an embedding, creating a b x s x h tensor where b is the batch size, s is the length of the sequence and h is the embedding size. The tensor is reduced along the s dimension to obtain a single vector of size h for each element of the batch. If you want to output the full b x s x h tensor, you can specify reduce_output: null . +------+ |Emb 12| +------+ +--+ |Emb 7 | |12| +------+ |7 | |Emb 43| +-----------+ |43| +------+ |Aggregation| |65+--->Emb 65+--->Reduce +-> |23| +------+ |Operation | |4 | |Emb 23| +-----------+ |1 | +------+ +--+ |Emb 4 | +------+ |Emb 1 | +------+ These are the parameters available for the embed encoder representation' (default dense ): the possible values are dense and sparse . dense means the embeddings are initialized randomly, sparse means they are initialized to be one-hot encodings. embedding_size (default 50 ): it is the maximum embedding size, the actual size will be min(vocabulary_size, embedding_size) for dense representations and exactly vocabulary_size for the sparse encoding, where vocabulary_size is the number of different strings appearing in the training set in the column the feature is named after (plus 1 for <UNK> ). embeddings_on_cpu (default false ): by default embeddings matrices are stored on GPU memory if a GPU is used, as it allows for faster access, but in some cases the embedding matrix may be really big and this parameter forces the placement of the embedding matrix in regular memory and the CPU is used to resolve them, slightly slowing down the process as a result of data transfer between CPU and GPU memory. pretrained_embeddings (default null ): by default dense embeddings are initialized randomly, but this parameter allow to specify a path to a file containing embeddings in the GloVe format . When the file containing the embeddings is loaded, only the embeddings with labels present in the vocabulary are kept, the others are discarded. If the vocabulary contains strings that have no match in the embeddings file, their embeddings are initialized with the average of all other embedding plus some random noise to make them different from each other. This parameter has effect only if representation is dense . embeddings_trainable (default true ): If true embeddings are trained during the training process, if false embeddings are fixed. It may be useful when loading pretrained embeddings for avoiding finetuning them. This parameter has effect only for representation is dense as sparse one-hot encodings are not trainable. dropout (default false ): determines if there should be a dropout layer before returning the encoder output. initializer (default null ): the initializer to use. If null , the default initialized of each variable is used ( glorot_uniform in most cases). Options are: constant , identity , zeros , ones , orthogonal , normal , uniform , truncated_normal , variance_scaling , glorot_normal , glorot_uniform , xavier_normal , xavier_uniform , he_normal , he_uniform , lecun_normal , lecun_uniform . Alternatively it is possible to specify a dictionary with a key type that identifies the type of initializer and other keys for its parameters, e.g. {type: normal, mean: 0, stddev: 0} . To know the parameters of each initializer, please refer to TensorFlow's documentation . regularize (default true ): if true the embedding weights are added to the set of weights that get regularized by a regularization loss (if the regularization_lambda in training is greater than 0). reduce_output (default sum ): defines how to reduce the output tensor along the s sequence length dimension if the rank of the tensor is greater than 2. Available values are: sum , mean or avg , max , concat (concatenates along the first dimension), last (returns the last vector of the first dimension) and null or None (which does not reduce and returns the full tensor). Example sequence feature entry in the output features list using an embed encoder: name : sequence_csv_column_name type : sequence encoder : embed tied_weights : null representation : dense embedding_size : 256 embeddings_on_cpu : false pretrained_embeddings : null embeddings_trainable : true dropout : false initializer : null regularize : true reduce_output : sum",
      "title": "Embed Encoder"
    },
    {
      "location": "user_guide/#parallel-cnn-encoder",
      "text": "The parallel cnn encoder is inspired by Yoon Kim's Convolutional Neural Network for Sentence Classification . It works by first mapping the input integer sequence b x s (where b is the batch size and s is the length of the sequence) into a sequence of embeddings, then it passes the embedding through a number of parallel 1d convolutional layers with different filter size (by default 4 layers with filter size 2, 3, 4 and 5), followed by max pooling and concatenation. This single vector concatenating the outputs of the parallel convolutional layers is then passed through a stack of fully connected layers and returned as a b x h tensor where h is the output size of the last fully connected layer. If you want to output the full b x s x h tensor, you can specify reduce_output: null . +-------+ +----+ +-->1D Conv+--->Pool+-+ +------+ | |Width 2| +----+ | |Emb 12| | +-------+ | +------+ | | +--+ |Emb 7 | | +-------+ +----+ | |12| +------+ +-->1D Conv+--->Pool+-+ |7 | |Emb 43| | |Width 3| +----+ | +---------+ |43| +------+ | +-------+ | +------+ |Fully | |65+--->Emb 65+-+ +->Concat+-->Connected+-> |23| +------+ | +-------+ +----+ | +------+ |Layers | |4 | |Emb 23| +-->1D Conv+--->Pool+-+ +---------+ |1 | +------+ | |Width 4| +----+ | +--+ |Emb 4 | | +-------+ | +------+ | | |Emb 1 | | +-------+ +----+ | +------+ +-->1D Conv+--->Pool+-+ |Width 5| +----+ +-------+ These are the available for an parallel cnn encoder: representation' (default dense ): the possible values are dense and sparse . dense means the embeddings are initialized randomly, sparse means they are initialized to be one-hot encodings. embedding_size (default 256 ): it is the maximum embedding size, the actual size will be min(vocabulary_size, embedding_size) for dense representations and exactly vocabulary_size for the sparse encoding, where vocabulary_size is the number of different strings appearing in the training set in the column the feature is named after (plus 1 for <UNK> ). embeddings_on_cpu (default false ): by default embeddings matrices are stored on GPU memory if a GPU is used, as it allows for faster access, but in some cases the embedding matrix may be really big and this parameter forces the placement of the embedding matrix in regular memory and the CPU is used to resolve them, slightly slowing down the process as a result of data transfer between CPU and GPU memory. pretrained_embeddings (default null ): by default dense embeddings are initialized randomly, but this parameter allow to specify a path to a file containing embeddings in the GloVe format . When the file containing the embeddings is loaded, only the embeddings with labels present in the vocabulary are kept, the others are discarded. If the vocabulary contains strings that have no match in the embeddings file, their embeddings are initialized with the average of all other embedding plus some random noise to make them different from each other. This parameter has effect only if representation is dense . embeddings_trainable (default true ): If true embeddings are trained during the training process, if false embeddings are fixed. It may be useful when loading pretrained embeddings for avoiding finetuning them. This parameter has effect only for representation is dense as sparse one-hot encodings are not trainable. conv_layers (default null ): it is a list of dictionaries containing the parameters of all the convolutional layers. The length of the list determines the number of parallel convolutional layers and the content of each dictionary determines the parameters for a specific layer. The available parameters for each layer are: filter_size , num_filters , pool , norm , activation and regularize . If any of those values is missing from the dictionary, the default one specified as a parameter of the encoder will be used instead. If both conv_layers and num_conv_layers are null , a default list will be assigned to conv_layers with the value [{filter_size: 2}, {filter_size: 3}, {filter_size: 4}, {filter_size: 5}] . num_conv_layers (default null ): if conv_layers is null , this is the number of parallel convolutional layers. filter_size (default 3 ): if a filter_size is not already specified in conv_layers this is the default filter_size that will be used for each layer. It indicates how wide is the 1d convolutional filter. num_filters (default 256 ): if a num_filters is not already specified in conv_layers this is the default num_filters that will be used for each layer. It indicates the number of filters, and by consequence the output channels of the 1d convolution. pool_size (default null ): if a pool_size is not already specified in conv_layers this is the default pool_size that will be used for each layer. It indicates the size of the max pooling that will be performed along the s sequence dimension after the convolution operation. fc_layers (default null ): it is a list of dictionaries containing the parameters of all the fully connected layers. The length of the list determines the number of stacked fully connected layers and the content of each dictionary determines the parameters for a specific layer. The available parameters for each layer are: fc_size , norm , activation , initializer and regularize . If any of those values is missing from the dictionary, the default one specified as a parameter of the encoder will be used instead. If both fc_layers and num_fc_layers are null , a default list will be assigned to fc_layers with the value [{fc_size: 512}, {fc_size: 256}] . (only applies if reduce_output is not null ). num_fc_layers (default null ): if fc_layers is null , this is the number of stacked fully connected layers (only applies if reduce_output is not null ). fc_size (default 256 ): if a fc_size is not already specified in fc_layers this is the default fc_size that will be used for each layer. It indicates the size of the output of a fully connected layer. activation (default relu ): if an activation is not already specified in conv_layers or fc_layers this is the default activation that will be used for each layer. It indicates the activation function applied to the output. norm (default null ): if a norm is not already specified in conv_layers or fc_layers this is the default norm that will be used for each layer. It indicates the norm of the output. dropout (default false ): determines if there should be a dropout layer after each layer. initializer (default null ): the initializer to use. If null it uses glorot_uniform . Options are: constant , identity , zeros , ones , orthogonal , normal , uniform , truncated_normal , variance_scaling , glorot_normal , glorot_uniform , xavier_normal , xavier_uniform , he_normal , he_uniform , lecun_normal , lecun_uniform . Alternatively it is possible to specify a dictionary with a key type that identifies the type of initializer and other keys for its parameters, e.g. {type: normal, mean: 0, stddev: 0} . To know the parameters of each initializer, please refer to TensorFlow's documentation . regularize (default true ): if a regularize is not already specified in conv_layers or fc_layers this is the default regularize that will be used for each layer. It indicates if the layer weights should be considered when computing a regularization loss. reduce_output (default sum ): defines how to reduce the output tensor along the s sequence length dimension if the rank of the tensor is greater than 2. Available values are: sum , mean or avg , max , concat (concatenates along the sequence dimension), last (returns the last vector of the sequence dimension) and null or None (which does not reduce and returns the full tensor). Example sequence feature entry in the output features list using a parallel cnn encoder: name : sequence_csv_column_name type : sequence encoder : parallel_cnn tied_weights : null representation : dense embedding_size : 256 embeddings_on_cpu : false pretrained_embeddings : null embeddings_trainable : true conv_layers : null num_conv_layers : null filter_size : 3 num_filters : 256 pool_size : null fc_layers : null num_fc_layers : null fc_size : 256 activation : relu norm : null dropout : false regularize : true reduce_output : sum",
      "title": "Parallel CNN Encoder"
    },
    {
      "location": "user_guide/#stacked-cnn-encoder",
      "text": "The stacked cnn encoder is inspired by Xiang Zhang at all's Character-level Convolutional Networks for Text Classification . It works by first mapping the input integer sequence b x s (where b is the batch size and s is the length of the sequence) into a sequence of embeddings, then it passes the embedding through a stack of 1d convolutional layers with different filter size (by default 6 layers with filter size 7, 7, 3, 3, 3 and 3), followed by an optional final pool and by a flatten operation. This single flatten vector is then passed through a stack of fully connected layers and returned as a b x h tensor where h is the output size of the last fully connected layer. If you want to output the full b x s x h tensor, you can specify the pool_size of all your conv_layers to be null and reduce_output: null , while if pool_size has a value different from null and reduce_output: null the returned tensor will be of shape b x s' x h , where s' is width of the output of the last convolutional layer. +------+ |Emb 12| +------+ +--+ |Emb 7 | |12| +------+ |7 | |Emb 43| +----------------+ +---------+ |43| +------+ |1D Conv | |Fully | |65+--->Emb 65+--->Layers +-->Connected+-> |23| +------+ |Different Widths| |Layers | |4 | |Emb 23| +----------------+ +---------+ |1 | +------+ +--+ |Emb 4 | +------+ |Emb 1 | +------+ These are the parameters available for the stack cnn encoder: representation' (default dense ): the possible values are dense and sparse . dense means the embeddings are initialized randomly, sparse means they are initialized to be one-hot encodings. embedding_size (default 256 ): it is the maximum embedding size, the actual size will be min(vocabulary_size, embedding_size) for dense representations and exactly vocabulary_size for the sparse encoding, where vocabulary_size is the number of different strings appearing in the training set in the column the feature is named after (plus 1 for <UNK> ). embeddings_on_cpu (default false ): by default embeddings matrices are stored on GPU memory if a GPU is used, as it allows for faster access, but in some cases the embedding matrix may be really big and this parameter forces the placement of the embedding matrix in regular memory and the CPU is used to resolve them, slightly slowing down the process as a result of data transfer between CPU and GPU memory. pretrained_embeddings (default null ): by default dense embeddings are initialized randomly, but this parameter allow to specify a path to a file containing embeddings in the GloVe format . When the file containing the embeddings is loaded, only the embeddings with labels present in the vocabulary are kept, the others are discarded. If the vocabulary contains strings that have no match in the embeddings file, their embeddings are initialized with the average of all other embedding plus some random noise to make them different from each other. This parameter has effect only if representation is dense . embeddings_trainable (default true ): If true embeddings are trained during the training process, if false embeddings are fixed. It may be useful when loading pretrained embeddings for avoiding finetuning them. This parameter has effect only for representation is dense as sparse one-hot encodings are not trainable. conv_layers (default null ): it is a list of dictionaries containing the parameters of all the convolutional layers. The length of the list determines the number of stacked convolutional layers and the content of each dictionary determines the parameters for a specific layer. The available parameters for each layer are: filter_size , num_filters , pool_size , norm , activation and regularize . If any of those values is missing from the dictionary, the default one specified as a parameter of the encoder will be used instead. If both conv_layers and num_conv_layers are null , a default list will be assigned to conv_layers with the value [{filter_size: 7, pool_size: 3, regularize: false}, {filter_size: 7, pool_size: 3, regularize: false}, {filter_size: 3, pool_size: null, regularize: false}, {filter_size: 3, pool_size: null, regularize: false}, {filter_size: 3, pool_size: null, regularize: true}, {filter_size: 3, pool_size: 3, regularize: true}] . num_conv_layers (default null ): if conv_layers is null , this is the number of stacked convolutional layers. filter_size (default 3 ): if a filter_size is not already specified in conv_layers this is the default filter_size that will be used for each layer. It indicates how wide is the 1d convolutional filter. num_filters (default 256 ): if a num_filters is not already specified in conv_layers this is the default num_filters that will be used for each layer. It indicates the number of filters, and by consequence the output channels of the 1d convolution. pool_size (default null ): if a pool_size is not already specified in conv_layers this is the default pool_size that will be used for each layer. It indicates the size of the max pooling that will be performed along the s sequence dimension after the convolution operation. reduce_output (default max ): defines how to reduce the output tensor of the convolutional layers along the s sequence length dimension if the rank of the tensor is greater than 2. Available values are: sum , mean or avg , max , concat (concatenates along the first dimension), last (returns the last vector of the first dimension) and null or None (which does not reduce and returns the full tensor). fc_layers (default null ): it is a list of dictionaries containing the parameters of all the fully connected layers. The length of the list determines the number of stacked fully connected layers and the content of each dictionary determines the parameters for a specific layer. The available parameters for each layer are: fc_size , norm , activation and regularize . If any of those values is missing from the dictionary, the default one specified as a parameter of the encoder will be used instead. If both fc_layers and num_fc_layers are null , a default list will be assigned to fc_layers with the value [{fc_size: 512}, {fc_size: 256}] . (only applies if reduce_output is not null ). num_fc_layers (default null ): if fc_layers is null , this is the number of stacked fully connected layers (only applies if reduce_output is not null ). fc_size (default 256 ): if a fc_size is not already specified in fc_layers this is the default fc_size that will be used for each layer. It indicates the size of the output of a fully connected layer. activation (default relu ): if an activation is not already specified in conv_layers or fc_layers this is the default activation that will be used for each layer. It indicates the activation function applied to the output. norm (default null ): if a norm is not already specified in conv_layers or fc_layers this is the default norm that will be used for each layer. It indicates the norm of the output. dropout (default false ): determines if there should be a dropout layer after each layer. initializer (default null ): the initializer to use. If null it uses glorot_uniform . Options are: constant , identity , zeros , ones , orthogonal , normal , uniform , truncated_normal , variance_scaling , glorot_normal , glorot_uniform , xavier_normal , xavier_uniform , he_normal , he_uniform , lecun_normal , lecun_uniform . Alternatively it is possible to specify a dictionary with a key type that identifies the type of initializer and other keys for its parameters, e.g. {type: normal, mean: 0, stddev: 0} . To know the parameters of each initializer, please refer to TensorFlow's documentation . regularize (default true ): if a regularize is not already specified in conv_layers or fc_layers this is the default regularize that will be used for each layer. It indicates if the layer weights should be considered when computing a regularization loss. reduce_output (default sum ): defines how to reduce the output tensor along the s sequence length dimension if the rank of the tensor is greater than 2. Available values are: sum , mean or avg , max , concat (concatenates along the first dimension), last (returns the last vector of the first dimension) and null or None (which does not reduce and returns the full tensor). Example sequence feature entry in the output features list using a parallel cnn encoder: name : sequence_csv_column_name type : sequence encoder : stacked_cnn tied_weights : null representation : dense embedding_size : 256 embeddings_on_cpu : false pretrained_embeddings : null embeddings_trainable : true conv_layers : null num_conv_layers : null filter_size : 3 num_filters : 256 pool_size : null fc_layers : null num_fc_layers : null fc_size : 256 activation : relu norm : null dropout : false initializer : null regularize : true reduce_output : max",
      "title": "Stacked CNN Encoder"
    },
    {
      "location": "user_guide/#stacked-parallel-cnn-encoder",
      "text": "The stacked parallel cnn encoder is a combination of the Parallel CNN and the Stacked CNN encoders where each layer of the stack is a composed of parallel convolutional layers. It works by first mapping the input integer sequence b x s (where b is the batch size and s is the length of the sequence) into a sequence of embeddings, then it passes the embedding through a stack of several parallel 1d convolutional layers with different filter size, followed by an optional final pool and by a flatten operation. This single flatten vector is then passed through a stack of fully connected layers and returned as a b x h tensor where h is the output size of the last fully connected layer. If you want to output the full b x s x h tensor, you can specify reduce_output: null . +-------+ +-------+ +-->1D Conv+-+ +-->1D Conv+-+ +------+ | |Width 2| | | |Width 2| | |Emb 12| | +-------+ | | +-------+ | +------+ | | | | +--+ |Emb 7 | | +-------+ | | +-------+ | |12| +------+ +-->1D Conv+-+ +-->1D Conv+-+ |7 | |Emb 43| | |Width 3| | | |Width 3| | +---------+ |43| +------+ | +-------+ | +------+ +---+ | +-------+ | +------+ +----+ |Fully | |65+--->Emb 65+-+ +->Concat+-->...+-+ +->Concat+-->Pool+-->Connected+-> |23| +------+ | +-------+ | +------+ +---+ | +-------+ | +------+ +----+ |Layers | |4 | |Emb 23| +-->1D Conv+-+ +-->1D Conv+-+ +---------+ |1 | +------+ | |Width 4| | | |Width 4| | +--+ |Emb 4 | | +-------+ | | +-------+ | +------+ | | | | |Emb 1 | | +-------+ | | +-------+ | +------+ +-->1D Conv+-+ +-->1D Conv+-+ |Width 5| |Width 5| +-------+ +-------+ These are the available parameters for the stack parallel cnn encoder: representation' (default dense ): the possible values are dense and sparse . dense means the embeddings are initialized randomly, sparse means they are initialized to be one-hot encodings. embedding_size (default 256 ): it is the maximum embedding size, the actual size will be min(vocabulary_size, embedding_size) for dense representations and exactly vocabulary_size for the sparse encoding, where vocabulary_size is the number of different strings appearing in the training set in the column the feature is named after (plus 1 for <UNK> ). embeddings_on_cpu (default false ): by default embeddings matrices are stored on GPU memory if a GPU is used, as it allows for faster access, but in some cases the embedding matrix may be really big and this parameter forces the placement of the embedding matrix in regular memory and the CPU is used to resolve them, slightly slowing down the process as a result of data transfer between CPU and GPU memory. pretrained_embeddings (default null ): by default dense embeddings are initialized randomly, but this parameter allow to specify a path to a file containing embeddings in the GloVe format . When the file containing the embeddings is loaded, only the embeddings with labels present in the vocabulary are kept, the others are discarded. If the vocabulary contains strings that have no match in the embeddings file, their embeddings are initialized with the average of all other embedding plus some random noise to make them different from each other. This parameter has effect only if representation is dense . embeddings_trainable (default true ): If true embeddings are trained during the training process, if false embeddings are fixed. It may be useful when loading pretrained embeddings for avoiding finetuning them. This parameter has effect only for representation is dense as sparse one-hot encodings are not trainable. stacked_layers (default null ): it is a of lists of list of dictionaries containing the parameters of the stack of parallel convolutional layers. The length of the list determines the number of stacked parallel convolutional layers, length of the sub-lists determines the number of parallel conv layers and the content of each dictionary determines the parameters for a specific layer. The available parameters for each layer are: filter_size , num_filters , pool_size , norm , activation and regularize . If any of those values is missing from the dictionary, the default one specified as a parameter of the encoder will be used instead. If both stacked_layers and num_stacked_layers are null , a default list will be assigned to stacked_layers with the value [[{filter_size: 2}, {filter_size: 3}, {filter_size: 4}, {filter_size: 5}], [{filter_size: 2}, {filter_size: 3}, {filter_size: 4}, {filter_size: 5}], [{filter_size: 2}, {filter_size: 3}, {filter_size: 4}, {filter_size: 5}]] . num_stacked_layers (default null ): if stacked_layers is null , this is the number of elements in the stack of parallel convolutional layers. filter_size (default 3 ): if a filter_size is not already specified in conv_layers this is the default filter_size that will be used for each layer. It indicates how wide is the 1d convolutional filter. num_filters (default 256 ): if a num_filters is not already specified in conv_layers this is the default num_filters that will be used for each layer. It indicates the number of filters, and by consequence the output channels of the 1d convolution. pool_size (default null ): if a pool_size is not already specified in conv_layers this is the default pool_size that will be used for each layer. It indicates the size of the max pooling that will be performed along the s sequence dimension after the convolution operation. fc_layers (default null ): it is a list of dictionaries containing the parameters of all the fully connected layers. The length of the list determines the number of stacked fully connected layers and the content of each dictionary determines the parameters for a specific layer. The available parameters for each layer are: fc_size , norm , activation and regularize . If any of those values is missing from the dictionary, the default one specified as a parameter of the encoder will be used instead. If both fc_layers and num_fc_layers are null , a default list will be assigned to fc_layers with the value [{fc_size: 512}, {fc_size: 256}] . (only applies if reduce_output is not null ). num_fc_layers (default null ): if fc_layers is null , this is the number of stacked fully connected layers (only applies if reduce_output is not null ). fc_size (default 256 ): if a fc_size is not already specified in fc_layers this is the default fc_size that will be used for each layer. It indicates the size of the output of a fully connected layer. norm (default null ): if a norm is not already specified in conv_layers or fc_layers this is the default norm that will be used for each layer. It indicates the norm of the output. activation (default relu ): if an activation is not already specified in conv_layers or fc_layers this is the default activation that will be used for each layer. It indicates the activation function applied to the output. regularize (default true ): if a regularize is not already specified in conv_layers or fc_layers this is the default regularize that will be used for each layer. It indicates if the layer weights should be considered when computing a regularization loss. reduce_output (default sum ): defines how to reduce the output tensor along the s sequence length dimension if the rank of the tensor is greater than 2. Available values are: sum , mean or avg , max , concat (concatenates along the first dimension), last (returns the last vector of the first dimension) and null or None (which does not reduce and returns the full tensor). Example sequence feature entry in the output features list using a parallel cnn encoder: name : sequence_csv_column_name type : sequence encoder : stacked_parallel_cnn tied_weights : null representation : dense embedding_size : 256 embeddings_on_cpu : false pretrained_embeddings : null embeddings_trainable : true stacked_layers : null num_stacked_layers : null filter_size : 3 num_filters : 256 pool_size : null fc_layers : null num_fc_layers : null fc_size : 256 norm : null activation : relu regularize : true reduce_output : max",
      "title": "Stacked Parallel CNN Encoder"
    },
    {
      "location": "user_guide/#rnn-encoder",
      "text": "The rnn encoder works by first mapping the input integer sequence b x s (where b is the batch size and s is the length of the sequence) into a sequence of embeddings, then it passes the embedding through a stack of recurrent layers (by default 1 layer), followed by a reduce operation that by default only returns the last output, but can perform other reduce functions. If you want to output the full b x s x h where h is the size of the output of the last rnn layer, you can specify reduce_output: null . +------+ |Emb 12| +------+ +--+ |Emb 7 | |12| +------+ |7 | |Emb 43| +---------+ |43| +------+ +----------+ |Fully | |65+--->Emb 65+--->RNN Layers+-->Connected+-> |23| +------+ +----------+ |Layers | |4 | |Emb 23| +---------+ |1 | +------+ +--+ |Emb 4 | +------+ |Emb 1 | +------+ These are the available parameters for the rnn encoder: representation' (default dense ): the possible values are dense and sparse . dense means the embeddings are initialized randomly, sparse means they are initialized to be one-hot encodings. embedding_size (default 256 ): it is the maximum embedding size, the actual size will be min(vocabulary_size, embedding_size) for dense representations and exactly vocabulary_size for the sparse encoding, where vocabulary_size is the number of different strings appearing in the training set in the column the feature is named after (plus 1 for <UNK> ). embeddings_on_cpu (default false ): by default embeddings matrices are stored on GPU memory if a GPU is used, as it allows for faster access, but in some cases the embedding matrix may be really big and this parameter forces the placement of the embedding matrix in regular memory and the CPU is used to resolve them, slightly slowing down the process as a result of data transfer between CPU and GPU memory. pretrained_embeddings (default null ): by default dense embeddings are initialized randomly, but this parameter allow to specify a path to a file containing embeddings in the GloVe format . When the file containing the embeddings is loaded, only the embeddings with labels present in the vocabulary are kept, the others are discarded. If the vocabulary contains strings that have no match in the embeddings file, their embeddings are initialized with the average of all other embedding plus some random noise to make them different from each other. This parameter has effect only if representation is dense . embeddings_trainable (default true ): If true embeddings are trained during the training process, if false embeddings are fixed. It may be useful when loading pretrained embeddings for avoiding finetuning them. This parameter has effect only for representation is dense as sparse one-hot encodings are not trainable. num_layers (default 1 ): the number of stacked recurrent layers. cell_type (default rnn ): the type of recurrent cell to use. Available values are: rnn , lstm , lstm_block , lstm , ln , lstm_cudnn , gru , gru_block , gru_cudnn . For reference about the differences between the cells please refer to TensorFlow's documentation . We suggest to use the block variants on CPU and the cudnn variants on GPU because of their increased speed. state_size (default 256 ): the size of the state of the rnn. bidirectional (default false ): if true two recurrent networks will perform encoding in the forward and backward direction and their outputs will be concatenated. dropout (default false ): determines if there should be a dropout layer before returning the encoder output. initializer (default null ): the initializer to use. If null , the default initialized of each variable is used ( glorot_uniform in most cases). Options are: constant , identity , zeros , ones , orthogonal , normal , uniform , truncated_normal , variance_scaling , glorot_normal , glorot_uniform , xavier_normal , xavier_uniform , he_normal , he_uniform , lecun_normal , lecun_uniform . Alternatively it is possible to specify a dictionary with a key type that identifies the type of initializer and other keys for its parameters, e.g. {type: normal, mean: 0, stddev: 0} . To know the parameters of each initializer, please refer to TensorFlow's documentation . regularize (default true ): if true the embedding weights are added to the set of weights that get regularized by a regularization loss (if the regularization_lambda in training is greater than 0). reduce_output (default last ): defines how to reduce the output tensor along the s sequence length dimension if the rank of the tensor is greater than 2. Available values are: sum , mean or avg , max , concat (concatenates along the first dimension), last (returns the last vector of the first dimension) and null or None (which does not reduce and returns the full tensor). Example sequence feature entry in the output features list using a parallel cnn encoder: name : sequence_csv_column_name type : sequence encoder : rnn tied_weights : null representation : dense embedding_size : 256 embeddings_on_cpu : false pretrained_embeddings : null embeddings_trainable : true num_layers : 1 cell_type : rnn state_size : 256 bidirectional : false dropout : false initializer : null regularize : true reduce_output : sum",
      "title": "RNN Encoder"
    },
    {
      "location": "user_guide/#cnn-rnn-encoder",
      "text": "The cnn rnn encoder works by first mapping the input integer sequence b x s (where b is the batch size and s is the length of the sequence) into a sequence of embeddings, then it passes the embedding through a stack of convolutional layers (by default 2), that is followed by a stack of recurrent layers (by default 1), followed by a reduce operation that by default only returns the last output, but can perform other reduce functions. If you want to output the full b x s x h where h is the size of the output of the last rnn layer, you can specify reduce_output: null . +------+ |Emb 12| +------+ +--+ |Emb 7 | |12| +------+ |7 | |Emb 43| +---------+ |43| +------+ +----------+ +----------+ |Fully | |65+--->Emb 65+--->CNN Layers+--->RNN Layers+-->Connected+-> |23| +------+ +----------+ +----------+ |Layers | |4 | |Emb 23| +---------+ |1 | +------+ +--+ |Emb 4 | +------+ |Emb 1 | +------+ These are the available parameters of the cnn rnn encoder: representation' (default dense ): the possible values are dense and sparse . dense means the embeddings are initialized randomly, sparse means they are initialized to be one-hot encodings. embedding_size (default 256 ): it is the maximum embedding size, the actual size will be min(vocabulary_size, embedding_size) for dense representations and exactly vocabulary_size for the sparse encoding, where vocabulary_size is the number of different strings appearing in the training set in the column the feature is named after (plus 1 for <UNK> ). embeddings_on_cpu (default false ): by default embeddings matrices are stored on GPU memory if a GPU is used, as it allows for faster access, but in some cases the embedding matrix may be really big and this parameter forces the placement of the embedding matrix in regular memory and the CPU is used to resolve them, slightly slowing down the process as a result of data transfer between CPU and GPU memory. pretrained_embeddings (default null ): by default dense embeddings are initialized randomly, but this parameter allow to specify a path to a file containing embeddings in the GloVe format . When the file containing the embeddings is loaded, only the embeddings with labels present in the vocabulary are kept, the others are discarded. If the vocabulary contains strings that have no match in the embeddings file, their embeddings are initialized with the average of all other embedding plus some random noise to make them different from each other. This parameter has effect only if representation is dense . embeddings_trainable (default true ): If true embeddings are trained during the training process, if false embeddings are fixed. It may be useful when loading pretrained embeddings for avoiding finetuning them. This parameter has effect only for representation is dense as sparse one-hot encodings are not trainable. conv_layers (default null ): it is a list of dictionaries containing the parameters of all the convolutional layers. The length of the list determines the number of stacked convolutional layers and the content of each dictionary determines the parameters for a specific layer. The available parameters for each layer are: filter_size , num_filters , pool_size , norm , activation and regularize . If any of those values is missing from the dictionary, the default one specified as a parameter of the encoder will be used instead. If both conv_layers and num_conv_layers are null , a default list will be assigned to conv_layers with the value [{filter_size: 7, pool_size: 3, regularize: false}, {filter_size: 7, pool_size: 3, regularize: false}, {filter_size: 3, pool_size: null, regularize: false}, {filter_size: 3, pool_size: null, regularize: false}, {filter_size: 3, pool_size: null, regularize: true}, {filter_size: 3, pool_size: 3, regularize: true}] . num_conv_layers (default null ): if conv_layers is null , this is the number of parallel convolutional layers. filter_size (default 3 ): if a filter_size is not already specified in conv_layers this is the default filter_size that will be used for each layer. It indicates how wide is the 1d convolutional filter. num_filters (default 256 ): if a num_filters is not already specified in conv_layers this is the default num_filters that will be used for each layer. It indicates the number of filters, and by consequence the output channels of the 1d convolution. pool_size (default null ): if a pool_size is not already specified in conv_layers this is the default pool_size that will be used for each layer. It indicates the size of the max pooling that will be performed along the s sequence dimension after the convolution operation. num_rec_layers (default 1 ): the number of stacked recurrent layers. cell_type (default rnn ): the type of recurrent cell to use. Available values are: rnn , lstm , lstm_block , lstm , ln , lstm_cudnn , gru , gru_block , gru_cudnn . For reference about the differences between the cells please refer to TensorFlow's documentstion . We suggest to use the block variants on CPU and the cudnn variants on GPU because of their increased speed. state_size (default 256 ): the size of the state of the rnn. bidirectional (default false ): if true two recurrent networks will perform encoding in the forward and backward direction and their outputs will be concatenated. dropout (default false ): determines if there should be a dropout layer between conv_layers and before returning the encoder output. initializer (default null ): the initializer to use. If null , the default initialized of each variable is used ( glorot_uniform in most cases). Options are: constant , identity , zeros , ones , orthogonal , normal , uniform , truncated_normal , variance_scaling , glorot_normal , glorot_uniform , xavier_normal , xavier_uniform , he_normal , he_uniform , lecun_normal , lecun_uniform . Alternatively it is possible to specify a dictionary with a key type that identifies the type of initializer and other keys for its parameters, e.g. {type: normal, mean: 0, stddev: 0} . To know the parameters of each initializer, please refer to TensorFlow's documentation . regularize (default true ): if true the embedding weights are added to the set of weights that get regularized by a regularization loss (if the regularization_lambda in training is greater than 0). reduce_output (default last ): defines how to reduce the output tensor along the s sequence length dimension if the rank of the tensor is greater than 2. Available values are: sum , mean or avg , max , concat (concatenates along the first dimension), last (returns the last vector of the first dimension) and null or None (which does not reduce and returns the full tensor). Example sequence feature entry in the output features list using a parallel cnn encoder: name : sequence_csv_column_name type : sequence encoder : cnnrnn tied_weights : null representation : dense embedding_size : 256 embeddings_on_cpu : false pretrained_embeddings : null embeddings_trainable : true conv_layers : null num_conv_layers : null filter_size : 3 num_filters : 256 pool_size : null norm : null activation : relu num_rec_layers : 1 cell_type : rnn state_size : 256 bidirectional : false dropout : false initializer : null regularize : true reduce_output : last",
      "title": "CNN RNN Encoder"
    },
    {
      "location": "user_guide/#bert-encoder",
      "text": "The BERT encoder allows for loading a pre-trained bert model. Models are available on GitHube for download. The downloaded pretrained model directory contains: - bert_config.json which holds the hyperparameters of the bert architecture, - vocab.txt which contains the vocabulary of BPE word pieces the model was trained on, - bert_model.ckpt files ( .meta , .index and .data-00000-of-00001 ) which contain the names of the tensors and the weights. In order to use this encder, the BERT Tokenizer need to be used at the same time, as if the tokenization is performed differently, the integers associated with each word piece will be wrong. The BERT Tokenizer also adds [CLS] and [SEP] special tokens at the beginning and at the end of each tokenized sentence respectively. The bert encoder simply maps each integer in the sequence to an embedding (made of a token embedding, a positional embedding and a segment embedding), creating a b x s x h tensor where b is the batch size, s is the length of the sequence and h is the embedding size. Tose embeddings are passed through several transformer layers. The tensor is reduced by selecting the first output vector, the one in correspondence to the [CLS] token, to obtain a single vector of size h for each element of the batch. If you want to output the full b x s x h tensor, you can specify reduce_output: null . In this case the first and last element of the tesnor along the s dimension will be removed, as the correspond to the special tokens and not to the word pieces in the input. +------+ +------+ |Emb 12| |Emb 12+--> +------+ +------+ +--+ |Emb 7 | |Emb 7 | |12| +------+ +------+ |7 | |Emb 43| +-------------+ |Emb 43| |43| +------+ | | +------+ |65+---+Emb 65+---> Transformer +--->Emb 65| |23| +------+ | Layers | +------+ |4 | |Emb 23| +-------------+ |Emb 23| |1 | +------+ +------+ +--+ |Emb 4 | |Emb 4 | +------+ +------+ |Emb 1 | |Emb 1 | +------+ +------+ These are the parameters available for the embed encoder config_path : is the path to the BERT configuration JSON file. checkpoint_path (default null ): is the path to the BERT checkpoint file. bert_model.ckpt should be specified, without .index , .meta or .data* . do_lower_case (default True ): this parameter should be set according to the pretrained model to use. reduce_output (default True ): The tensor is reduced by selecting the first output vector, the one in correspondence to the [CLS] token, to obtain a single vector of size h for each element of the batch. If you want to output the full b x s x h tensor, you can specify null . In this case the first and last element of the tesnor along the s dimension will be removed, as the correspond to the special tokens and not to the word pieces in the input. A BERT tokenizer should be specified as tokenizer in preprocessing the input feature. Its parameters should include: - tokenizer: bert ( word_tokenizer: bert in case of text features) - vocab_file: <path_to_bert_vocab.txt> ( word_vocab_file: <path_to_bert_vocab.txt> in case of text features) - padding_symbol: '[PAD]' - unknown_symbol: '[UNK]' Example sequence feature entry in the output features list using a BERT encoder: name : sequence_csv_column_name type : sequence encoder : bert config_path : <path_to_bert_config.json> checkpoint_path : <path_to_bert_model.ckpt> do_lower_case : True preprocessing : tokenizer : bert vocab_file : <path_to_bert_vocab.txt> padding_symbol : '[PAD]' unknown_symbol : '[UNK]' reduce_output : True When using a BERT encoder and finetuning it we suggest using small learning rates around 0.00002 and turning on learning rate warm up for the best results.",
      "title": "BERT Encoder"
    },
    {
      "location": "user_guide/#passthrough-encoder",
      "text": "The passthrough decoder simply transforms each input value into a fleat value and adds a dimension to the input tensor, creating a b x s x 1 tensor where b is the batch size and s is the length of the sequence. The tensor is reduced along the s dimension to obtain a single vector of size h for each element of the batch. If you want to output the full b x s x h tensor, you can specify reduce_output: null . This encoder is not really useful for sequence or text features, but may be useful for timeseries features, as it allows for using them without any processing in later stages of the model, like in a sequence combiner for instance. +--+ |12| |7 | +-----------+ |43| +------------+ |Aggregation| |65+--->Cast float32+--->Reduce +-> |23| +------------+ |Operation | |4 | +-----------+ |1 | +--+ These are the parameters available for the passthrough encoder reduce_output (default null ): defines how to reduce the output tensor along the s sequence length dimension if the rank of the tensor is greater than 2. Available values are: sum , mean or avg , max , concat (concatenates along the first dimension), last (returns the last vector of the first dimension) and null or None (which does not reduce and returns the full tensor). Example sequence feature entry in the output features list using an embed encoder: name : sequence_csv_column_name type : sequence encoder : passthrough reduce_output : null",
      "title": "Passthrough Encoder"
    },
    {
      "location": "user_guide/#sequence-output-features-and-decoders",
      "text": "Sequential features can be used when sequence tagging (classifying each element of an input sequence) or sequence generation needs to be performed. There are two decoders available for those to tasks names tagger and generator . These are the available parameters of a sequence output feature reduce_inputs (default sum ): defines how to reduce an input that is not a vector, but a matrix or a higher order tensor, on the first dimension 9second if you count the batch dimension). Available values are: sum , mean or avg , max , concat (concatenates along the first dimension), last (returns the last vector of the first dimension). dependencies (default [] ): the output features this one is dependent on. For a detailed explanation refer to Output Features Dependencies . reduce_dependencies (default sum ): defines how to reduce the output of a dependent feature that is not a vector, but a matrix or a higher order tensor, on the first dimension 9second if you count the batch dimension). Available values are: sum , mean or avg , max , concat (concatenates along the first dimension), last (returns the last vector of the first dimension). loss (default {type: softmax_cross_entropy, class_similarities_temperature: 0, class_weights: 1, confidence_penalty: 0, distortion: 1, labels_smoothing: 0, negative_samples: 0, robust_lambda: 0, sampler: null, unique: false} ): is a dictionary containing a loss type . The available losses type are softmax_cross_entropy and sampled_softmax_cross_entropy . For details on both losses, please refer to the category feature output feature section .",
      "title": "Sequence Output Features and Decoders"
    },
    {
      "location": "user_guide/#tagger-decoder",
      "text": "In the case of tagger the decoder is a (potentially empty) stack of fully connected layers, followed by a projection into a tensor of size b x s x c , where b is the batch size, s is the length of the sequence and c is the number of classes, followed by a softmax_cross_entropy. This decoder requires its input to be shaped as b x s x h , where h is an hidden dimension, which is the output of a sequence, text or timeseries input feature without reduced outputs or the output of a sequence-based combiner. If a b x h input is provided instead, an error will be raised during model building. Combiner Output +---+ +----------+ +-------+ |emb| +---------+ |Projection| |Softmax| +---+ |Fully | +----------+ +-------+ |...+--->Connected+--->... +--->... | +---+ |Layers | +----------+ +-------+ |emb| +---------+ |Projection| |Softmax| +---+ +----------+ +-------+ These are the available parameters of a tagger decoder: fc_layers (default null ): it is a list of dictionaries containing the parameters of all the fully connected layers. The length of the list determines the number of stacked fully connected layers and the content of each dictionary determines the parameters for a specific layer. The available parameters for each layer are: fc_size , norm , activation , dropout , initializer and regularize . If any of those values is missing from the dictionary, the default one specified as a parameter of the decoder will be used instead. num_fc_layers (default 0): this is the number of stacked fully connected layers that the input to the feature passes through. Their output is projected in the feature's output space. fc_size (default 256 ): if a fc_size is not already specified in fc_layers this is the default fc_size that will be used for each layer. It indicates the size of the output of a fully connected layer. activation (default relu ): if an activation is not already specified in fc_layers this is the default activation that will be used for each layer. It indicates the activation function applied to the output. norm (default null ): if a norm is not already specified in fc_layers this is the default norm that will be used for each layer. It indicates the norm of the output and it can be null , batch or layer . dropout (default false ): determines if there should be a dropout layer after each layer. initializer (default null ): the initializer to use. If null , the default initialized of each variable is used ( glorot_uniform in most cases). Options are: constant , identity , zeros , ones , orthogonal , normal , uniform , truncated_normal , variance_scaling , glorot_normal , glorot_uniform , xavier_normal , xavier_uniform , he_normal , he_uniform , lecun_normal , lecun_uniform . Alternatively it is possible to specify a dictionary with a key type that identifies the type of initializer and other keys for its parameters, e.g. {type: normal, mean: 0, stddev: 0} . To know the parameters of each initializer, please refer to TensorFlow's documentation . regularize (default true ): if true the weights of the layers are added to the set of weights that get regularized by a regularization loss (if the regularization_lambda in training is greater than 0). Example sequence feature entry using a tagger decoder (with default parameters) in the output features list: name : sequence_csv_column_name type : sequence reduce_inputs : sum dependencies : [] reduce_dependencies : sum loss : type : softmax_cross_entropy confidence_penalty : 0 robust_lambda : 0 class_weights : 1 class_similarities : null class_similarities_temperature : 0 labels_smoothing : 0 negative_samples : 0 sampler : null distortion : 1 unique : false fc_layers : null num_fc_layers : 0 fc_size : 256 activation : relu norm : null dropout : false initializer : null regularize : true",
      "title": "Tagger Decoder"
    },
    {
      "location": "user_guide/#generator-decoder",
      "text": "In the case of generator the decoder is a (potentially empty) stack of fully connected layers, followed by an rnn that generates outputs feeding on its own previous predictions and generates a tensor of size b x s' x c , where b is the batch size, s' is the length of the generated sequence and c is the number of classes, followed by a softmax_cross_entropy. By default a generator expects a b x h shaped input tensor, where h is a hidden dimension. The h vectors are (after an optional stack of fully connected layers) fed into the rnn generator. One exception is when the generator uses attention, as in that case the expected size of the input tensor is b x s x h , which is the output of a sequence, text or timeseries input feature without reduced outputs or the output of a sequence-based combiner. If a b x h input is provided to a generator decoder using an rnn with attention instead, an error will be raised during model building. Output Output 1 +-+ ... +--+ END ^ | ^ | ^ +--------+ +---------+ | | | | | |Combiner| |Fully | +---+--+ | +---+---+ | +---+--+ |Output +--->Connected+---+RNN +--->RNN... +--->RNN | | | |Layers | +---^--+ | +---^---+ | +---^--+ +--------+ +---------+ | | | | | GO +-----+ +-----+ These are the available parameters of a tagger decoder: fc_layers (default null ): it is a list of dictionaries containing the parameters of all the fully connected layers. The length of the list determines the number of stacked fully connected layers and the content of each dictionary determines the parameters for a specific layer. The available parameters for each layer are: fc_size , norm , activation , dropout , initializer and regularize . If any of those values is missing from the dictionary, the default one specified as a parameter of the decoder will be used instead. num_fc_layers (default 0): this is the number of stacked fully connected layers that the input to the feature passes through. Their output is projected in the feature's output space. fc_size (default 256 ): if a fc_size is not already specified in fc_layers this is the default fc_size that will be used for each layer. It indicates the size of the output of a fully connected layer. activation (default relu ): if an activation is not already specified in fc_layers this is the default activation that will be used for each layer. It indicates the activation function applied to the output. norm (default null ): if a norm is not already specified in fc_layers this is the default norm that will be used for each layer. It indicates the norm of the output and it can be null , batch or layer . dropout (default false ): determines if there should be a dropout layer after each layer. initializer (default null ): the initializer to use. If null , the default initialized of each variable is used ( glorot_uniform in most cases). Options are: constant , identity , zeros , ones , orthogonal , normal , uniform , truncated_normal , variance_scaling , glorot_normal , glorot_uniform , xavier_normal , xavier_uniform , he_normal , he_uniform , lecun_normal , lecun_uniform . Alternatively it is possible to specify a dictionary with a key type that identifies the type of initializer and other keys for its parameters, e.g. {type: normal, mean: 0, stddev: 0} . To know the parameters of each initializer, please refer to TensorFlow's documentation . regularize (default true ): if true the weights of the layers are added to the set of weights that get regularized by a regularization loss (if the regularization_lambda in training is greater than 0). cell_type (default rnn ): the type of recurrent cell to use. Available values are: rnn , lstm , lstm_block , lstm , ln , lstm_cudnn , gru , gru_block , gru_cudnn . For reference about the differences between the cells please refer to TensorFlow's documentstion . We suggest to use the block variants on CPU and the cudnn variants on GPU because of their increased speed. state_size (default 256 ): the size of the state of the rnn. tied_embeddings (default null ): if null the embeddings of the targets are initialized randomly, while if the values is the name of an input feature, the embeddings of that input feature will be used as embeddings of the target. The vocabulary_size of that input feature has to be the same of the output feature one and it has to have an embedding matrix (binary and numerical features will not have one, fo instance). In this case the embedding_size will be the same as the state_size . This is useful for implementing autoencoders where the encoding and decoding part of the model share parameters. embedding_size (default 256): if tied_target_embeddings is false , the input embeddings and the weights of the softmax_cross_entropy weights before the softmax_cross_entropy are not tied together and can have different sizes, this parameter describes the size of the embeddings of the inputs of the generator. beam_width (default 1 ): sampling from the rnn generator is performed using beam search. By default, with a beam of one, only a greedy sequence using always the most probably next token is generated, but the beam size can be increased. This usually leads to better performance at the expense of more computation and slower generation. attention_mechanism (default null ): the recurrent generator may use an attention mechanism. The available ones are bahdanau and luong (for more information refer to TensorFlow's documentation ). When attention is not null the expected size of the input tensor is b x s x h , which is the output of a sequence, text or timeseries input feature without reduced outputs or the output of a sequence-based combiner. If a b x h input is provided to a generator decoder using an rnn with attention instead, an error will be raised during model building. Example sequence feature entry using a tagger decoder (with default parameters) in the output features list: name : sequence_csv_column_name type : sequence reduce_inputs : sum dependencies : [] reduce_dependencies : sum loss : type : softmax_cross_entropy confidence_penalty : 0 robust_lambda : 0 class_weights : 1 class_similarities : null class_similarities_temperature : 0 labels_smoothing : 0 negative_samples : 0 sampler : null distortion : 1 unique : false fc_layers : null num_fc_layers : 0 fc_size : 256 activation : relu norm : null dropout : false initializer : null regularize : true cell_type : rnn state_size : 256 tied_target_embeddings : true embedding_size : 256 beam_width : 1 attention_mechanism : null",
      "title": "Generator Decoder"
    },
    {
      "location": "user_guide/#sequence-features-measures",
      "text": "The measures that are calculated every epoch and are available for category features are accuracy (counts the number of datapoints where all the elements of the predicted sequence are correct over the number of all datapoints), token_accuracy (computes the number of elements in all the sequences that are correctly predicted over the number of all the elements in all the sequences), last_accuracy (accuracy considering only the last element of the sequence, it is useful for being sure special end-of-sequence tokens are generated or tagged), edit_distance (the levenshtein distance between the predicted and ground truth sequence), perplexity (the perplexity of the ground truth sequence according to the model) and the loss itself. You can set either of them as validation_measure in the training section of the model definition if you set the validation_field to be the name of a sequence feature.",
      "title": "Sequence Features Measures"
    },
    {
      "location": "user_guide/#text-features",
      "text": "",
      "title": "Text Features"
    },
    {
      "location": "user_guide/#text-features-preprocessing",
      "text": "Text features are treated in the same way of sequence features, with a couple differences. Two different formattings/splittings happen, one that splits at every character and one that uses a spaCy based tokenizer (and removes stopwords) are used, and two different key are added to the HDF5 file, one containing the matrix of characters and one containing the matrix of words. The same thing happens in the JSON file, where there are dictionaries for mapping characters to integers (and the inverse) and words to integers (and their inverse). In the model definition you are able to specify which level of representation to use, if the character level or the word level. The parameters available for preprocessing are: missing_value_strategy (default fill_with_const ): what strategy to follow when there's a missing value in a binary column. The value should be one of fill_with_const (replaces the missing value with a specific value specified with the fill_value parameter), fill_with_mode (replaces the missing values with the most frequent value in the column), fill_with_mean (replaces the missing values with the mean of the values in the column), backfill (replaces the missing values with the next valid value). fill_value (default \"\" ): the value to replace the missing values with in case the missing_value_strategy is fill-value . padding (default right ): the direction of the padding. right and left are available options. padding_symbol (default <PAD> ): the string used as a padding symbol. Is is mapped to the integer ID 0 in the vocabulary. unknown_symbol (default <UNK> ): the string used as a unknown symbol. Is is mapped to the integer ID 1 in the vocabulary. lowercase (default false ): if the string has to be lowercased before being handled by the formatter. word_sequence_length_limit (default 256 ): the maximum length of the text in words. Texts that are longer than this value will be truncated, while texts that are shorter will be padded. word_tokenizer (default space_punct ): defines how to map from the raw string content of the CSV column to a sequence of words. The default value space_punct splits the string using a regular expression that separates also punctuation. Other options are: space (splits on space), underscore (splits on underscore), comma (splits on comma), json (decodes the string into a set or a list through a JSON parser), and a set of format functions that rely on spaCy . word_most_common (default 20000 ): the maximum number of most common words to be considered. If the data contains more than this amount, the most infrequent words will be treated as unknown. char_sequence_length_limit (default 1024 ): the maximum length of the text in characters. Texts that are longer than this value will be truncated, while sequences that are shorter will be padded. char_tokenizer (default characters ): defines how to map from the raw string content of the CSV column to a sequence of characters. The default value and only available option is characters and the behavior is to split the string at each character. char_most_common (default 70 ): the maximum number of most common characters to be considered. if the data contains more than this amount, the most infrequent characters will be treated as unknown.",
      "title": "Text Features Preprocessing"
    },
    {
      "location": "user_guide/#spacy-based-word-format-options",
      "text": "The spaCy based tokenizer options are functions that use the powerful tokenization and NLP preprocessing models provided the library. Several languages are available: English (code en ), Italian (code it ), Spanish (code es ), German (code de ), French (code fr ), Portuguese (code pt ), Dutch (code nl ), Greek (code el ) and Multi (code xx , useful in case you have a dataset of different languages). For each language different functions are available: - tokenize : uses spaCy tokenizer, - tokenize_filter : uses spaCy tokenizer and filters out punctuation, numbers, stopwords and words shorter than 3 characters, - tokenize_remove_stopwords : uses spaCy tokenizer and filters out stopwords, - lemmatize : uses spaCy lemmatizer, - lemmatize_filter : uses spaCy lemmatizer and filters out punctuation, numbers, stopwords and words shorter than 3 characters, - lemmatize_remove_stopwords : uses spaCy lemmatize and filters out stopwords. In order to use these options, you have to download the the spaCy model: python -m spacy download <language_code> and provide <language>_<function> as tokenizer like: english_tokenizer , italian_lemmatize_filter , multi_tokenize_filter and so on. More details on the models can be found in the spaCy documentation .",
      "title": "spaCy based word format options"
    },
    {
      "location": "user_guide/#text-input-features-and-encoders",
      "text": "The encoders are the same used for the Sequence Features . The only difference is that you can specify an additional level parameter with possible values word or char to force to use the text words or characters as inputs (by default the encoder will use word ).",
      "title": "Text Input Features and Encoders"
    },
    {
      "location": "user_guide/#text-output-features-and-decoders",
      "text": "The decoders are the same used for the Sequence Features . The only difference is that you can specify an additional level parameter with possible values word or char to force to use the text words or characters as inputs (by default the encoder will use word ).",
      "title": "Text Output Features and Decoders"
    },
    {
      "location": "user_guide/#text-features-measures",
      "text": "The measures are the same used for the Sequence Features .",
      "title": "Text Features Measures"
    },
    {
      "location": "user_guide/#time-series-features",
      "text": "",
      "title": "Time Series Features"
    },
    {
      "location": "user_guide/#time-series-features-preprocessing",
      "text": "Timeseries features are treated in the same way of sequence features, with the only difference being that the matrix in the HDF5 file does not have integer values, but float values. Moreover, there is no need for any mapping in the JSON file.",
      "title": "Time Series Features Preprocessing"
    },
    {
      "location": "user_guide/#time-series-input-features-and-encoders",
      "text": "The encoders are the same used for the Sequence Features . The only difference is that time series features don't have an embedding layer at the beginning, so the b x s placeholders (where b is the batch size and s is the sequence length) are directly mapped to a b x s x 1 tensor and then passed to the different sequential encoders.",
      "title": "Time Series Input Features and Encoders"
    },
    {
      "location": "user_guide/#time-series-output-features-and-decoders",
      "text": "There are no time series decoders at the moment (WIP), so time series cannot be used as output features.",
      "title": "Time Series Output Features and Decoders"
    },
    {
      "location": "user_guide/#time-series-features-measures",
      "text": "As no time series decoders are available at the moment, there are also no time series measures.",
      "title": "Time Series Features Measures"
    },
    {
      "location": "user_guide/#audio-features",
      "text": "",
      "title": "Audio Features"
    },
    {
      "location": "user_guide/#audio-features-preprocessing",
      "text": "Ludwig supports reads in audio files using Python's library SoundFile therefore supporting WAV, FLAC, OGG and MAT files. in_memory (default true ): defines whether image dataset will reside in memory during the training process or will be dynamically fetched from disk (useful for large datasets). In the latter case a training batch of input images will be fetched from disk each training iteration. At the moment only in_memory = true is supported. audio_file_length_limit_in_s : (default 5.0) float value that defines the maximum limit of the audio file in seconds. All files longer than this limit are cut off. All files shorter than this limit are padded with padding_value padding_value : (default 0): float value that is used for padding. norm : (default null ) the normalization method that can be used for the input data. Supported methods: null (data is not normalized), per_file (z-norm is applied on a \u201cper file\u201d level) audio_feature : (default { type: raw } ) dictionary that takes as input the audio feature type as well as additional parameters if type != raw . The following parameters can/should be defined in the dictionary: type (default raw ): defines the type of audio features to be used. Supported types at the moment are raw , stft , stft_phase , group_delay . For more detail, check Audio Input Features and Encoders . window_length_in_s : defines the window length used for the short time Fourier transformation (only needed if type != raw ). window_shift_in_s : defines the window shift used for the short time Fourier transformation (also called hop_length) (only needed if type != raw ). num_fft_points : (default window_length_in_s * sample_rate of audio file) defines the number of fft points used for the short time Fourier transformation. If num_fft_points > window_length_in_s * sample_rate , then the signal is zero-padded at the end. num_fft_points has to be >= window_length_in_s * sample_rate (only needed if type != raw ). window_type : (default hamming ): defines the type window the signal is weighted before the short time Fourier transformation. All windows provided by scipy\u2019s window function can be used (only needed if type != raw ). Example of a preprocessing specification (assuming the audio files have a sample rate of 16000): name : audio_path type : audio preprocessing : audio_file_length_limit_in_s : 7.5 audio_feature : type : stft window_length_in_s : 0.04 window_shift_in_s : 0.02 num_fft_points : 800 window_type : boxcar",
      "title": "Audio Features Preprocessing"
    },
    {
      "location": "user_guide/#audio-input-features-and-encoders",
      "text": "Audio files are transformed into one of the following types according to type in audio_feature in preprocessing . raw : audio file is transformed into a float valued tensor of size N x L x W (where N is the size of the dataset and L corresponds to audio_file_length_limit_in_s * sample_rate and W = 1 ). stft : audio is transformed to the stft magnitude. Audio file is transformed into a float valued tensor of size N x L x W (where N is the size of the dataset, L corresponds to ceil(audio_file_length_limit_in_s * sample_rate - window_length_in_s * sample_rate + 1/ window_shift_in_s * sample_rate) + 1 and W corresponds to audio_file_length_limit_in_s * sample_rate / 2 ). stft_phase : the phase information for each stft bin is appended to the stft magnitude so that the audio file is transformed into a float valued tensor of size N x L x 2W with N,L,W being equal to the ones in stft . group_delay : audio is transformed to group delay features according to Equation (23) in this paper . Group_delay features has the same tensor size as stft . The encoders are the same used for the Sequence Features . The only difference is that time series features don't have an embedding layer at the beginning, so the b x s placeholders (where b is the batch size and s is the sequence length) are directly mapped to a b x s x w (where w is W as described above) tensor and then passed to the different sequential encoders.",
      "title": "Audio Input Features and Encoders"
    },
    {
      "location": "user_guide/#audio-output-features-and-decoders",
      "text": "There are no audio decoders at the moment (WIP), so audio cannot be used as output features.",
      "title": "Audio Output Features and Decoders"
    },
    {
      "location": "user_guide/#audio-features-measures",
      "text": "As no audio decoders are available at the moment, there are also no audio measures.",
      "title": "Audio Features Measures"
    },
    {
      "location": "user_guide/#image-features",
      "text": "",
      "title": "Image Features"
    },
    {
      "location": "user_guide/#image-features-preprocessing",
      "text": "Ludwig supports both grayscale and color images. The number of channels is inferred, but make sure all your images have the same number of channels. During preprocessing, raw image files are transformed into numpy ndarrays and saved in the hdf5 format. All images in the dataset should have the same size. If they have different sizes, a resize_method , together with a target width and height , must be specified in the feature preprocessing parameters. in_memory (default true ): defines whether image dataset will reside in memory during the training process or will be dynamically fetched from disk (useful for large datasets). In the latter case a training batch of input images will be fetched from disk each training iteration. resize_method (default crop_or_pad ): available options: crop_or_pad - crops images larger than the specified width and height to the desired size or pads smalled images using edge padding; interpolate - uses interpolation to resize images to the specified width and height . height (default null ): image height in pixels, must be set if resizing is required width (default null ): image width in pixels, must be set if resizing is required num_channels (default null ): number of channels in the images. By default, if the value is null , the number of channels of the first image of the dataset will be used and if there is an image in the dataset with a different number of channels, an error will be reported. If the value specified is not null , images in the dataset will be adapted to the specified size. If the value is 1 , all images with more then one channel will be greyscaled and reduced to one channel (trasparecy will be lost). If the value is 3 all images with 1 channel will be repeated 3 times to obtain 3 channels, while images with 4 channels will lose the transparecy channel. If the value is 4 , all the images with less than 4 channels will have the remaining channels filled with zeros. scaling (default pixel_normalization ): what scaling to perform on images. By default pixel_normalization is performed, which consists in dividing each pixel values by 255, but pixel_standardization is also available, whic uses TensorFlow's per image standardization . Depending on the application, it is preferrable not to exceed a size of 256 x 256 , as bigger sizes will, in most cases, not provide much advantage in terms of performance, while they will considerably slow down training and inference and also make both forward and backward passes consume considerably more memory, leading to memory overflows on machines with limited amounts of RAM or on GPUs with limited amounts of VRAM. Example of a preprocessing specification: name : image_feature_name type : image preprocessing : height : 128 width : 128 resize_method : interpolate scaling : pixel_normalization",
      "title": "Image Features Preprocessing"
    },
    {
      "location": "user_guide/#image-input-features-and-encoders",
      "text": "Input image features are transformed into a float valued tensors of size N x H x W x C (where N is the size of the dataset and H x W is a specific resizing of the image that can be set, and C is the number of channels) and added to HDF5 with a key that reflects the name of column in the CSV. The column name is added to the JSON file, with an associated dictionary containing preprocessing information about the sizes of the resizing. Currently there are two encoders supported for images: Convolutional Stack Encoder and ResNet encoder which can be set by setting encoder parameter to stacked_cnn or resnet in the input feature dictionary in the model definition ( stacked_cnn is the default one).",
      "title": "Image Input Features and Encoders"
    },
    {
      "location": "user_guide/#convolutional-stack-encoder",
      "text": "Convolutional Stack Encoder takes the following optional parameters: conv_layers (default null ): it is a list of dictionaries containing the parameters of all the convolutional layers. The length of the list determines the number of stacked convolutional layers and the content of each dictionary determines the parameters for a specific layer. The available parameters for each layer are: filter_size , num_filters , pool_size , norm , activation and regularize . If any of those values is missing from the dictionary, the default one specified as a parameter of the encoder will be used instead. If both conv_layers and num_conv_layers are null , a default list will be assigned to conv_layers with the value [{filter_size: 7, pool_size: 3, regularize: false}, {filter_size: 7, pool_size: 3, regularize: false}, {filter_size: 3, pool_size: null, regularize: false}, {filter_size: 3, pool_size: null, regularize: false}, {filter_size: 3, pool_size: null, regularize: true}, {filter_size: 3, pool_size: 3, regularize: true}] . num_conv_layers (default null ): if conv_layers is null , this is the number of stacked convolutional layers. filter_size (default 3 ): if a filter_size is not already specified in conv_layers this is the default filter_size that will be used for each layer. It indicates how wide is the 1d convolutional filter. num_filters (default 256 ): if a num_filters is not already specified in conv_layers this is the default num_filters that will be used for each layer. It indicates the number of filters, and by consequence the output channels of the 2d convolution. pool_stride (default 1 ): if a pool_stride is not already specified in conv_layers this is the default pool_stride that will be used for each layer. fc_layers (default null ): it is a list of dictionaries containing the parameters of all the fully connected layers. The length of the list determines the number of stacked fully connected layers and the content of each dictionary determines the parameters for a specific layer. The available parameters for each layer are: fc_size , norm , activation and regularize . If any of those values is missing from the dictionary, the default one specified as a parameter of the encoder will be used instead. If both fc_layers and num_fc_layers are null , a default list will be assigned to fc_layers with the value [{fc_size: 512}, {fc_size: 256}] . (only applies if reduce_output is not null ). num_fc_layers (default 1 ): This is the number of stacked fully connected layers. fc_size (default 256 ): if a fc_size is not already specified in fc_layers this is the default fc_size that will be used for each layer. It indicates the size of the output of a fully connected layer. norm (default null ): if a norm is not already specified in fc_layers or conv_layers this is the default norm that will be used for each layer. It indicates the norm of the output and it can be null , batch or layer . activation (default relu ): if an activation is not already specified in fc_layers or conv_layers this is the default activation that will be used for each layer. It indicates the activation function applied to the output. dropout (default false ): determines if there should be a dropout layer after each layer. initializer (default null ): the initializer to use. If null , the default initialized of each variable is used ( glorot_uniform in most cases). Options are: constant , identity , zeros , ones , orthogonal , normal , uniform , truncated_normal , variance_scaling , glorot_normal , glorot_uniform , xavier_normal , xavier_uniform , he_normal , he_uniform , lecun_normal , lecun_uniform . Alternatively it is possible to specify a dictionary with a key type that identifies the type of initializer and other keys for its parameters, e.g. {type: normal, mean: 0, stddev: 0} . To know the parameters of each initializer, please refer to TensorFlow's documentation . regularize (default true ): if true the weights of the layers are added to the set of weights that get regularized by a regularization loss (if the regularization_lambda in training is greater than 0). Example image feature entry using a convolutional stack encoder (with default parameters) in the input features list: name : image_csv_column_name type : image encoder : stacked_cnn tied_weights : null conv_layers : null num_conv_layers : null filter_size : 3 num_filters : 256 pool_size : null fc_layers : null num_fc_layers : 1 fc_size : 256 activation : relu norm : null dropout : false initializer : null regularize : true preprocessing : # example pre-processing - height : 28 width : 28 num_channels : 1",
      "title": "Convolutional Stack Encoder"
    },
    {
      "location": "user_guide/#resnet-encoder",
      "text": "ResNet Encoder takes the following optional parameters: resnet_size (default 50 ): A single integer for the size of the ResNet model. If has to be one of the following values: 8 , 14 , 18 , 34 , 50 , 101 , 152 , 200 . num_filters (default 16 ): It indicates the number of filters, and by consequence the output channels of the 2d convolution. kernel_size (default 3 ): The kernel size to use for convolution. conv_stride (default 1 ): Stride size for the initial convolutional layer. first_pool_size (default null ): Pool size to be used for the first pooling layer. If none, the first pooling layer is skipped. batch_norm_momentum (default 0.9 ): Momentum of the batch norm running statistics. The suggested parameter in TensorFlow's implementation is 0.997 , but that leads to a big discrepancy between the normalization at training time and test time, so the default value is a more conservative 0.9 . batch_norm_epsilon (default 0.001 ): Epsilon of the batch norm. The suggested parameter in TensorFlow's implementation is 1e-5 , but that leads to a big discrepancy between the normalization at training time and test time, so the default value is a more conservative 0.001 . fc_layers (default null ): it is a list of dictionaries containing the parameters of all the fully connected layers. The length of the list determines the number of stacked fully connected layers and the content of each dictionary determines the parameters for a specific layer. The available parameters for each layer are: fc_size , norm , activation and regularize . If any of those values is missing from the dictionary, the default one specified as a parameter of the encoder will be used instead. If both fc_layers and num_fc_layers are null , a default list will be assigned to fc_layers with the value [{fc_size: 512}, {fc_size: 256}] . (only applies if reduce_output is not null ). num_fc_layers (default 1 ): This is the number of stacked fully connected layers. fc_size (default 256 ): if a fc_size is not already specified in fc_layers this is the default fc_size that will be used for each layer. It indicates the size of the output of a fully connected layer. norm (default null ): if a norm is not already specified in fc_layers this is the default norm that will be used for each fully connected layer. It indicates the norm of the output and it can be null , batch or layer . activation (default relu ): if an activation is not already specified in fc_layers this is the default activation that will be used for each fully connected layer. It indicates the activation function applied to the output. dropout (default false ): determines if there should be a dropout layer after each fully connected layer. initializer (default null ): the initializer to use in the fully connected layers. If null , the default initialized of each variable is used ( glorot_uniform in most cases). Options are: constant , identity , zeros , ones , orthogonal , normal , uniform , truncated_normal , variance_scaling , glorot_normal , glorot_uniform , xavier_normal , xavier_uniform , he_normal , he_uniform , lecun_normal , lecun_uniform . Alternatively it is possible to specify a dictionary with a key type that identifies the type of initializer and other keys for its parameters, e.g. {type: normal, mean: 0, stddev: 0} . To know the parameters of each initializer, please refer to TensorFlow's documentation . regularize (default true ): if true the weights of the layers are added to the set of weights that get regularized by a regularization loss (if the regularization_lambda in training is greater than 0). Example image feature entry using a ResNet encoder (with default parameters) in the input features list: name : image_csv_column_name type : image encoder : stacked_cnn tied_weights : null resnet_size : 50 num_filters : 16 kernel_size : 3 conv_stride : 1 first_pool_size : null batch_norm_momentum : 0.9 batch_norm_epsilon : 0.001 fc_layers : null num_fc_layers : 1 fc_size : 256 activation : relu norm : null dropout : false initializer : null regularize : true preprocessing : # example pre-processing - height : 224 width : 224 num_channels : 3",
      "title": "ResNet Encoder"
    },
    {
      "location": "user_guide/#image-output-features-and-decoders",
      "text": "There are no image decoders at the moment (WIP), so image cannot be used as output features.",
      "title": "Image Output Features and Decoders"
    },
    {
      "location": "user_guide/#image-features-measures",
      "text": "As no image decoders are available at the moment, there are also no image measures.",
      "title": "Image Features Measures"
    },
    {
      "location": "user_guide/#image-features_1",
      "text": "",
      "title": "Image Features"
    },
    {
      "location": "user_guide/#image-features-preprocessing_1",
      "text": "Ludwig supports both grayscale and color images. The number of channels is inferred, but make sure all your images have the same number of channels. During preprocessing, raw image files are transformed into numpy ndarrays and saved in the hdf5 format. All images in the dataset should have the same size. If they have different sizes, a resize_method , together with a target width and height , must be specified in the feature preprocessing parameters. in_memory (default true ): defines whether image dataset will reside in memory during the training process or will be dynamically fetched from disk (useful for large datasets). In the latter case a training batch of input images will be fetched from disk each training iteration. resize_method (default crop_or_pad ): available options: crop_or_pad - crops images larger than the specified width and height to the desired size or pads smalled images using edge padding; interpolate - uses interpolation to resize images to the specified width and height . height (default null ): image height in pixels, must be set if resizing is required width (default null ): image width in pixels, must be set if resizing is required num_channels (default null ): number of channels in the images. By default, if the value is null , the number of channels of the first image of the dataset will be used and if there is an image in the dataset with a different number of channels, an error will be reported. If the value specified is not null , images in the dataset will be adapted to the specified size. If the value is 1 , all images with more then one channel will be greyscaled and reduced to one channel (trasparecy will be lost). If the value is 3 all images with 1 channel will be repeated 3 times to obtain 3 channels, while images with 4 channels will lose the transparecy channel. If the value is 4 , all the images with less than 4 channels will have the remaining channels filled with zeros. scaling (default pixel_normalization ): what scaling to perform on images. By default pixel_normalization is performed, which consists in dividing each pixel values by 255, but pixel_standardization is also available, whic uses TensorFlow's per image standardization . Depending on the application, it is preferrable not to exceed a size of 256 x 256 , as bigger sizes will, in most cases, not provide much advantage in terms of performance, while they will considerably slow down training and inference and also make both forward and backward passes consume considerably more memory, leading to memory overflows on machines with limited amounts of RAM or on GPUs with limited amounts of VRAM. Example of a preprocessing specification: name : image_feature_name type : image preprocessing : height : 128 width : 128 resize_method : interpolate scaling : pixel_normalization",
      "title": "Image Features Preprocessing"
    },
    {
      "location": "user_guide/#image-input-features-and-encoders_1",
      "text": "Input image features are transformed into a float valued tensors of size N x H x W x C (where N is the size of the dataset and H x W is a specific resizing of the image that can be set, and C is the number of channels) and added to HDF5 with a key that reflects the name of column in the CSV. The column name is added to the JSON file, with an associated dictionary containing preprocessing information about the sizes of the resizing. Currently there are two encoders supported for images: Convolutional Stack Encoder and ResNet encoder which can be set by setting encoder parameter to stacked_cnn or resnet in the input feature dictionary in the model definition ( stacked_cnn is the default one).",
      "title": "Image Input Features and Encoders"
    },
    {
      "location": "user_guide/#convolutional-stack-encoder_1",
      "text": "Convolutional Stack Encoder takes the following optional parameters: conv_layers (default null ): it is a list of dictionaries containing the parameters of all the convolutional layers. The length of the list determines the number of stacked convolutional layers and the content of each dictionary determines the parameters for a specific layer. The available parameters for each layer are: filter_size , num_filters , pool_size , norm , activation and regularize . If any of those values is missing from the dictionary, the default one specified as a parameter of the encoder will be used instead. If both conv_layers and num_conv_layers are null , a default list will be assigned to conv_layers with the value [{filter_size: 7, pool_size: 3, regularize: false}, {filter_size: 7, pool_size: 3, regularize: false}, {filter_size: 3, pool_size: null, regularize: false}, {filter_size: 3, pool_size: null, regularize: false}, {filter_size: 3, pool_size: null, regularize: true}, {filter_size: 3, pool_size: 3, regularize: true}] . num_conv_layers (default null ): if conv_layers is null , this is the number of stacked convolutional layers. filter_size (default 3 ): if a filter_size is not already specified in conv_layers this is the default filter_size that will be used for each layer. It indicates how wide is the 1d convolutional filter. num_filters (default 256 ): if a num_filters is not already specified in conv_layers this is the default num_filters that will be used for each layer. It indicates the number of filters, and by consequence the output channels of the 2d convolution. pool_stride (default 1 ): if a pool_stride is not already specified in conv_layers this is the default pool_stride that will be used for each layer. fc_layers (default null ): it is a list of dictionaries containing the parameters of all the fully connected layers. The length of the list determines the number of stacked fully connected layers and the content of each dictionary determines the parameters for a specific layer. The available parameters for each layer are: fc_size , norm , activation and regularize . If any of those values is missing from the dictionary, the default one specified as a parameter of the encoder will be used instead. If both fc_layers and num_fc_layers are null , a default list will be assigned to fc_layers with the value [{fc_size: 512}, {fc_size: 256}] . (only applies if reduce_output is not null ). num_fc_layers (default 1 ): This is the number of stacked fully connected layers. fc_size (default 256 ): if a fc_size is not already specified in fc_layers this is the default fc_size that will be used for each layer. It indicates the size of the output of a fully connected layer. norm (default null ): if a norm is not already specified in fc_layers or conv_layers this is the default norm that will be used for each layer. It indicates the norm of the output and it can be null , batch or layer . activation (default relu ): if an activation is not already specified in fc_layers or conv_layers this is the default activation that will be used for each layer. It indicates the activation function applied to the output. dropout (default false ): determines if there should be a dropout layer after each layer. initializer (default null ): the initializer to use. If null , the default initialized of each variable is used ( glorot_uniform in most cases). Options are: constant , identity , zeros , ones , orthogonal , normal , uniform , truncated_normal , variance_scaling , glorot_normal , glorot_uniform , xavier_normal , xavier_uniform , he_normal , he_uniform , lecun_normal , lecun_uniform . Alternatively it is possible to specify a dictionary with a key type that identifies the type of initializer and other keys for its parameters, e.g. {type: normal, mean: 0, stddev: 0} . To know the parameters of each initializer, please refer to TensorFlow's documentation . regularize (default true ): if true the weights of the layers are added to the set of weights that get regularized by a regularization loss (if the regularization_lambda in training is greater than 0).",
      "title": "Convolutional Stack Encoder"
    },
    {
      "location": "user_guide/#resnet-encoder_1",
      "text": "ResNet Encoder takes the following optional parameters: resnet_size (default 50 ): A single integer for the size of the ResNet model. If has to be one of the following values: 8 , 14 , 18 , 34 , 50 , 101 , 152 , 200 . num_filters (default 16 ): It indicates the number of filters, and by consequence the output channels of the 2d convolution. kernel_size (default 3 ): The kernel size to use for convolution. conv_stride (default 1 ): Stride size for the initial convolutional layer. first_pool_size (default null ): Pool size to be used for the first pooling layer. If none, the first pooling layer is skipped. batch_norm_momentum (default 0.9 ): Momentum of the batch norm running statistics. The suggested parameter in TensorFlow's implementation is 0.997 , but that leads to a big discrepancy between the normalization at training time and test time, so the default value is a more conservative 0.9 . batch_norm_epsilon (default 0.001 ): Epsilon of the batch norm. The suggested parameter in TensorFlow's implementation is 1e-5 , but that leads to a big discrepancy between the normalization at training time and test time, so the default value is a more conservative 0.001 . fc_layers (default null ): it is a list of dictionaries containing the parameters of all the fully connected layers. The length of the list determines the number of stacked fully connected layers and the content of each dictionary determines the parameters for a specific layer. The available parameters for each layer are: fc_size , norm , activation and regularize . If any of those values is missing from the dictionary, the default one specified as a parameter of the encoder will be used instead. If both fc_layers and num_fc_layers are null , a default list will be assigned to fc_layers with the value [{fc_size: 512}, {fc_size: 256}] . (only applies if reduce_output is not null ). num_fc_layers (default 1 ): This is the number of stacked fully connected layers. fc_size (default 256 ): if a fc_size is not already specified in fc_layers this is the default fc_size that will be used for each layer. It indicates the size of the output of a fully connected layer. norm (default null ): if a norm is not already specified in fc_layers or conv_layers this is the default norm that will be used for each layer. It indicates the norm of the output and it can be null , batch or layer . activation (default relu ): if an activation is not already specified in fc_layers or conv_layers this is the default activation that will be used for each layer. It indicates the activation function applied to the output. dropout (default false ): determines if there should be a dropout layer after each layer. initializer (default null ): the initializer to use. If null , the default initialized of each variable is used ( glorot_uniform in most cases). Options are: constant , identity , zeros , ones , orthogonal , normal , uniform , truncated_normal , variance_scaling , glorot_normal , glorot_uniform , xavier_normal , xavier_uniform , he_normal , he_uniform , lecun_normal , lecun_uniform . Alternatively it is possible to specify a dictionary with a key type that identifies the type of initializer and other keys for its parameters, e.g. {type: normal, mean: 0, stddev: 0} . To know the parameters of each initializer, please refer to TensorFlow's documentation . regularize (default true ): if true the weights of the layers are added to the set of weights that get regularized by a regularization loss (if the regularization_lambda in training is greater than 0).",
      "title": "ResNet Encoder"
    },
    {
      "location": "user_guide/#image-output-features-and-decoders_1",
      "text": "There are no image decoders at the moment (WIP), so image cannot be used as output features.",
      "title": "Image Output Features and Decoders"
    },
    {
      "location": "user_guide/#image-features-measures_1",
      "text": "As no image decoders are available at the moment, there are also no image measures.",
      "title": "Image Features Measures"
    },
    {
      "location": "user_guide/#date-features",
      "text": "",
      "title": "Date Features"
    },
    {
      "location": "user_guide/#date-features-preprocessing",
      "text": "Ludwig will try to infer the date format automatically, but a specific fomrat can be provided. The format is the same one described in the datetime package documentation . missing_value_strategy (default fill_with_const ): what strategy to follow when there's a missing value in a binary column. The value should be one of fill_with_const (replaces the missing value with a specific value specified with the fill_value parameter), fill_with_mode (replaces the missing values with the most frequent value in the column), fill_with_mean (replaces the missing values with the mean of the values in the column), backfill (replaces the missing values with the next valid value). fill_value (default \"\" ): the value to replace the missing values with in case the missing_value_strategy is fill_value . This can be a datetime string, if left empty the current datetime will be used. datetime_format (default null ): this parameter can be either null , which implies the datetime format is inferred automaticall, or a datetime format string. Example of a preprocessing specification: name : date_feature_name type : date preprocessing : missing_value_strategy : fill_with_const fill_value : '' datetime_format : \"%d %b %Y\"",
      "title": "Date Features Preprocessing"
    },
    {
      "location": "user_guide/#date-input-features-and-encoders",
      "text": "Input image features are transformed into a int valued tensors of size N x 8 (where N is the size of the dataset and the 8 dimensions contain year, month, day, weekday, yearday, hour, minute and second) and added to HDF5 with a key that reflects the name of column in the CSV. Currently there are two encoders supported for images: Convolutional Stack Encoder and ResNet encoder which can be set by setting encoder parameter to stacked_cnn or resnet in the input feature dictionary in the model definition ( stacked_cnn is the default one).",
      "title": "Date Input Features and Encoders"
    },
    {
      "location": "user_guide/#embed-encoder_1",
      "text": "This encoder passes the year through a fully connected layer of one neuron and embeds all other elements for the date, concatenates them and passes the concatenated representation through fully connected layers. It takes the following optional parameters: embedding_size (default 10 ): it is the maximum embedding size adopted.. embeddings_on_cpu (default false ): by default embeddings matrices are stored on GPU memory if a GPU is used, as it allows for faster access, but in some cases the embedding matrix may be really big and this parameter forces the placement of the embedding matrix in regular memory and the CPU is used to resolve them, slightly slowing down the process as a result of data transfer between CPU and GPU memory. dropout (default false ): determines if there should be a dropout layer before returning the encoder output. fc_layers (default null ): it is a list of dictionaries containing the parameters of all the fully connected layers. The length of the list determines the number of stacked fully connected layers and the content of each dictionary determines the parameters for a specific layer. The available parameters for each layer are: fc_size , norm , activation and regularize . If any of those values is missing from the dictionary, the default one specified as a parameter of the encoder will be used instead. If both fc_layers and num_fc_layers are null , a default list will be assigned to fc_layers with the value [{fc_size: 512}, {fc_size: 256}] . (only applies if reduce_output is not null ). num_fc_layers (default 0 ): This is the number of stacked fully connected layers. fc_size (default 10 ): if a fc_size is not already specified in fc_layers this is the default fc_size that will be used for each layer. It indicates the size of the output of a fully connected layer. norm (default null ): if a norm is not already specified in fc_layers or conv_layers this is the default norm that will be used for each layer. It indicates the norm of the output and it can be null , batch or layer . activation (default relu ): if an activation is not already specified in fc_layers or conv_layers this is the default activation that will be used for each layer. It indicates the activation function applied to the output. initializer (default null ): the initializer to use. If null , the default initialized of each variable is used ( glorot_uniform in most cases). Options are: constant , identity , zeros , ones , orthogonal , normal , uniform , truncated_normal , variance_scaling , glorot_normal , glorot_uniform , xavier_normal , xavier_uniform , he_normal , he_uniform , lecun_normal , lecun_uniform . Alternatively it is possible to specify a dictionary with a key type that identifies the type of initializer and other keys for its parameters, e.g. {type: normal, mean: 0, stddev: 0} . To know the parameters of each initializer, please refer to TensorFlow's documentation . regularize (default true ): if true the embedding weights are added to the set of weights that get regularized by a regularization loss (if the regularization_lambda in training is greater than 0). Example date feature entry in the output features list using an embed encoder: name : date_csv_column_name type : date encoder : embed embedding_size : 10 embeddings_on_cpu : false dropout : false fc_layers : null num_fc_layers : 0 fc_size : 10 norm : null activation : relu initializer : null regularize : true reduce_output : last",
      "title": "Embed Encoder"
    },
    {
      "location": "user_guide/#wave-encoder",
      "text": "This encoder passes the year through a fully connected layer of one neuron and represents all other elements for the date by taking the sine of their value with a different period (12 for months, 31 for days, etc.), concatenates them and passes the concatenated representation through fully connected layers. It takes the following optional parameters: fc_layers (default null ): it is a list of dictionaries containing the parameters of all the fully connected layers. The length of the list determines the number of stacked fully connected layers and the content of each dictionary determines the parameters for a specific layer. The available parameters for each layer are: fc_size , norm , activation and regularize . If any of those values is missing from the dictionary, the default one specified as a parameter of the encoder will be used instead. If both fc_layers and num_fc_layers are null , a default list will be assigned to fc_layers with the value [{fc_size: 512}, {fc_size: 256}] . (only applies if reduce_output is not null ). num_fc_layers (default 0 ): This is the number of stacked fully connected layers. fc_size (default 10 ): if a fc_size is not already specified in fc_layers this is the default fc_size that will be used for each layer. It indicates the size of the output of a fully connected layer. norm (default null ): if a norm is not already specified in fc_layers or conv_layers this is the default norm that will be used for each layer. It indicates the norm of the output and it can be null , batch or layer . activation (default relu ): if an activation is not already specified in fc_layers or conv_layers this is the default activation that will be used for each layer. It indicates the activation function applied to the output. dropout (default false ): determines if there should be a dropout layer before returning the encoder output. initializer (default null ): the initializer to use. If null , the default initialized of each variable is used ( glorot_uniform in most cases). Options are: constant , identity , zeros , ones , orthogonal , normal , uniform , truncated_normal , variance_scaling , glorot_normal , glorot_uniform , xavier_normal , xavier_uniform , he_normal , he_uniform , lecun_normal , lecun_uniform . Alternatively it is possible to specify a dictionary with a key type that identifies the type of initializer and other keys for its parameters, e.g. {type: normal, mean: 0, stddev: 0} . To know the parameters of each initializer, please refer to TensorFlow's documentation . regularize (default true ): if true the embedding weights are added to the set of weights that get regularized by a regularization loss (if the regularization_lambda in training is greater than 0). Example date feature entry in the output features list using a wave encoder: name : date_csv_column_name type : date encoder : wave fc_layers : null num_fc_layers : 0 fc_size : 10 norm : null activation : relu dropout : false initializer : null regularize : true reduce_output : last",
      "title": "Wave Encoder"
    },
    {
      "location": "user_guide/#date-output-features-and-decoders",
      "text": "There are no date decoders at the moment (WIP), so date cannot be used as output features.",
      "title": "Date Output Features and Decoders"
    },
    {
      "location": "user_guide/#date-features-measures",
      "text": "As no date decoders are available at the moment, there are also no date measures.",
      "title": "Date Features Measures"
    },
    {
      "location": "user_guide/#combiners",
      "text": "Combiners are the part of the model that take the outputs of the encoders of all input features and combine them before providing the combined representation to the different output decoders. If you don't specify a combiner, the concat combiner will be used.",
      "title": "Combiners"
    },
    {
      "location": "user_guide/#concat-combiner",
      "text": "The concat combiner assumes all outputs from encoders are tensors of size b x h where b is the batch size and h is the hidden dimension, which can be different for each input. It concatenates along the h dimension, and then (optionally) passes the concatenated tensor through a stack of fully connected layers. It returns the final b x h' tensor where h' is the size of the last fully connected layer or the sum of the sizes of the h of all inputs in the case there are no fully connected layers. If there's only one input feature and no fully connected layers are specified, the output of the input feature is just passed through as output. +-----------+ |Input | |Feature 1 +-+ +-----------+ | +---------+ +-----------+ | +------+ |Fully | |... +--->Concat+--->Connected+-> +-----------+ | +------+ |Layers | +-----------+ | +---------+ |Input +-+ |Feature N | +-----------+ These are the available parameters of a concat combiner fc_layers (default null ): it is a list of dictionaries containing the parameters of all the fully connected layers. The length of the list determines the number of stacked fully connected layers and the content of each dictionary determines the parameters for a specific layer. The available parameters for each layer are: fc_size , norm , activation , dropout , initializer and regularize . If any of those values is missing from the dictionary, the default one specified as a parameter of the decoder will be used instead. num_fc_layers (default 0): this is the number of stacked fully connected layers that the input to the feature passes through. Their output is projected in the feature's output space. fc_size (default 256 ): if a fc_size is not already specified in fc_layers this is the default fc_size that will be used for each layer. It indicates the size of the output of a fully connected layer. activation (default relu ): if an activation is not already specified in fc_layers this is the default activation that will be used for each layer. It indicates the activation function applied to the output. norm (default null ): if a norm is not already specified in fc_layers this is the default norm that will be used for each layer. It indicates the norm of the output and it can be null , batch or layer . dropout (default false ): determines if there should be a dropout layer after each layer. initializer (default null ): the initializer to use. If null , the default initialized of each variable is used ( glorot_uniform in most cases). Options are: constant , identity , zeros , ones , orthogonal , normal , uniform , truncated_normal , variance_scaling , glorot_normal , glorot_uniform , xavier_normal , xavier_uniform , he_normal , he_uniform , lecun_normal , lecun_uniform . Alternatively it is possible to specify a dictionary with a key type that identifies the type of initializer and other keys for its parameters, e.g. {type: normal, mean: 0, stddev: 0} . To know the parameters of each initializer, please refer to TensorFlow's documentation . regularize (default true ): if true the weights of the layers are added to the set of weights that get regularized by a regularization loss (if the regularization_lambda in training is greater than 0). Example concat combiner in the model definition: type : concat fc_layers : null num_fc_layers : 0 fc_size : 256 activation : relu norm : null dropout : false initializer : null regularize : true",
      "title": "Concat Combiner"
    },
    {
      "location": "user_guide/#sequence-concat-combiner",
      "text": "The sequence concat combiner assumes at least one output from encoders is a tensors of size b x s x h where b is the batch size, s is the length of the sequence and h is the hidden dimension. The sequence / text / sequential input can be specified with the main_sequence_feature parameter that should have the name of the sequential feature as value. If no main_sequence_feature is specified, the combiner will look through all the features in the order they are defined in the model definition and will look for a feature with a rank 3 tensor output (sequence, text or time series). If it cannot find one it will raise an exception, otherwise the output of that feature will be used for concatenating the other features along the sequence s dimension. If there are other input features with a rank 3 output tensor, the combiner will concatenate them alongside the s dimension, which means that all of them must have identical s dimension, otherwise an error will be thrown. Specifically, as the placeholders of the sequential features are of dimension [None, None] in order to make the BucketedBatcher trim longer sequences to their actual length, the check if the sequences are of the same length cannot be performed at model building time, and a dimension mismatch error will be returned during training when a datapoint with two sequential features of different lengths are provided. Other features that have a b x h rank 2 tensor output will be replicated s times and concatenated to the s dimension. The final output is a b x s x h' tensor where h' is the size of the concatenation of the h dimensions of all input features. +-----------+ |Input | |Feature 1 +-+ +-----------+ | +---------+ +-----------+ | +------+ |Fully | |... +--->Concat+--->Connected+-> +-----------+ | +------+ |Layers | +-----------+ | +---------+ |Input +-+ |Feature N | +-----------+ These are the available parameters of a sequence concat combiner main_sequence_feature (default null ): name fo the sequence / text/ time series feature to concatenate the outputs of the other features to. If no main_sequence_feature is specified, the combiner will look through all the features in the order they are defined in the model definition and will look for a feature with a rank 3 tensor output (sequence, text or time series). If it cannot find one it will raise an exception, otherwise the output of that feature will be used for concatenating the other features along the sequence s dimension. If there are other input features with a rank 3 output tensor, the combiner will concatenate them alongside the s dimension, which means that all of them must have identical s dimension, otherwise an error will be thrown. Example sequence concat combiner in the model definition: type : sequence_concat main_sequence_feature : null",
      "title": "Sequence Concat Combiner"
    },
    {
      "location": "user_guide/#sequence-combiner",
      "text": "The sequence combiner stacks a sequence concat combiner with a sequence encoder one on top of each other. All the considerations about inputs tensor ranks describer for the sequence concat combiner apply also in this case, but the main difference is that this combiner uses the b x s x h' output of the sequence concat combiner, where b is the batch size, s is the sequence length and h' is the sum of the hidden dimensions of all input features, as input fo any of the sequence encoders described in the sequence features encoders section . Refer to that section for more detailed information about the sequence encoders and their parameters. Also all the considerations on the shape of the outputs done for the sequence encoders apply in this case too. Sequence Feature Output +---------+ |emb seq 1| +---------+ |... +--+ +---------+ | +-----------------+ |emb seq n| | |emb seq 1|emb oth| +--------+ +---------+ | +-----------------+ |Sequence| +-->... |... +-->+Encoder +-> Other | +-----------------+ | | Feature | |emb seq n|emb oth| +--------+ Output | +-----------------+ | +-------+ | |emb oth+----+ +-------+ Example sequence concat combiner in the model definition: type : sequence main_sequence_feature : null encoder : parallel_cnn ... encoder parameters ...",
      "title": "Sequence Combiner"
    },
    {
      "location": "user_guide/#distributed-training",
      "text": "You can distribute the training and prediction of your models using Horovod , which allows to train on a single machine with multiple GPUs as well as on multiple machines with multiple GPUs. In order to use distributed training you have to install Horovod as detailed in Horovod's installation instructions (which include installing OpenMPI or other MPI implementations) and then install the two packages: pip install horovod mpi4py Horovod works by, in practice, increasing the batch size and distributing a part of each batch to a different node and collecting the gradients from all the nodes in a smart and scalable way. It also adjusts the learning rate to counter balance the increase in the batch size. The advantage is that training speed scales almost linearly with the number of nodes. experiment , train and predict commands accept a `--use_horovod argument that instructs the model building, training and prediction phases to be conducted using Horovod in a distributed way. An MPI command specifying which machines and / or GPUs to use, together with a few more parameters, must be provided before the call to Ludwig's command. For instance, in order to train a Ludwig model on a local machine with four GPUs one you can run: mpirun -np 4 \\ -H localhost:4 \\ -bind-to none -map-by slot \\ -x NCCL_DEBUG=INFO -x LD_LIBRARY_PATH -x PATH \\ -mca pml ob1 -mca btl ^openib \\ ludwig train --use_horovod ...other Ludwig parameters... While for training on four remote machines with four GPUs each you can run: mpirun -np 16 \\ -H server1:4,server2:4,server3:4,server4:4 \\ -bind-to none -map-by slot \\ -x NCCL_DEBUG=INFO -x LD_LIBRARY_PATH -x PATH \\ -mca pml ob1 -mca btl ^openib \\ ludwig train --use_horovod ...other Ludwig parameters... The same applies to experiment and predict . More details on the installation of MPI and how to run Horovod can be found in Horovod's documentation .",
      "title": "Distributed Training"
    },
    {
      "location": "user_guide/#programmatic-api",
      "text": "Ludwig functionalities can also be accessed through a programmatic API. The API consists of one LudwigModel class that can be initialized with a model definition dictionary and then can be trained with data coming in the form of a dataframe or a CSV file. Pretrained models can be loaded and can be used to obtain predictions on new data, again either in dataframe or CSV format. A detailed documentation of all the functions available in LudwigModel is provided in the API documentation .",
      "title": "Programmatic API"
    },
    {
      "location": "user_guide/#training-a-model",
      "text": "To train a model one has first to initialize it using the initializer LudwigModel() and a model definition dictionary, and then calling the train() function using either a dataframe or a CSV file. from ludwig.api import LudwigModel model_definition = { ... } model = LudwigModel ( model_definition ) train_stats = model . train ( data_csv = csv_file_path ) # or train_stats = model . train ( data_df = dataframe ) model_definition is a dictionary that has the same key-value structure of a model definition YAML file, as it's technically equivalent as parsing the YAML file into a Python dictionary. train_statistics will be a dictionary containing statistics about the training. The contents are exactly the same of the training_statistics.json file produced by the experiment and train commands.",
      "title": "Training a Model"
    },
    {
      "location": "user_guide/#loading-a-pre-trained-model",
      "text": "In order to load a pre-trained Ludwig model you have to call the static function load() of the LudwigModel class providing the path containing the model. from ludwig.api import LudwigModel model = LudwigModel . load ( model_path )",
      "title": "Loading a Pre-trained Model"
    },
    {
      "location": "user_guide/#predicting",
      "text": "Either a newly trained model or a pre-trained loaded model can be used for predicting on new data using the predict() function of the model object. The CSV / dataframe has to contain columns with the same names of all the input features of the model. predictions = model . predict ( dataset_csv = csv_file_path ) #or predictions = model . predict ( dataset_df = dataframe ) predictions will be a dataframe containing the prediction and confidence score / probability of all output features. If you want to compute also measures on the quality of the predictions you can run: predictions , test_stats = model . test ( dataset_csv = csv_file_path ) #or predictions , test_stats = model . test ( dataset_df = dataframe ) In this case the CSV / dataframe should also contain columns with the same names of all the output features, as their content is going to be used as ground truth to compare the predictions against and compute the measures and test_statistics will be a dictionary containing several measures of quality depending on the type of each output feature (e.g. category features will have an accuracy measure and a confusion matrix, among other measures, associated to them, while numerical features will have measures like mean squared loss and R2 among others).",
      "title": "Predicting"
    },
    {
      "location": "user_guide/#visualizations",
      "text": "Several visualization can be obtained from the result files from both train , predict and experiment by using the visualize command. The command has several parameters, but not all the visualizations use all of them. Let's first present the parameters of the general script, and then, for each available visualization, we will discuss about the specific parameters needed and what visualization they produce. usage: ludwig visualize [options] This script analyzes results and shows some nice plots. optional arguments: -h, --help show this help message and exit -d DATA_CSV, --data_csv DATA_CSV raw data file -g GROUND_TRUTH, --ground_truth GROUND_TRUTH ground truth file -gm GROUND_TRUTH_METADATA, --ground_truth_metadata GROUND_TRUTH_METADATA input metadata JSON file -v {learning_curves,compare_performance,compare_classifiers_performance_from_prob,compare_classifiers_performance_from_pred,compare_classifiers_performance_subset,compare_classifiers_performance_changing_k,compare_classifiers_multiclass_multimetric,compare_classifiers_predictions,compare_classifiers_predictions_distribution,confidence_thresholding,confidence_thresholding_data_vs_acc,confidence_thresholding_data_vs_acc_subset,confidence_thresholding_data_vs_acc_subset_per_class,confidence_thresholding_2thresholds_2d,confidence_thresholding_2thresholds_3d,binary_threshold_vs_metric,roc_curves,roc_curves_from_test_statistics,calibration_1_vs_all,calibration_multiclass,confusion_matrix,frequency_vs_f1}, --visualization {learning_curves,compare_performance,compare_classifiers_performance_from_prob,compare_classifiers_performance_from_pred,compare_classifiers_performance_subset,compare_classifiers_performance_changing_k,compare_classifiers_multiclass_multimetric,compare_classifiers_predictions,compare_classifiers_predictions_distribution,confidence_thresholding,confidence_thresholding_data_vs_acc,confidence_thresholding_data_vs_acc_subset,confidence_thresholding_data_vs_acc_subset_per_class,confidence_thresholding_2thresholds_2d,confidence_thresholding_2thresholds_3d,binary_threshold_vs_metric,roc_curves,roc_curves_from_test_statistics,calibration_1_vs_all,calibration_multiclass,confusion_matrix,frequency_vs_f1} type of visualization -f FIELD, --field FIELD field containing ground truth -tf THRESHOLD_FIELDS [THRESHOLD_FIELDS ...], --threshold_fields THRESHOLD_FIELDS [THRESHOLD_FIELDS ...] fields for 2d threshold -pred PREDICTIONS [PREDICTIONS ...], --predictions PREDICTIONS [PREDICTIONS ...] predictions files -prob PROBABILITIES [PROBABILITIES ...], --probabilities PROBABILITIES [PROBABILITIES ...] probabilities files -trs TRAINING_STATS [TRAINING_STATS ...], --training_statistics TRAINING_STATS [TRAINING_STATS ...] training stats files -tes TEST_STATS [TEST_STATS ...], --test_statistics TEST_STATS [TEST_STATS ...] test stats files -mn MODEL_NAMES [MODEL_NAMES ...], --model_names MODEL_NAMES [MODEL_NAMES ...] names of the models to use as labels -tn TOP_N_CLASSES [TOP_N_CLASSES ...], --top_n_classes TOP_N_CLASSES [TOP_N_CLASSES ...] number of classes to plot -k TOP_K, --top_k TOP_K number of elements in the ranklist to consider -ll LABELS_LIMIT, --labels_limit LABELS_LIMIT maximum numbers of labels. If labels in dataset are higher than this number, \"rare\" label -ss {ground_truth,predictions}, --subset {ground_truth,predictions} type of subset filtering -n, --normalize normalize rows in confusion matrix -m METRICS [METRICS ...], --metrics METRICS [METRICS ...] metrics to dispay in threshold_vs_metric -pl POSITIVE_LABEL, --positive_label POSITIVE_LABEL label of the positive class for the roc curve -l {critical,error,warning,info,debug,notset}, --logging_level {critical,error,warning,info,debug,notset} the level of logging to use Some additional information on the parameters: The list parameters are considered to be aligned, meaning predictions , probabilities , training_statistics , test_statistics and model_names are indexed altogether, for instance the name of the model producing the second predictions in the list will be the second in the model names. data_csv is intended to be the data the model(s) were trained on. ground_truth and ground_truth_metadata are respectively the HDF5 and JSON file obtained during training preprocessing. If you plan to use the visualizations then be sure not to use the skip_save_preprocessing when training. Those files are needed because they contain the split performed at preprocessing time, so it is easy to extract the test set from them. field is the output feature to use for creating the visualization. Other parameters will be detailed for each visualization as different ones use them differently.",
      "title": "Visualizations"
    },
    {
      "location": "user_guide/#learning-curves",
      "text": "",
      "title": "Learning Curves"
    },
    {
      "location": "user_guide/#learning_curves",
      "text": "This visualization uses the training_statistics and model_names parameters. For each model (in the aligned lists of training_statistics and model_names ) and for each output feature and measure of the model, it produces a line plot showing how that measure changed over the course of the epochs of training on the training and validation sets.",
      "title": "learning_curves"
    },
    {
      "location": "user_guide/#confusion-matrix",
      "text": "",
      "title": "Confusion Matrix"
    },
    {
      "location": "user_guide/#confusion_matrix",
      "text": "This visualization uses the top_n_classes , normalize , ground_truth_metadata , test_statistics and model_names parameters. For each model (in the aligned lists of test_statistics and model_names ) it produces a heatmap of the confusion matrix in the predictions for each field that has a confusion matrix in test_statistics . The value of top_n_classes limits the heatmap to the n most frequent classes. The second plot produced, is a barplot showing the entropy of each class, ranked from most entropic to least entropic.",
      "title": "confusion_matrix"
    },
    {
      "location": "user_guide/#compare-performance",
      "text": "",
      "title": "Compare Performance"
    },
    {
      "location": "user_guide/#compare_performance",
      "text": "This visualization uses the field , test_statistics and model_names parameters. For each model (in the aligned lists of test_statistics and model_names ) it produces bars in a bar plot, one for each overall metric available in the test_statistics file for the specified field .",
      "title": "compare_performance"
    },
    {
      "location": "user_guide/#compare_classifiers_performance_from_prob",
      "text": "This visualization uses the ground_truth , field , probabilities and model_names parameters. field needs to be a category. For each model (in the aligned lists of probabilities and model_names ) it produces bars in a bar plot, one for each overall metric computed on the fly from the probabilities of predictions for the specified field .",
      "title": "compare_classifiers_performance_from_prob"
    },
    {
      "location": "user_guide/#compare_classifiers_performance_from_pred",
      "text": "This visualization uses the ground_truth , ground_truth_metadata , field , predictions and model_names parameters. field needs to be a category. For each model (in the aligned lists of predictions and model_names ) it produces bars in a bar plot, one for each overall metric computed on the fly from the predictions for the specified field .",
      "title": "compare_classifiers_performance_from_pred"
    },
    {
      "location": "user_guide/#compare_classifiers_performance_subset",
      "text": "This visualization uses the top_n_classes , subset , ground_truth , ground_truth_metadata , field , probabilities and model_names parameters. field needs to be a category. For each model (in the aligned lists of predictions and model_names ) it produces bars in a bar plot, one for each overall metric computed on the fly from the probabilities predictions for the specified field , considering only a subset of the full training set. The way the subset is obtained is using the top_n_classes and subset parameters. If the values of subset is ground_truth , then only datapoints where the ground truth class is within the top n most frequent ones will be considered as test set, and the percentage of datapoints that have been kept from the original set will be displayed. If the values of subset is predictions , then only datapoints where the the model predicts a class that is within the top n most frequent ones will be considered as test set, and the percentage of datapoints that have been kept from the original set will be displayed for each model.",
      "title": "compare_classifiers_performance_subset"
    },
    {
      "location": "user_guide/#compare_classifiers_performance_changing_k",
      "text": "This visualization uses the top_k , ground_truth , field , probabilities and model_names parameters. field needs to be a category. For each model (in the aligned lists of probabilities and model_names ) it produces a line plot that shows the Hits@K measure (that counts a prediction as correct if the model produces it among the first k ) while changing k from 1 to top_k for the specified field .",
      "title": "compare_classifiers_performance_changing_k"
    },
    {
      "location": "user_guide/#compare_classifiers_multiclass_multimetric",
      "text": "This visualization uses the top_n_classes , ground_truth_metadata , field , test_statistics and model_names parameters. field needs to be a category. For each model (in the aligned lists of test_statistics and model_names ) it produces four plots that show the precision, recall and F1 of the model on several classes for the specified field . The first one show the measures on the n most frequent classes. The second one shows the measures on the n classes where the model performs the best. The third one shows the measures on the n classes where the model performs the worst. The fourth one shows the measures on all the classes, sorted by their frequency. This could become unreadable in case the number of classes is really high.",
      "title": "compare_classifiers_multiclass_multimetric"
    },
    {
      "location": "user_guide/#compare-classifier-predictions",
      "text": "",
      "title": "Compare Classifier Predictions"
    },
    {
      "location": "user_guide/#compare_classifiers_predictions",
      "text": "This visualization uses the ground_truth , field , predictions and model_names parameters. field needs to be a category and there must be two and only two models (in the aligned lists of predictions and model_names ). This visualization produces a pie chart comparing the predictions of the two models for the specified field .",
      "title": "compare_classifiers_predictions"
    },
    {
      "location": "user_guide/#compare_classifiers_predictions_distribution",
      "text": "This visualization uses the ground_truth , field , predictions and model_names parameters. field needs to be a category. This visualization produces a radar plot comparing the distributions of predictions of the models for the first 10 classes of the specified field .",
      "title": "compare_classifiers_predictions_distribution"
    },
    {
      "location": "user_guide/#confidence_thresholding",
      "text": "",
      "title": "Confidence_Thresholding"
    },
    {
      "location": "user_guide/#confidence_thresholding_1",
      "text": "This visualization uses the ground_truth , field , probabilities and model_names parameters. field needs to be a category. For each model (in the aligned lists of probabilities and model_names ) it produces a pair of lines indicating the accuracy of the model and the data coverage while increasing a threshold (x axis) on the probabilities of predictions for the specified field .",
      "title": "confidence_thresholding"
    },
    {
      "location": "user_guide/#confidence_thresholding_data_vs_acc",
      "text": "This visualization uses the ground_truth , field , probabilities and model_names parameters. field needs to be a category. For each model (in the aligned lists of probabilities and model_names ) it produces a line indicating the accuracy of the model and the data coverage while increasing a threshold on the probabilities of predictions for the specified field . The difference with confidence_thresholding is that it uses two axes instead of three, not visualizing the threshold and having coverage as x axis instead of the threshold.",
      "title": "confidence_thresholding_data_vs_acc"
    },
    {
      "location": "user_guide/#confidence_thresholding_data_vs_acc_subset",
      "text": "This visualization uses the top_n_classes , subset , ground_truth , field , probabilities and model_names parameters. field needs to be a category. For each model (in the aligned lists of probabilities and model_names ) it produces a line indicating the accuracy of the model and the data coverage while increasing a threshold on the probabilities of predictions for the specified field , considering only a subset of the full training set. The way the subset is obtained is using the top_n_classes and subset parameters.. The difference with confidence_thresholding is that it uses two axes instead of three, not visualizing the threshold and having coverage as x axis instead of the threshold. If the values of subset is ground_truth , then only datapoints where the ground truth class is within the top n most frequent ones will be considered as test set, and the percentage of datapoints that have been kept from the original set will be displayed. If the values of subset is predictions , then only datapoints where the the model predicts a class that is within the top n most frequent ones will be considered as test set, and the percentage of datapoints that have been kept from the original set will be displayed for each model.",
      "title": "confidence_thresholding_data_vs_acc_subset"
    },
    {
      "location": "user_guide/#confidence_thresholding_data_vs_acc_subset_per_class",
      "text": "This visualization uses the top_n_classes , subset , ground_truth , ground_truth_metadata , field , probabilities and model_names parameters. field needs to be a category. For each model (in the aligned lists of probabilities and model_names ) it produces a line indicating the accuracy of the model and the data coverage while increasing a threshold on the probabilities of predictions for the specified field , considering only a subset of the full training set. The way the subset is obtained is using the top_n_classes and subset parameters.. The difference with confidence_thresholding is that it uses two axes instead of three, not visualizing the threshold and having coverage as x axis instead of the threshold. If the values of subset is ground_truth , then only datapoints where the ground truth class is within the top n most frequent ones will be considered as test set, and the percentage of datapoints that have been kept from the original set will be displayed. If the values of subset is predictions , then only datapoints where the the model predicts a class that is within the top n most frequent ones will be considered as test set, and the percentage of datapoints that have been kept from the original set will be displayed for each model. The difference with confidence_thresholding_data_vs_acc_subset is that it produces one plot per class within the top_n_classes .",
      "title": "confidence_thresholding_data_vs_acc_subset_per_class"
    },
    {
      "location": "user_guide/#confidence_thresholding_2thresholds_2d",
      "text": "This visualization uses the ground_truth , threshold_fields , probabilities and model_names parameters. threshold_fields need to be exactly two, either category or binary. probabilities need to be exactly two, aligned with threshold_fields . model_names has to be exactly one. Three plots are produced. The first plot shows several semi transparent lines. They summarize the 3d surfaces displayed by confidence_thresholding_2thresholds_3d that have thresholds on the confidence of the predictions of the two threshold_fields as x and y axes and either the data coverage percentage or the accuracy as z axis. Each line represents a slice of the data coverage surface projected onto the accuracy surface. The second plot shows the max of all the lines displayed in the first plot. The third plot shows the max line and the values of the thresholds that obtained a specific data coverage vs accuracy pair of values.",
      "title": "confidence_thresholding_2thresholds_2d"
    },
    {
      "location": "user_guide/#confidence_thresholding_2thresholds_3d",
      "text": "This visualization uses the ground_truth , threshold_fields and probabilities parameters. threshold_fields need to be exactly two, either category or binary. probabilities need to be exactly two, aligned with threshold_fields . The plot shows the 3d surfaces displayed by confidence_thresholding_2thresholds_3d that have thresholds on the confidence of the predictions of the two threshold_fields as x and y axes and either the data coverage percentage or the accuracy as z axis.",
      "title": "confidence_thresholding_2thresholds_3d"
    },
    {
      "location": "user_guide/#binary-threshold-vs-metric",
      "text": "",
      "title": "Binary Threshold vs. Metric"
    },
    {
      "location": "user_guide/#binary_threshold_vs_metric",
      "text": "This visualization uses the positive_label , metrics , ground_truth , field , probabilities and model_names parameters. field can be a category or binary feature. For each metric specified in metrics (options are f1 , precision , recall , accuracy ), this visualization produces a line chart plotting a threshold on the confidence of the model against the metric for the specified field . If field is a category feature, positive_label indicates which is the class to be considered positive class and all the others will be considered negative. It needs to be an integer, to figure out the association between classes and integers check the ground_truth_metadata JSON file.",
      "title": "binary_threshold_vs_metric"
    },
    {
      "location": "user_guide/#roc-curves",
      "text": "",
      "title": "ROC Curves"
    },
    {
      "location": "user_guide/#roc_curves",
      "text": "This visualization uses the positive_label , ground_truth , field , probabilities and model_names parameters. field can be a category or binary feature. This visualization produces a line chart plotting the roc curves for the specified field . If field is a category feature, positive_label indicates which is the class to be considered positive class and all the others will be considered negative. It needs to be an integer, to figure out the association between classes and integers check the ground_truth_metadata JSON file.",
      "title": "roc_curves"
    },
    {
      "location": "user_guide/#roc_curves_from_test_statistics",
      "text": "This visualization uses the field , test_statistics and model_names parameters. field needs to be binary feature. This visualization produces a line chart plotting the roc curves for the specified field .",
      "title": "roc_curves_from_test_statistics"
    },
    {
      "location": "user_guide/#calibration-plot",
      "text": "",
      "title": "Calibration Plot"
    },
    {
      "location": "user_guide/#calibration_1_vs_all",
      "text": "This visualization uses the top_k , ground_truth , field , probabilities and model_names parameters. field needs to be a category or binary. For each class or each of the k most frequent classes if top_k is specified, it produces two plots computed on the fly from the probabilities of predictions for the specified field . The first plot is a calibration curve that shows the calibration of the predictions considering the current class to be the true one and all others to be a false one, drawing one line for each model (in the aligned lists of probabilities and model_names ). The second plot shows the distributions of the predictions considering the current class to be the true one and all others to be a false one, drawing the distribution for each model (in the aligned lists of probabilities and model_names ).",
      "title": "calibration_1_vs_all"
    },
    {
      "location": "user_guide/#calibration_multiclass",
      "text": "This visualization uses the ground_truth , field , probabilities and model_names parameters. field needs to be a category. For each class, produces two plots computed on the fly from the probabilities of predictions for the specified field . The first plot is a calibration curve that shows the calibration of the predictions considering al classes, drawing one line for each model (in the aligned lists of probabilities and model_names ). The second plot shows a bar plot of the brier score (that calculates how calibrated are the probabilities of the predictions of a model), drawing one bar for each model (in the aligned lists of probabilities and model_names ).",
      "title": "calibration_multiclass"
    },
    {
      "location": "user_guide/#class-frequency-vs-f1-score",
      "text": "",
      "title": "Class Frequency vs. F1 score"
    },
    {
      "location": "user_guide/#frequency_vs_f1",
      "text": "This visualization uses the ground_truth_metadata , field , test_statistics and model_names parameters. field needs to be a category. For each model (in the aligned lists of test_statistics and model_names ), produces two plots statistics of predictions for the specified field . The first plot is a line plot with one x axis representing the different classes and two vertical axes colored in orange and blue respectively. The orange one is the frequency of the class and an orange line is plotted to show the trend. The blue one is the F1 score for that class and a blue line is plotted to show the trend. The classes on the x axis are sorted by f1 score. The second plot has the same structure of the first one, but the axes are flipped and the classes on the x axis are sorted by frequency.",
      "title": "frequency_vs_f1"
    },
    {
      "location": "api/LudwigModel/",
      "text": "[source] LudwigModel class \u00b6 ludwig . api . LudwigModel ( model_definition , model_definition_file = None , logging_level = 40 ) Class that allows access to high level Ludwig functionalities. Inputs model_definition (dict): a dictionary containing information needed to build a model. Refer to the [User Guide] (http://ludwig.ai/user_guide/#model-definition) for details. model_definition_file (string, optional, default: None ): path to a YAML file containing the model definition. If available it will be used instead of the model_definition dict. logging_level (int, default: logging.ERROR ): logging level to use for logging. Use logging constants like logging.DEBUG , logging.INFO and logging.ERROR . By default only errors will be printed. It is possible to change the logging_level later by using the set_logging_level method. Example usage: from ludwig.api import LudwigModel Train a model: model_definition = { ... } ludwig_model = LudwigModel ( model_definition ) train_stats = ludwig_model . train ( data_csv = csv_file_path ) or train_stats = ludwig_model . train ( data_df = dataframe ) If you have already trained a model you can load it and use it to predict ludwig_model = LudwigModel . load ( model_dir ) Predict: predictions = ludwig_model . predict ( data_csv = csv_file_path ) or predictions = ludwig_model . predict ( data_df = dataframe ) Test: predictions , test_stats = ludwig_model . test ( data_csv = csv_file_path ) or predictions , test_stats = ludwig_model . predict ( data_df = dataframe ) Finally in order to release resources: model . close () LudwigModel methods \u00b6 close \u00b6 close ( ) Closes an open LudwigModel (closing the session running it). It should be called once done with the model to release resources. initialize_model \u00b6 initialize_model ( train_set_metadata = None , train_set_metadata_json = None , gpus = None , gpu_fraction = 1 , random_seed = 42 , debug = False ) This function initializes a model. It is need for performing online learning, so it has to be called before train_online . train initialize the model under the hood, so there is no need to call this function if you don't use train_online . Inputs train_set_metadata (dict): it contains metadata information for the input and output features the model is going to be trained on. It's the same content of the metadata json file that is created while training. train_set_metadata_json (string): path to the JSON metadata file created while training. it contains metadata information for the input and output features the model is going to be trained on gpus (string, default: None ): list of GPUs to use (it uses the same syntax of CUDA_VISIBLE_DEVICES) gpu_fraction (float, default 1.0 ): fraction of GPU memory to initialize the process with random_seed (int, default 42 ): a random seed that is going to be used anywhere there is a call to a random number generator: data splitting, parameter initialization and training set shuffling debug (bool, default: False ): enables debugging mode load \u00b6 load ( model_dir ) This function allows for loading pretrained models Inputs model_dir (string): path to the directory containing the model. If the model was trained by the train or experiment command, the model is in results_dir/experiment_dir/model . Return return (LudwigModel): a LudwigModel object Example usage ludwig_model = LudwigModel . load ( model_dir ) predict \u00b6 ludwig . predict ( data_df = None , data_csv = None , data_dict = None , return_type =< class ' pandas . core . frame . DataFrame '>, batch_size = 128 , gpus = None , gpu_fraction = 1 ) This function is used to predict the output variables given the input variables using the trained model. Inputs data_df (DataFrame): dataframe containing data. Only the input features defined in the model definition need to be present in the dataframe. data_csv (string): input data CSV file. Only the input features defined in the model definition need to be present in the CSV. data_dict (dict): input data dictionary. It is expected to contain one key for each field and the values have to be lists of the same length. Each index in the lists corresponds to one datapoint. Only the input features defined in the model definition need to be present in the dataframe. For example a data set consisting of two datapoints with a input text may be provided as the following dict `{'text_field_name}: ['text of the first datapoint', text of the second datapoint']} . return_type (strng or type, default: DataFrame ): string describing the type of the returned prediction object. 'dataframe' , 'df' and DataFrame will return a pandas DataFrame , while 'dict' , ''dictionary' and dict` will return a dictionary. batch_size (int, default: 128 ): batch size gpus (string, default: None ): list of GPUs to use (it uses the same syntax of CUDA_VISIBLE_DEVICES) gpu_fraction (float, default 1.0 ): fraction of gpu memory to initialize the process with Return return (DataFrame or dict): a dataframe containing the predictions for each output feature and their probabilities (for types that return them) will be returned. For instance in a 3 way multiclass classification problem with a category field names class as output feature with possible values one , two and three , the dataframe will have as many rows as input datapoints and five columns: class_predictions , class_UNK_probability , class_one_probability , class_two_probability , class_three_probability . (The UNK class is always present in categorical features). If the return_type is a dictionary, the returned object be a dictionary contaning one entry for each output feature. Each entry is itself a dictionary containing aligned arrays of predictions and probabilities / scores. save \u00b6 save ( save_path ) This function allows to save models on disk Inputs save_path (string): path to the directory where the model is going to be saved. Both a JSON file containing the model architecture hyperparameters and checkpoints files containing model weights will be saved. Example usage ludwig_model . save ( save_path ) save_for_serving \u00b6 save_for_serving ( save_path ) This function allows to save models on disk Inputs save_path (string): path to the directory where the SavedModel is going to be saved. Example usage ludwig_model . save_for_serving ( save_path ) set_logging_level \u00b6 set_logging_level ( logging_level ) :param logging_level: Set/Update the logging level. Use logging constants like logging.DEBUG , logging.INFO and logging.ERROR . :return: None test \u00b6 ludwig . test ( data_df = None , data_csv = None , data_dict = None , return_type =< class ' pandas . core . frame . DataFrame '>, batch_size = 128 , gpus = None , gpu_fraction = 1 ) This function is used to predict the output variables given the input variables using the trained model and compute test statistics like performance measures, confusion matrices and the like. Inputs data_df (DataFrame): dataframe containing data. Both input and output features defined in the model definition need to be present in the dataframe. data_csv (string): input data CSV file. Both input and output features defined in the model definition need to be present in the CSV. data_dict (dict): input data dictionary. It is expected to contain one key for each field and the values have to be lists of the same length. Each index in the lists corresponds to one datapoint. Both input and output features defined in the model definition need to be present in the dataframe. For example a data set consisting of two datapoints with a input text may be provided as the following dict `{'text_field_name}: ['text of the first datapoint', text of the second datapoint']} . return_type (strng or type, default: DataFrame ): string describing the type of the returned prediction object. 'dataframe' , 'df' and DataFrame will return a pandas DataFrame , while 'dict' , ''dictionary' and dict` will return a dictionary. batch_size (int, default: 128 ): batch size gpus (string, default: None ): list of GPUs to use (it uses the same syntax of CUDA_VISIBLE_DEVICES) gpu_fraction (float, default 1.0 ): fraction of GPU memory to initialize the process with Return return (tuple((DataFrame or dict), dict)): a tuple of a dataframe and a dictionary. The dataframe contains the predictions for each output feature and their probabilities (for types that return them) will be returned. For instance in a 3 way multiclass classification problem with a category field names class as output feature with possible values one , two and three , the dataframe will have as many rows as input datapoints and five columns: class_predictions , class_UNK_probability , class_one_probability , class_two_probability , class_three_probability . (The UNK class is always present in categorical features). If the return_type is a dictionary, the first object of the tuple will be a dictionary contaning one entry for each output feature. Each entry is itself a dictionary containing aligned arrays of predictions and probabilities / scores. The second object of the tuple is a dictionary that contains the test statistics, with each key being the name of an output feature and the values being dictionaries containing measures names and their values. train \u00b6 train ( data_df = None , data_train_df = None , data_validation_df = None , data_test_df = None , data_csv = None , data_train_csv = None , data_validation_csv = None , data_test_csv = None , data_hdf5 = None , data_train_hdf5 = None , data_validation_hdf5 = None , data_test_hdf5 = None , data_dict = None , data_train_dict = None , data_validation_dict = None , data_test_dict = None , train_set_metadata_json = None , experiment_name = 'api_experiment' , model_name = 'run' , model_load_path = None , model_resume_path = None , skip_save_model = False , skip_save_progress = False , skip_save_log = False , skip_save_processed_input = False , output_directory = 'results' , gpus = None , gpu_fraction = 1.0 , use_horovod = False , random_seed = 42 , debug = False ) This function is used to perform a full training of the model on the specified dataset. Inputs data_df (DataFrame): dataframe containing data. If it has a split column, it will be used for splitting (0: train, 1: validation, 2: test), otherwise the dataset will be randomly split data_train_df (DataFrame): dataframe containing training data data_validation_df (DataFrame): dataframe containing validation data data_test_df (DataFrame dataframe containing test dat):data_test_df: (DataFrame dataframe containing test data data_csv (string): input data CSV file. If it has a split column, it will be used for splitting (0: train, 1: validation, 2: test), otherwise the dataset will be randomly split data_train_csv (string): input train data CSV file data_validation_csv (string): input validation data CSV file data_test_csv (string): input test data CSV file data_hdf5 (string): input data HDF5 file. It is an intermediate preprocess version of the input CSV created the first time a CSV file is used in the same directory with the same name and a hdf5 extension data_train_hdf5 (string): input train data HDF5 file. It is an intermediate preprocess version of the input CSV created the first time a CSV file is used in the same directory with the same name and a hdf5 extension data_validation_hdf5 (string): input validation data HDF5 file. It is an intermediate preprocess version of the input CSV created the first time a CSV file is used in the same directory with the same name and a hdf5 extension data_test_hdf5 (string): input test data HDF5 file. It is an intermediate preprocess version of the input CSV created the first time a CSV file is used in the same directory with the same name and a hdf5 extension data_dict (dict): input data dictionary. It is expected to contain one key for each field and the values have to be lists of the same length. Each index in the lists corresponds to one datapoint. For example a data set consisting of two datapoints with a text and a class may be provided as the following dict {'text_field_name': ['text of the first datapoint', text of the second datapoint'], 'class_filed_name': ['class_datapoints_1', 'class_datapoints_2']} . data_train_dict (dict): input training data dictionary. It is expected to contain one key for each field and the values have to be lists of the same length. Each index in the lists corresponds to one datapoint. For example a data set consisting of two datapoints with a text and a class may be provided as the following dict: {'text_field_name': ['text of the first datapoint', 'text of the second datapoint'], 'class_field_name': ['class_datapoint_1', 'class_datapoint_2']} . data_validation_dict (dict): input validation data dictionary. It is expected to contain one key for each field and the values have to be lists of the same length. Each index in the lists corresponds to one datapoint. For example a data set consisting of two datapoints with a text and a class may be provided as the following dict: {'text_field_name': ['text of the first datapoint', 'text of the second datapoint'], 'class_field_name': ['class_datapoint_1', 'class_datapoint_2']} . data_test_dict (dict): input test data dictionary. It is expected to contain one key for each field and the values have to be lists of the same length. Each index in the lists corresponds to one datapoint. For example a data set consisting of two datapoints with a text and a class may be provided as the following dict: {'text_field_name': ['text of the first datapoint', 'text of the second datapoint'], 'class_field_name': ['class_datapoint_1', 'class_datapoint_2']} . train_set_metadata_json (string): input metadata JSON file. It is an intermediate preprocess file containing the mappings of the input CSV created the first time a CSV file is used in the same directory with the same name and a json extension experiment_name (string): a name for the experiment, used for the save directory model_name (string): a name for the model, used for the save directory model_load_path (string): path of a pretrained model to load as initialization model_resume_path (string): path of a the model directory to resume training of skip_save_model (bool, default: False ): disables saving model weights and hyperparameters each time the model improves. By default Ludwig saves model weights after each epoch the validation measure imrpvoes, but if the model is really big that can be time consuming if you do not want to keep the weights and just find out what performance can a model get with a set of hyperparameters, use this parameter to skip it, but the model will not be loadable later on. skip_save_progress (bool, default: False ): disables saving progress each epoch. By default Ludwig saves weights and stats after each epoch for enabling resuming of training, but if the model is really big that can be time consuming and will uses twice as much space, use this parameter to skip it, but training cannot be resumed later on. skip_save_log (bool, default: False ): disables saving TensorBoard logs. By default Ludwig saves logs for the TensorBoard, but if it is not needed turning it off can slightly increase the overall speed. skip_save_processed_input (bool, default: False ): skips saving intermediate HDF5 and JSON files output_directory (string, default: 'results' ): directory that contains the results gpus (string, default: None ): list of GPUs to use (it uses the same syntax of CUDA_VISIBLE_DEVICES) gpu_fraction (float, default 1.0 ): fraction of gpu memory to initialize the process with random_seed (int, default 42 ): a random seed that is going to be used anywhere there is a call to a random number generator: data splitting, parameter initialization and training set shuffling debug (bool, default: False ): enables debugging mode There are three ways to provide data: by dataframes using the _df parameters, by CSV using the _csv parameters and by HDF5 and JSON, using _hdf5 and _json parameters. The DataFrame approach uses data previously obtained and put in a dataframe, the CSV approach loads data from a CSV file, while HDF5 and JSON load previously preprocessed HDF5 and JSON files (they are saved in the same directory of the CSV they are obtained from). For all three approaches either a full dataset can be provided (which will be split randomly according to the split probabilities defined in the model definition, by default 70% training, 10% validation and 20% test) or, if it contanins a plit column, it will be plit according to that column (interpreting 0 as training, 1 as validation and 2 as test). Alternatively separated dataframes / CSV / HDF5 files can beprovided for each split. During training the model and statistics will be saved in a directory [output_dir]/[experiment_name]_[model_name]_n where all variables are resolved to user spiecified ones and n is an increasing number starting from 0 used to differentiate different runs. Return return (dict): a dictionary containing training statistics for each output feature containing loss and measures values for each epoch. train_online \u00b6 train_online ( data_df = None , data_csv = None , data_dict = None , batch_size = None , learning_rate = None , regularization_lambda = None , dropout_rate = None , bucketing_field = None , gpus = None , gpu_fraction = 1 ) This function is used to perform one epoch of training of the model on the specified dataset. Inputs data_df (DataFrame): dataframe containing data. data_csv (string): input data CSV file. data_dict (dict): input data dictionary. It is expected to contain one key for each field and the values have to be lists of the same length. Each index in the lists corresponds to one datapoint. For example a data set consisting of two datapoints with a text and a class may be provided as the following dict `{'text_field_name': ['text of the first datapoint', text of the second datapoint'], 'class_filed_name': ['class_datapoints_1', 'class_datapoints_2']} . batch_size (int): the batch size to use for training. By default it's the one specified in the model definition. learning_rate (float): the learning rate to use for training. By default the values is the one specified in the model definition. regularization_lambda (float): the regularization lambda parameter to use for training. By default the values is the one specified in the model definition. dropout_rate (float): the dropout rate to use for training. By default the values is the one specified in the model definition. bucketing_field (string): the bucketing field to use for bucketing the data. By default the values is one specified in the model definition. gpus (string, default: None ): list of GPUs to use (it uses the same syntax of CUDA_VISIBLE_DEVICES) gpu_fraction (float, default 1.0 ): fraction of GPU memory to initialize the process with There are three ways to provide data: by dataframes using the data_df parameter, by CSV using the data_csv parameter and by dictionary, using the data_dict parameter. The DataFrame approach uses data previously obtained and put in a dataframe, the CSV approach loads data from a CSV file, while dict approach uses data organized by keys representing columns and values that are lists of the datapoints for each. For example a data set consisting of two datapoints with a text and a class may be provided as the following dict `{'text_field_name}: ['text of the first datapoint', text of the second datapoint'], 'class_filed_name': ['class_datapoints_1', 'class_datapoints_2']} .",
      "title": "LudwigModel"
    },
    {
      "location": "api/LudwigModel/#ludwigmodel-class",
      "text": "ludwig . api . LudwigModel ( model_definition , model_definition_file = None , logging_level = 40 ) Class that allows access to high level Ludwig functionalities. Inputs model_definition (dict): a dictionary containing information needed to build a model. Refer to the [User Guide] (http://ludwig.ai/user_guide/#model-definition) for details. model_definition_file (string, optional, default: None ): path to a YAML file containing the model definition. If available it will be used instead of the model_definition dict. logging_level (int, default: logging.ERROR ): logging level to use for logging. Use logging constants like logging.DEBUG , logging.INFO and logging.ERROR . By default only errors will be printed. It is possible to change the logging_level later by using the set_logging_level method. Example usage: from ludwig.api import LudwigModel Train a model: model_definition = { ... } ludwig_model = LudwigModel ( model_definition ) train_stats = ludwig_model . train ( data_csv = csv_file_path ) or train_stats = ludwig_model . train ( data_df = dataframe ) If you have already trained a model you can load it and use it to predict ludwig_model = LudwigModel . load ( model_dir ) Predict: predictions = ludwig_model . predict ( data_csv = csv_file_path ) or predictions = ludwig_model . predict ( data_df = dataframe ) Test: predictions , test_stats = ludwig_model . test ( data_csv = csv_file_path ) or predictions , test_stats = ludwig_model . predict ( data_df = dataframe ) Finally in order to release resources: model . close ()",
      "title": "LudwigModel class"
    },
    {
      "location": "api/LudwigModel/#ludwigmodel-methods",
      "text": "",
      "title": "LudwigModel methods"
    },
    {
      "location": "api/LudwigModel/#close",
      "text": "close ( ) Closes an open LudwigModel (closing the session running it). It should be called once done with the model to release resources.",
      "title": "close"
    },
    {
      "location": "api/LudwigModel/#initialize_model",
      "text": "initialize_model ( train_set_metadata = None , train_set_metadata_json = None , gpus = None , gpu_fraction = 1 , random_seed = 42 , debug = False ) This function initializes a model. It is need for performing online learning, so it has to be called before train_online . train initialize the model under the hood, so there is no need to call this function if you don't use train_online . Inputs train_set_metadata (dict): it contains metadata information for the input and output features the model is going to be trained on. It's the same content of the metadata json file that is created while training. train_set_metadata_json (string): path to the JSON metadata file created while training. it contains metadata information for the input and output features the model is going to be trained on gpus (string, default: None ): list of GPUs to use (it uses the same syntax of CUDA_VISIBLE_DEVICES) gpu_fraction (float, default 1.0 ): fraction of GPU memory to initialize the process with random_seed (int, default 42 ): a random seed that is going to be used anywhere there is a call to a random number generator: data splitting, parameter initialization and training set shuffling debug (bool, default: False ): enables debugging mode",
      "title": "initialize_model"
    },
    {
      "location": "api/LudwigModel/#load",
      "text": "load ( model_dir ) This function allows for loading pretrained models Inputs model_dir (string): path to the directory containing the model. If the model was trained by the train or experiment command, the model is in results_dir/experiment_dir/model . Return return (LudwigModel): a LudwigModel object Example usage ludwig_model = LudwigModel . load ( model_dir )",
      "title": "load"
    },
    {
      "location": "api/LudwigModel/#predict",
      "text": "ludwig . predict ( data_df = None , data_csv = None , data_dict = None , return_type =< class ' pandas . core . frame . DataFrame '>, batch_size = 128 , gpus = None , gpu_fraction = 1 ) This function is used to predict the output variables given the input variables using the trained model. Inputs data_df (DataFrame): dataframe containing data. Only the input features defined in the model definition need to be present in the dataframe. data_csv (string): input data CSV file. Only the input features defined in the model definition need to be present in the CSV. data_dict (dict): input data dictionary. It is expected to contain one key for each field and the values have to be lists of the same length. Each index in the lists corresponds to one datapoint. Only the input features defined in the model definition need to be present in the dataframe. For example a data set consisting of two datapoints with a input text may be provided as the following dict `{'text_field_name}: ['text of the first datapoint', text of the second datapoint']} . return_type (strng or type, default: DataFrame ): string describing the type of the returned prediction object. 'dataframe' , 'df' and DataFrame will return a pandas DataFrame , while 'dict' , ''dictionary' and dict` will return a dictionary. batch_size (int, default: 128 ): batch size gpus (string, default: None ): list of GPUs to use (it uses the same syntax of CUDA_VISIBLE_DEVICES) gpu_fraction (float, default 1.0 ): fraction of gpu memory to initialize the process with Return return (DataFrame or dict): a dataframe containing the predictions for each output feature and their probabilities (for types that return them) will be returned. For instance in a 3 way multiclass classification problem with a category field names class as output feature with possible values one , two and three , the dataframe will have as many rows as input datapoints and five columns: class_predictions , class_UNK_probability , class_one_probability , class_two_probability , class_three_probability . (The UNK class is always present in categorical features). If the return_type is a dictionary, the returned object be a dictionary contaning one entry for each output feature. Each entry is itself a dictionary containing aligned arrays of predictions and probabilities / scores.",
      "title": "predict"
    },
    {
      "location": "api/LudwigModel/#save",
      "text": "save ( save_path ) This function allows to save models on disk Inputs save_path (string): path to the directory where the model is going to be saved. Both a JSON file containing the model architecture hyperparameters and checkpoints files containing model weights will be saved. Example usage ludwig_model . save ( save_path )",
      "title": "save"
    },
    {
      "location": "api/LudwigModel/#save_for_serving",
      "text": "save_for_serving ( save_path ) This function allows to save models on disk Inputs save_path (string): path to the directory where the SavedModel is going to be saved. Example usage ludwig_model . save_for_serving ( save_path )",
      "title": "save_for_serving"
    },
    {
      "location": "api/LudwigModel/#set_logging_level",
      "text": "set_logging_level ( logging_level ) :param logging_level: Set/Update the logging level. Use logging constants like logging.DEBUG , logging.INFO and logging.ERROR . :return: None",
      "title": "set_logging_level"
    },
    {
      "location": "api/LudwigModel/#test",
      "text": "ludwig . test ( data_df = None , data_csv = None , data_dict = None , return_type =< class ' pandas . core . frame . DataFrame '>, batch_size = 128 , gpus = None , gpu_fraction = 1 ) This function is used to predict the output variables given the input variables using the trained model and compute test statistics like performance measures, confusion matrices and the like. Inputs data_df (DataFrame): dataframe containing data. Both input and output features defined in the model definition need to be present in the dataframe. data_csv (string): input data CSV file. Both input and output features defined in the model definition need to be present in the CSV. data_dict (dict): input data dictionary. It is expected to contain one key for each field and the values have to be lists of the same length. Each index in the lists corresponds to one datapoint. Both input and output features defined in the model definition need to be present in the dataframe. For example a data set consisting of two datapoints with a input text may be provided as the following dict `{'text_field_name}: ['text of the first datapoint', text of the second datapoint']} . return_type (strng or type, default: DataFrame ): string describing the type of the returned prediction object. 'dataframe' , 'df' and DataFrame will return a pandas DataFrame , while 'dict' , ''dictionary' and dict` will return a dictionary. batch_size (int, default: 128 ): batch size gpus (string, default: None ): list of GPUs to use (it uses the same syntax of CUDA_VISIBLE_DEVICES) gpu_fraction (float, default 1.0 ): fraction of GPU memory to initialize the process with Return return (tuple((DataFrame or dict), dict)): a tuple of a dataframe and a dictionary. The dataframe contains the predictions for each output feature and their probabilities (for types that return them) will be returned. For instance in a 3 way multiclass classification problem with a category field names class as output feature with possible values one , two and three , the dataframe will have as many rows as input datapoints and five columns: class_predictions , class_UNK_probability , class_one_probability , class_two_probability , class_three_probability . (The UNK class is always present in categorical features). If the return_type is a dictionary, the first object of the tuple will be a dictionary contaning one entry for each output feature. Each entry is itself a dictionary containing aligned arrays of predictions and probabilities / scores. The second object of the tuple is a dictionary that contains the test statistics, with each key being the name of an output feature and the values being dictionaries containing measures names and their values.",
      "title": "test"
    },
    {
      "location": "api/LudwigModel/#train",
      "text": "train ( data_df = None , data_train_df = None , data_validation_df = None , data_test_df = None , data_csv = None , data_train_csv = None , data_validation_csv = None , data_test_csv = None , data_hdf5 = None , data_train_hdf5 = None , data_validation_hdf5 = None , data_test_hdf5 = None , data_dict = None , data_train_dict = None , data_validation_dict = None , data_test_dict = None , train_set_metadata_json = None , experiment_name = 'api_experiment' , model_name = 'run' , model_load_path = None , model_resume_path = None , skip_save_model = False , skip_save_progress = False , skip_save_log = False , skip_save_processed_input = False , output_directory = 'results' , gpus = None , gpu_fraction = 1.0 , use_horovod = False , random_seed = 42 , debug = False ) This function is used to perform a full training of the model on the specified dataset. Inputs data_df (DataFrame): dataframe containing data. If it has a split column, it will be used for splitting (0: train, 1: validation, 2: test), otherwise the dataset will be randomly split data_train_df (DataFrame): dataframe containing training data data_validation_df (DataFrame): dataframe containing validation data data_test_df (DataFrame dataframe containing test dat):data_test_df: (DataFrame dataframe containing test data data_csv (string): input data CSV file. If it has a split column, it will be used for splitting (0: train, 1: validation, 2: test), otherwise the dataset will be randomly split data_train_csv (string): input train data CSV file data_validation_csv (string): input validation data CSV file data_test_csv (string): input test data CSV file data_hdf5 (string): input data HDF5 file. It is an intermediate preprocess version of the input CSV created the first time a CSV file is used in the same directory with the same name and a hdf5 extension data_train_hdf5 (string): input train data HDF5 file. It is an intermediate preprocess version of the input CSV created the first time a CSV file is used in the same directory with the same name and a hdf5 extension data_validation_hdf5 (string): input validation data HDF5 file. It is an intermediate preprocess version of the input CSV created the first time a CSV file is used in the same directory with the same name and a hdf5 extension data_test_hdf5 (string): input test data HDF5 file. It is an intermediate preprocess version of the input CSV created the first time a CSV file is used in the same directory with the same name and a hdf5 extension data_dict (dict): input data dictionary. It is expected to contain one key for each field and the values have to be lists of the same length. Each index in the lists corresponds to one datapoint. For example a data set consisting of two datapoints with a text and a class may be provided as the following dict {'text_field_name': ['text of the first datapoint', text of the second datapoint'], 'class_filed_name': ['class_datapoints_1', 'class_datapoints_2']} . data_train_dict (dict): input training data dictionary. It is expected to contain one key for each field and the values have to be lists of the same length. Each index in the lists corresponds to one datapoint. For example a data set consisting of two datapoints with a text and a class may be provided as the following dict: {'text_field_name': ['text of the first datapoint', 'text of the second datapoint'], 'class_field_name': ['class_datapoint_1', 'class_datapoint_2']} . data_validation_dict (dict): input validation data dictionary. It is expected to contain one key for each field and the values have to be lists of the same length. Each index in the lists corresponds to one datapoint. For example a data set consisting of two datapoints with a text and a class may be provided as the following dict: {'text_field_name': ['text of the first datapoint', 'text of the second datapoint'], 'class_field_name': ['class_datapoint_1', 'class_datapoint_2']} . data_test_dict (dict): input test data dictionary. It is expected to contain one key for each field and the values have to be lists of the same length. Each index in the lists corresponds to one datapoint. For example a data set consisting of two datapoints with a text and a class may be provided as the following dict: {'text_field_name': ['text of the first datapoint', 'text of the second datapoint'], 'class_field_name': ['class_datapoint_1', 'class_datapoint_2']} . train_set_metadata_json (string): input metadata JSON file. It is an intermediate preprocess file containing the mappings of the input CSV created the first time a CSV file is used in the same directory with the same name and a json extension experiment_name (string): a name for the experiment, used for the save directory model_name (string): a name for the model, used for the save directory model_load_path (string): path of a pretrained model to load as initialization model_resume_path (string): path of a the model directory to resume training of skip_save_model (bool, default: False ): disables saving model weights and hyperparameters each time the model improves. By default Ludwig saves model weights after each epoch the validation measure imrpvoes, but if the model is really big that can be time consuming if you do not want to keep the weights and just find out what performance can a model get with a set of hyperparameters, use this parameter to skip it, but the model will not be loadable later on. skip_save_progress (bool, default: False ): disables saving progress each epoch. By default Ludwig saves weights and stats after each epoch for enabling resuming of training, but if the model is really big that can be time consuming and will uses twice as much space, use this parameter to skip it, but training cannot be resumed later on. skip_save_log (bool, default: False ): disables saving TensorBoard logs. By default Ludwig saves logs for the TensorBoard, but if it is not needed turning it off can slightly increase the overall speed. skip_save_processed_input (bool, default: False ): skips saving intermediate HDF5 and JSON files output_directory (string, default: 'results' ): directory that contains the results gpus (string, default: None ): list of GPUs to use (it uses the same syntax of CUDA_VISIBLE_DEVICES) gpu_fraction (float, default 1.0 ): fraction of gpu memory to initialize the process with random_seed (int, default 42 ): a random seed that is going to be used anywhere there is a call to a random number generator: data splitting, parameter initialization and training set shuffling debug (bool, default: False ): enables debugging mode There are three ways to provide data: by dataframes using the _df parameters, by CSV using the _csv parameters and by HDF5 and JSON, using _hdf5 and _json parameters. The DataFrame approach uses data previously obtained and put in a dataframe, the CSV approach loads data from a CSV file, while HDF5 and JSON load previously preprocessed HDF5 and JSON files (they are saved in the same directory of the CSV they are obtained from). For all three approaches either a full dataset can be provided (which will be split randomly according to the split probabilities defined in the model definition, by default 70% training, 10% validation and 20% test) or, if it contanins a plit column, it will be plit according to that column (interpreting 0 as training, 1 as validation and 2 as test). Alternatively separated dataframes / CSV / HDF5 files can beprovided for each split. During training the model and statistics will be saved in a directory [output_dir]/[experiment_name]_[model_name]_n where all variables are resolved to user spiecified ones and n is an increasing number starting from 0 used to differentiate different runs. Return return (dict): a dictionary containing training statistics for each output feature containing loss and measures values for each epoch.",
      "title": "train"
    },
    {
      "location": "api/LudwigModel/#train_online",
      "text": "train_online ( data_df = None , data_csv = None , data_dict = None , batch_size = None , learning_rate = None , regularization_lambda = None , dropout_rate = None , bucketing_field = None , gpus = None , gpu_fraction = 1 ) This function is used to perform one epoch of training of the model on the specified dataset. Inputs data_df (DataFrame): dataframe containing data. data_csv (string): input data CSV file. data_dict (dict): input data dictionary. It is expected to contain one key for each field and the values have to be lists of the same length. Each index in the lists corresponds to one datapoint. For example a data set consisting of two datapoints with a text and a class may be provided as the following dict `{'text_field_name': ['text of the first datapoint', text of the second datapoint'], 'class_filed_name': ['class_datapoints_1', 'class_datapoints_2']} . batch_size (int): the batch size to use for training. By default it's the one specified in the model definition. learning_rate (float): the learning rate to use for training. By default the values is the one specified in the model definition. regularization_lambda (float): the regularization lambda parameter to use for training. By default the values is the one specified in the model definition. dropout_rate (float): the dropout rate to use for training. By default the values is the one specified in the model definition. bucketing_field (string): the bucketing field to use for bucketing the data. By default the values is one specified in the model definition. gpus (string, default: None ): list of GPUs to use (it uses the same syntax of CUDA_VISIBLE_DEVICES) gpu_fraction (float, default 1.0 ): fraction of GPU memory to initialize the process with There are three ways to provide data: by dataframes using the data_df parameter, by CSV using the data_csv parameter and by dictionary, using the data_dict parameter. The DataFrame approach uses data previously obtained and put in a dataframe, the CSV approach loads data from a CSV file, while dict approach uses data organized by keys representing columns and values that are lists of the datapoints for each. For example a data set consisting of two datapoints with a text and a class may be provided as the following dict `{'text_field_name}: ['text of the first datapoint', text of the second datapoint'], 'class_filed_name': ['class_datapoints_1', 'class_datapoints_2']} .",
      "title": "train_online"
    },
    {
      "location": "api/visualization/",
      "text": "learning_curves \u00b6 ludwig . visualize . learning_curves ( train_stats_per_model , field , model_names = None , output_directory = None , file_format = 'pdf' ) Show how model measures change over training and validation data epochs. For each model and for each output feature and measure of the model, it produces a line plot showing how that measure changed over the course of the epochs of training on the training and validation sets. :param train_stats_per_model: List containing train statistics per model :param field: Prediction field containing ground truth. :param model_names: List of the names of the models to use as labels. :param output_directory: Directory where to save plots. If not specified, plots will be displayed in a window :param file_format: File format of output plots - pdf or png :return None: compare_performance \u00b6 ludwig . visualize . compare_performance ( test_stats_per_model , field , model_names = None , output_directory = None , file_format = 'pdf' ) Produces model comparision barplot visualization for each overall metric For each model (in the aligned lists of test_statistics and model_names) it produces bars in a bar plot, one for each overall metric available in the test_statistics file for the specified field. :param test_stats_per_model: List containing train statistics per model :param field: Prediction field containing ground truth. :param model_names: List of the names of the models to use as labels. :param output_directory: Directory where to save plots. If not specified, plots will be displayed in a window :param file_format: File format of output plots - pdf or png :return None: compare_classifiers_performance_from_prob \u00b6 ludwig . visualize . compare_classifiers_performance_from_prob ( probabilities_per_model , ground_truth , top_n_classes , labels_limit , model_names = None , output_directory = None , file_format = 'pdf' ) Produces model comparision barplot visualization from probabilities. For each model it produces bars in a bar plot, one for each overall metric computed on the fly from the probabilities of predictions for the specified field. :param probabilities_per_model: List of model probabilities :param ground_truth: NumPy Array containing computed model ground truth data for target prediction field based on the model metadata :param top_n_classes: List containing the number of classes to plot :param labels_limit: Maximum numbers of labels. If labels in dataset are higher than this number, \"rare\" label :param model_names: List of the names of the models to use as labels. :param output_directory: Directory where to save plots. If not specified, plots will be displayed in a window :param file_format: File format of output plots - pdf or png :return None: compare_classifiers_performance_from_pred \u00b6 ludwig . visualize . compare_classifiers_performance_from_pred ( predictions_per_model , ground_truth , metadata , field , labels_limit , model_names = None , output_directory = None , file_format = 'pdf' ) Produces model comparision barplot visualization from predictions. For each model it produces bars in a bar plot, one for each overall metric computed on the fly from the predictions for the specified field. :param predictions_per_model: List containing the model predictions for the specified field :param ground_truth: NumPy Array containing computed model ground truth data for target prediction field based on the model metadata :param metadata: Model's input metadata :param field: field containing ground truth :param labels_limit: Maximum numbers of labels. If labels in dataset are higher than this number, \"rare\" label :param model_names: List of the names of the models to use as labels. :param output_directory: Directory where to save plots. If not specified, plots will be displayed in a window :param file_format: File format of output plots - pdf or png :return None: compare_classifiers_performance_subset \u00b6 ludwig . visualize . compare_classifiers_performance_subset ( probabilities_per_model , ground_truth , top_n_classes , labels_limit , subset , model_names = None , output_directory = None , file_format = 'pdf' ) Produces model comparision barplot visualization from train subset. For each model it produces bars in a bar plot, one for each overall metric computed on the fly from the probabilities predictions for the specified field, considering only a subset of the full training set. The way the subset is obtained is using the top_n_classes and subset parameters. :param probabilities_per_model: List of model probabilities :param ground_truth: NumPy Array containing computed model ground truth data for target prediction field based on the model metadata :param top_n_classes: List containing the number of classes to plot :param labels_limit: Maximum numbers of labels. :param subset: Type of the subset filtering :param model_names: List of the names of the models to use as labels. :param output_directory: Directory where to save plots. If not specified, plots will be displayed in a window :param file_format: File format of output plots - pdf or png :return None: compare_classifiers_performance_changing_k \u00b6 ludwig . visualize . compare_classifiers_performance_changing_k ( probabilities_per_model , ground_truth , top_k , labels_limit , model_names = None , output_directory = None , file_format = 'pdf' ) Produce lineplot that show Hits@K measure while k goes from 1 to top_k. For each model it produces a line plot that shows the Hits@K measure (that counts a prediction as correct if the model produces it among the first k) while changing k from 1 to top_k for the specified field. :param probabilities_per_model: List of model probabilities :param ground_truth: NumPy Array containing computed model ground truth data for target prediction field based on the model metadata param top_k: Number of elements in the ranklist to consider :param labels_limit: Maximum numbers of labels. If labels in dataset are higher than this number, \"rare\" label :param model_names: List of the names of the models to use as labels. :param output_directory: Directory where to save plots. If not specified, plots will be displayed in a window :param file_format: File format of output plots - pdf or png :return None: compare_classifiers_multiclass_multimetric \u00b6 ludwig . visualize . compare_classifiers_multiclass_multimetric ( test_stats_per_model , metadata , field , top_n_classes , model_names = None , output_directory = None , file_format = 'pdf' ) Show the precision, recall and F1 of the model for the specified field. For each model it produces four plots that show the precision, recall and F1 of the model on several classes for the specified field. :param test_stats_per_model: List containing train statistics per model :param metadata: Model's input metadata :param field: Prediction field containing ground truth. :param top_n_classes: List containing the number of classes to plot :param model_names: List of the names of the models to use as labels. :param output_directory: Directory where to save plots. If not specified, plots will be displayed in a window :param file_format: File format of output plots - pdf or png :return None: :return: compare_classifiers_predictions \u00b6 ludwig . visualize . compare_classifiers_predictions ( predictions_per_model , ground_truth , labels_limit , model_names = None , output_directory = None , file_format = 'pdf' ) Show two models comparision of their field predictions. :param predictions_per_model: List containing the model predictions :param ground_truth: NumPy Array containing computed model ground truth data for target prediction field based on the model metadata :param labels_limit: Maximum numbers of labels. If labels in dataset are higher than this number, \"rare\" label :param model_names: List of the names of the models to use as labels. :param output_directory: Directory where to save plots. If not specified, plots will be displayed in a window :param file_format: File format of output plots - pdf or png :return None: confidence_thresholding_2thresholds_2d \u00b6 ludwig . visualize . confidence_thresholding_2thresholds_2d ( probabilities_per_model , ground_truths , threshold_fields , labels_limit , model_names = None , output_directory = None , file_format = 'pdf' ) Show confidence trethreshold data vs accuracy for two field thresholds The first plot shows several semi transparent lines. They summarize the 3d surfaces displayed by confidence_thresholding_2thresholds_3d that have thresholds on the confidence of the predictions of the two threshold_fields as x and y axes and either the data coverage percentage or the accuracy as z axis. Each line represents a slice of the data coverage surface projected onto the accuracy surface. :param probabilities_per_model: List of model probabilities :param ground_truths: List of NumPy Arrays containing computed model ground truth data for target prediction fields based on the model metadata :param threshold_fields: List of fields for 2d threshold :param labels_limit: Maximum numbers of labels. If labels in dataset are higher than this number, \"rare\" label :param model_names: Name of the model to use as label. :param output_directory: Directory where to save plots. If not specified, plots will be displayed in a window :param file_format: File format of output plots - pdf or png :return None: confidence_thresholding_2thresholds_3d \u00b6 ludwig . visualize . confidence_thresholding_2thresholds_3d ( probabilities_per_model , ground_truths , threshold_fields , labels_limit , output_directory = None , file_format = 'pdf' ) Show 3d confidence trethreshold data vs accuracy for two field thresholds The plot shows the 3d surfaces displayed by confidence_thresholding_2thresholds_3d that have thresholds on the confidence of the predictions of the two threshold_fields as x and y axes and either the data coverage percentage or the accuracy as z axis. :param probabilities_per_model: List of model probabilities :param ground_truths: List of NumPy Arrays containing computed model ground truth data for target prediction fields based on the model metadata :param threshold_fields: List of fields for 2d threshold :param labels_limit: Maximum numbers of labels. If labels in dataset are higher than this number, \"rare\" label :param output_directory: Directory where to save plots. If not specified, plots will be displayed in a window :param file_format: File format of output plots - pdf or png :return None: confidence_thresholding \u00b6 ludwig . visualize . confidence_thresholding ( probabilities_per_model , ground_truth , labels_limit , model_names = None , output_directory = None , file_format = 'pdf' ) Show models accuracy and data coverage while increasing treshold For each model it produces a pair of lines indicating the accuracy of the model and the data coverage while increasing a threshold (x axis) on the probabilities of predictions for the specified field. :param probabilities_per_model: List of model probabilities :param ground_truth: NumPy Array containing computed model ground truth data for target prediction field based on the model metadata :param labels_limit: Maximum numbers of labels. If labels in dataset are higher than this number, \"rare\" label :param model_names: List of the names of the models to use as labels. :param output_directory: Directory where to save plots. If not specified, plots will be displayed in a window :param file_format: File format of output plots - pdf or png :return None: confidence_thresholding_data_vs_acc \u00b6 ludwig . visualize . confidence_thresholding_data_vs_acc ( probabilities_per_model , ground_truth , labels_limit , model_names = None , output_directory = None , file_format = 'pdf' ) Show models comparision of confidence treshold data vs accuracy. For each model it produces a line indicating the accuracy of the model and the data coverage while increasing a threshold on the probabilities of predictions for the specified field. The difference with confidence_thresholding is that it uses two axes instead of three, not visualizing the threshold and having coverage as x axis instead of the threshold. :param probabilities_per_model: List of model probabilities :param ground_truth: NumPy Array containing computed model ground truth data for target prediction field based on the model metadata :param labels_limit: Maximum numbers of labels. If labels in dataset are higher than this number, \"rare\" label :param model_names: List of the names of the models to use as labels. :param output_directory: Directory where to save plots. If not specified, plots will be displayed in a window :param file_format: File format of output plots - pdf or png :return None: confidence_thresholding_data_vs_acc_subset \u00b6 ludwig . visualize . confidence_thresholding_data_vs_acc_subset ( probabilities_per_model , ground_truth , top_n_classes , labels_limit , subset , model_names = None , output_directory = None , file_format = 'pdf' ) Show models comparision of confidence treshold data vs accuracy on a subset of data. For each model it produces a line indicating the accuracy of the model and the data coverage while increasing a threshold on the probabilities of predictions for the specified field, considering only a subset of the full training set. The way the subset is obtained is using the top_n_classes and subset parameters. The difference with confidence_thresholding is that it uses two axes instead of three, not visualizing the threshold and having coverage as x axis instead of the threshold. If the values of subset is ground_truth, then only datapoints where the ground truth class is within the top n most frequent ones will be considered as test set, and the percentage of datapoints that have been kept from the original set will be displayed. If the values of subset is predictions, then only datapoints where the the model predicts a class that is within the top n most frequent ones will be considered as test set, and the percentage of datapoints that have been kept from the original set will be displayed for each model. :param probabilities_per_model: List of model probabilities :param ground_truth: NumPy Array containing computed model ground truth data for target prediction field based on the model metadata :param top_n_classes: List containing the number of classes to plot :param labels_limit: Maximum numbers of labels. :param subset: Type of the subset filtering :param model_names: List of the names of the models to use as labels. :param output_directory: Directory where to save plots. If not specified, plots will be displayed in a window :param file_format: File format of output plots - pdf or png :return None: binary_threshold_vs_metric \u00b6 ludwig . visualize . binary_threshold_vs_metric ( probabilities_per_model , ground_truth , metrics , positive_label = 1 , model_names = None , output_directory = None , file_format = 'pdf' ) Show confidence of the model against metric for the specified field. For each metric specified in metrics (options are f1, precision, recall, accuracy), this visualization produces a line chart plotting a threshold on the confidence of the model against the metric for the specified field. If field is a category feature, positive_label indicates which is the class to be considered positive class and all the others will be considered negative. It needs to be an integer, to figure out the association between classes and integers check the ground_truth_metadata JSON file. :param probabilities_per_model: List of model probabilities :param ground_truth: List of NumPy Arrays containing computed model ground truth data for target prediction fields based on the model metadata :param metrics: metrics to dispay (f1, precision, recall, accuracy) :param positive_label: Label of the positive class :param model_names: List of the names of the models to use as labels. :param output_directory: Directory where to save plots. If not specified, plots will be displayed in a window :param file_format: File format of output plots - pdf or png :return None: roc_curves \u00b6 ludwig . visualize . roc_curves ( probabilities_per_model , ground_truth , positive_label = 1 , model_names = None , output_directory = None , file_format = 'pdf' ) Show the roc curves for the specified models output field. This visualization produces a line chart plotting the roc curves for the specified field. If field is a category feature, positive_label indicates which is the class to be considered positive class and all the others will be considered negative. It needs to be an integer, to figure out the association between classes and integers check the ground_truth_metadata JSON file. :param probabilities_per_model: List of model probabilities :param ground_truth: List of NumPy Arrays containing computed model ground truth data for target prediction fields based on the model metadata :param positive_label: Label of the positive class :param model_names: List of the names of the models to use as labels. :param output_directory: Directory where to save plots. If not specified, plots will be displayed in a window :param file_format: File format of output plots - pdf or png :return None: roc_curves_from_test_statistics \u00b6 ludwig . visualize . roc_curves_from_test_statistics ( test_stats_per_model , field , model_names = None , output_directory = None , file_format = 'pdf' ) Show the roc curves for the specified models output binary field. This visualization uses the field, test_statistics and model_names parameters. field needs to be binary feature. This visualization produces a line chart plotting the roc curves for the specified field. :param test_stats_per_model: List containing train statistics per model :param field: Prediction field containing ground truth. :param model_names: List of the names of the models to use as labels. :param output_directory: Directory where to save plots. If not specified, plots will be displayed in a window :param file_format: File format of output plots - pdf or png :return None: calibration_1_vs_all \u00b6 ludwig . visualize . calibration_1_vs_all ( probabilities_per_model , ground_truth , top_n_classes , labels_limit , model_names = None , output_directory = None , file_format = 'pdf' ) Show models probability of predictions for the specified field. For each class or each of the k most frequent classes if top_k is specified, it produces two plots computed on the fly from the probabilities of predictions for the specified field. The first plot is a calibration curve that shows the calibration of the predictions considering the current class to be the true one and all others to be a false one, drawing one line for each model (in the aligned lists of probabilities and model_names). The second plot shows the distributions of the predictions considering the current class to be the true one and all others to be a false one, drawing the distribution for each model (in the aligned lists of probabilities and model_names). :param probabilities_per_model: List of model probabilities :param ground_truth: NumPy Array containing computed model ground truth data for target prediction field based on the model metadata :param top_n_classes: List containing the number of classes to plot :param labels_limit: Maximum numbers of labels. If labels in dataset are higher than this number, \"rare\" label :param model_names: List of the names of the models to use as labels. :param output_directory: Directory where to save plots. If not specified, plots will be displayed in a window :param file_format: File format of output plots - pdf or png :return None: calibration_multiclass \u00b6 ludwig . visualize . calibration_multiclass ( probabilities_per_model , ground_truth , labels_limit , model_names = None , output_directory = None , file_format = 'pdf' ) Show models probability of predictions for each class of the the specified field. :param probabilities_per_model: List of model probabilities :param ground_truth: NumPy Array containing computed model ground truth data for target prediction field based on the model metadata :param labels_limit: Maximum numbers of labels. If labels in dataset are higher than this number, \"rare\" label :param model_names: List of the names of the models to use as labels. :param output_directory: Directory where to save plots. If not specified, plots will be displayed in a window :param file_format: File format of output plots - pdf or png :return None: confusion_matrix \u00b6 ludwig . visualize . confusion_matrix ( test_stats_per_model , metadata , field , top_n_classes , normalize , model_names = None , output_directory = None , file_format = 'pdf' ) Show confision matrix in the models predictions for each field. For each model (in the aligned lists of test_statistics and model_names) it produces a heatmap of the confusion matrix in the predictions for each field that has a confusion matrix in test_statistics. The value of top_n_classes limits the heatmap to the n most frequent classes. :param test_stats_per_model: List containing train statistics per model :param metadata: Model's input metadata :param field: Prediction field containing ground truth. :param top_n_classes: List containing the number of classes to plot :param normalize: Flag to normalize rows in confusion matrix :param model_names: List of the names of the models to use as labels. :param output_directory: Directory where to save plots. If not specified, plots will be displayed in a window :param file_format: File format of output plots - pdf or png :return None: :return: frequency_vs_f1 \u00b6 ludwig . visualize . frequency_vs_f1 ( test_stats_per_model , metadata , field , top_n_classes , model_names = None , output_directory = None , file_format = 'pdf' ) Show prediction statistics for the specified field for each model. For each model (in the aligned lists of test_statistics and model_names), produces two plots statistics of predictions for the specified field. The first plot is a line plot with one x axis representing the different classes and two vertical axes colored in orange and blue respectively. The orange one is the frequency of the class and an orange line is plotted to show the trend. The blue one is the F1 score for that class and a blue line is plotted to show the trend. The classes on the x axis are sorted by f1 score. The second plot has the same structure of the first one, but the axes are flipped and the classes on the x axis are sorted by frequency. :param test_stats_per_model: List containing train statistics per model :param metadata: Model's input metadata :param field: Prediction field containing ground truth. :param top_n_classes: List containing the number of classes to plot :param model_names: List of the names of the models to use as labels. :param output_directory: Directory where to save plots. If not specified, plots will be displayed in a window :param file_format: File format of output plots - pdf or png :return None: :return:",
      "title": "Visualization"
    },
    {
      "location": "api/visualization/#learning_curves",
      "text": "ludwig . visualize . learning_curves ( train_stats_per_model , field , model_names = None , output_directory = None , file_format = 'pdf' ) Show how model measures change over training and validation data epochs. For each model and for each output feature and measure of the model, it produces a line plot showing how that measure changed over the course of the epochs of training on the training and validation sets. :param train_stats_per_model: List containing train statistics per model :param field: Prediction field containing ground truth. :param model_names: List of the names of the models to use as labels. :param output_directory: Directory where to save plots. If not specified, plots will be displayed in a window :param file_format: File format of output plots - pdf or png :return None:",
      "title": "learning_curves"
    },
    {
      "location": "api/visualization/#compare_performance",
      "text": "ludwig . visualize . compare_performance ( test_stats_per_model , field , model_names = None , output_directory = None , file_format = 'pdf' ) Produces model comparision barplot visualization for each overall metric For each model (in the aligned lists of test_statistics and model_names) it produces bars in a bar plot, one for each overall metric available in the test_statistics file for the specified field. :param test_stats_per_model: List containing train statistics per model :param field: Prediction field containing ground truth. :param model_names: List of the names of the models to use as labels. :param output_directory: Directory where to save plots. If not specified, plots will be displayed in a window :param file_format: File format of output plots - pdf or png :return None:",
      "title": "compare_performance"
    },
    {
      "location": "api/visualization/#compare_classifiers_performance_from_prob",
      "text": "ludwig . visualize . compare_classifiers_performance_from_prob ( probabilities_per_model , ground_truth , top_n_classes , labels_limit , model_names = None , output_directory = None , file_format = 'pdf' ) Produces model comparision barplot visualization from probabilities. For each model it produces bars in a bar plot, one for each overall metric computed on the fly from the probabilities of predictions for the specified field. :param probabilities_per_model: List of model probabilities :param ground_truth: NumPy Array containing computed model ground truth data for target prediction field based on the model metadata :param top_n_classes: List containing the number of classes to plot :param labels_limit: Maximum numbers of labels. If labels in dataset are higher than this number, \"rare\" label :param model_names: List of the names of the models to use as labels. :param output_directory: Directory where to save plots. If not specified, plots will be displayed in a window :param file_format: File format of output plots - pdf or png :return None:",
      "title": "compare_classifiers_performance_from_prob"
    },
    {
      "location": "api/visualization/#compare_classifiers_performance_from_pred",
      "text": "ludwig . visualize . compare_classifiers_performance_from_pred ( predictions_per_model , ground_truth , metadata , field , labels_limit , model_names = None , output_directory = None , file_format = 'pdf' ) Produces model comparision barplot visualization from predictions. For each model it produces bars in a bar plot, one for each overall metric computed on the fly from the predictions for the specified field. :param predictions_per_model: List containing the model predictions for the specified field :param ground_truth: NumPy Array containing computed model ground truth data for target prediction field based on the model metadata :param metadata: Model's input metadata :param field: field containing ground truth :param labels_limit: Maximum numbers of labels. If labels in dataset are higher than this number, \"rare\" label :param model_names: List of the names of the models to use as labels. :param output_directory: Directory where to save plots. If not specified, plots will be displayed in a window :param file_format: File format of output plots - pdf or png :return None:",
      "title": "compare_classifiers_performance_from_pred"
    },
    {
      "location": "api/visualization/#compare_classifiers_performance_subset",
      "text": "ludwig . visualize . compare_classifiers_performance_subset ( probabilities_per_model , ground_truth , top_n_classes , labels_limit , subset , model_names = None , output_directory = None , file_format = 'pdf' ) Produces model comparision barplot visualization from train subset. For each model it produces bars in a bar plot, one for each overall metric computed on the fly from the probabilities predictions for the specified field, considering only a subset of the full training set. The way the subset is obtained is using the top_n_classes and subset parameters. :param probabilities_per_model: List of model probabilities :param ground_truth: NumPy Array containing computed model ground truth data for target prediction field based on the model metadata :param top_n_classes: List containing the number of classes to plot :param labels_limit: Maximum numbers of labels. :param subset: Type of the subset filtering :param model_names: List of the names of the models to use as labels. :param output_directory: Directory where to save plots. If not specified, plots will be displayed in a window :param file_format: File format of output plots - pdf or png :return None:",
      "title": "compare_classifiers_performance_subset"
    },
    {
      "location": "api/visualization/#compare_classifiers_performance_changing_k",
      "text": "ludwig . visualize . compare_classifiers_performance_changing_k ( probabilities_per_model , ground_truth , top_k , labels_limit , model_names = None , output_directory = None , file_format = 'pdf' ) Produce lineplot that show Hits@K measure while k goes from 1 to top_k. For each model it produces a line plot that shows the Hits@K measure (that counts a prediction as correct if the model produces it among the first k) while changing k from 1 to top_k for the specified field. :param probabilities_per_model: List of model probabilities :param ground_truth: NumPy Array containing computed model ground truth data for target prediction field based on the model metadata param top_k: Number of elements in the ranklist to consider :param labels_limit: Maximum numbers of labels. If labels in dataset are higher than this number, \"rare\" label :param model_names: List of the names of the models to use as labels. :param output_directory: Directory where to save plots. If not specified, plots will be displayed in a window :param file_format: File format of output plots - pdf or png :return None:",
      "title": "compare_classifiers_performance_changing_k"
    },
    {
      "location": "api/visualization/#compare_classifiers_multiclass_multimetric",
      "text": "ludwig . visualize . compare_classifiers_multiclass_multimetric ( test_stats_per_model , metadata , field , top_n_classes , model_names = None , output_directory = None , file_format = 'pdf' ) Show the precision, recall and F1 of the model for the specified field. For each model it produces four plots that show the precision, recall and F1 of the model on several classes for the specified field. :param test_stats_per_model: List containing train statistics per model :param metadata: Model's input metadata :param field: Prediction field containing ground truth. :param top_n_classes: List containing the number of classes to plot :param model_names: List of the names of the models to use as labels. :param output_directory: Directory where to save plots. If not specified, plots will be displayed in a window :param file_format: File format of output plots - pdf or png :return None: :return:",
      "title": "compare_classifiers_multiclass_multimetric"
    },
    {
      "location": "api/visualization/#compare_classifiers_predictions",
      "text": "ludwig . visualize . compare_classifiers_predictions ( predictions_per_model , ground_truth , labels_limit , model_names = None , output_directory = None , file_format = 'pdf' ) Show two models comparision of their field predictions. :param predictions_per_model: List containing the model predictions :param ground_truth: NumPy Array containing computed model ground truth data for target prediction field based on the model metadata :param labels_limit: Maximum numbers of labels. If labels in dataset are higher than this number, \"rare\" label :param model_names: List of the names of the models to use as labels. :param output_directory: Directory where to save plots. If not specified, plots will be displayed in a window :param file_format: File format of output plots - pdf or png :return None:",
      "title": "compare_classifiers_predictions"
    },
    {
      "location": "api/visualization/#confidence_thresholding_2thresholds_2d",
      "text": "ludwig . visualize . confidence_thresholding_2thresholds_2d ( probabilities_per_model , ground_truths , threshold_fields , labels_limit , model_names = None , output_directory = None , file_format = 'pdf' ) Show confidence trethreshold data vs accuracy for two field thresholds The first plot shows several semi transparent lines. They summarize the 3d surfaces displayed by confidence_thresholding_2thresholds_3d that have thresholds on the confidence of the predictions of the two threshold_fields as x and y axes and either the data coverage percentage or the accuracy as z axis. Each line represents a slice of the data coverage surface projected onto the accuracy surface. :param probabilities_per_model: List of model probabilities :param ground_truths: List of NumPy Arrays containing computed model ground truth data for target prediction fields based on the model metadata :param threshold_fields: List of fields for 2d threshold :param labels_limit: Maximum numbers of labels. If labels in dataset are higher than this number, \"rare\" label :param model_names: Name of the model to use as label. :param output_directory: Directory where to save plots. If not specified, plots will be displayed in a window :param file_format: File format of output plots - pdf or png :return None:",
      "title": "confidence_thresholding_2thresholds_2d"
    },
    {
      "location": "api/visualization/#confidence_thresholding_2thresholds_3d",
      "text": "ludwig . visualize . confidence_thresholding_2thresholds_3d ( probabilities_per_model , ground_truths , threshold_fields , labels_limit , output_directory = None , file_format = 'pdf' ) Show 3d confidence trethreshold data vs accuracy for two field thresholds The plot shows the 3d surfaces displayed by confidence_thresholding_2thresholds_3d that have thresholds on the confidence of the predictions of the two threshold_fields as x and y axes and either the data coverage percentage or the accuracy as z axis. :param probabilities_per_model: List of model probabilities :param ground_truths: List of NumPy Arrays containing computed model ground truth data for target prediction fields based on the model metadata :param threshold_fields: List of fields for 2d threshold :param labels_limit: Maximum numbers of labels. If labels in dataset are higher than this number, \"rare\" label :param output_directory: Directory where to save plots. If not specified, plots will be displayed in a window :param file_format: File format of output plots - pdf or png :return None:",
      "title": "confidence_thresholding_2thresholds_3d"
    },
    {
      "location": "api/visualization/#confidence_thresholding",
      "text": "ludwig . visualize . confidence_thresholding ( probabilities_per_model , ground_truth , labels_limit , model_names = None , output_directory = None , file_format = 'pdf' ) Show models accuracy and data coverage while increasing treshold For each model it produces a pair of lines indicating the accuracy of the model and the data coverage while increasing a threshold (x axis) on the probabilities of predictions for the specified field. :param probabilities_per_model: List of model probabilities :param ground_truth: NumPy Array containing computed model ground truth data for target prediction field based on the model metadata :param labels_limit: Maximum numbers of labels. If labels in dataset are higher than this number, \"rare\" label :param model_names: List of the names of the models to use as labels. :param output_directory: Directory where to save plots. If not specified, plots will be displayed in a window :param file_format: File format of output plots - pdf or png :return None:",
      "title": "confidence_thresholding"
    },
    {
      "location": "api/visualization/#confidence_thresholding_data_vs_acc",
      "text": "ludwig . visualize . confidence_thresholding_data_vs_acc ( probabilities_per_model , ground_truth , labels_limit , model_names = None , output_directory = None , file_format = 'pdf' ) Show models comparision of confidence treshold data vs accuracy. For each model it produces a line indicating the accuracy of the model and the data coverage while increasing a threshold on the probabilities of predictions for the specified field. The difference with confidence_thresholding is that it uses two axes instead of three, not visualizing the threshold and having coverage as x axis instead of the threshold. :param probabilities_per_model: List of model probabilities :param ground_truth: NumPy Array containing computed model ground truth data for target prediction field based on the model metadata :param labels_limit: Maximum numbers of labels. If labels in dataset are higher than this number, \"rare\" label :param model_names: List of the names of the models to use as labels. :param output_directory: Directory where to save plots. If not specified, plots will be displayed in a window :param file_format: File format of output plots - pdf or png :return None:",
      "title": "confidence_thresholding_data_vs_acc"
    },
    {
      "location": "api/visualization/#confidence_thresholding_data_vs_acc_subset",
      "text": "ludwig . visualize . confidence_thresholding_data_vs_acc_subset ( probabilities_per_model , ground_truth , top_n_classes , labels_limit , subset , model_names = None , output_directory = None , file_format = 'pdf' ) Show models comparision of confidence treshold data vs accuracy on a subset of data. For each model it produces a line indicating the accuracy of the model and the data coverage while increasing a threshold on the probabilities of predictions for the specified field, considering only a subset of the full training set. The way the subset is obtained is using the top_n_classes and subset parameters. The difference with confidence_thresholding is that it uses two axes instead of three, not visualizing the threshold and having coverage as x axis instead of the threshold. If the values of subset is ground_truth, then only datapoints where the ground truth class is within the top n most frequent ones will be considered as test set, and the percentage of datapoints that have been kept from the original set will be displayed. If the values of subset is predictions, then only datapoints where the the model predicts a class that is within the top n most frequent ones will be considered as test set, and the percentage of datapoints that have been kept from the original set will be displayed for each model. :param probabilities_per_model: List of model probabilities :param ground_truth: NumPy Array containing computed model ground truth data for target prediction field based on the model metadata :param top_n_classes: List containing the number of classes to plot :param labels_limit: Maximum numbers of labels. :param subset: Type of the subset filtering :param model_names: List of the names of the models to use as labels. :param output_directory: Directory where to save plots. If not specified, plots will be displayed in a window :param file_format: File format of output plots - pdf or png :return None:",
      "title": "confidence_thresholding_data_vs_acc_subset"
    },
    {
      "location": "api/visualization/#binary_threshold_vs_metric",
      "text": "ludwig . visualize . binary_threshold_vs_metric ( probabilities_per_model , ground_truth , metrics , positive_label = 1 , model_names = None , output_directory = None , file_format = 'pdf' ) Show confidence of the model against metric for the specified field. For each metric specified in metrics (options are f1, precision, recall, accuracy), this visualization produces a line chart plotting a threshold on the confidence of the model against the metric for the specified field. If field is a category feature, positive_label indicates which is the class to be considered positive class and all the others will be considered negative. It needs to be an integer, to figure out the association between classes and integers check the ground_truth_metadata JSON file. :param probabilities_per_model: List of model probabilities :param ground_truth: List of NumPy Arrays containing computed model ground truth data for target prediction fields based on the model metadata :param metrics: metrics to dispay (f1, precision, recall, accuracy) :param positive_label: Label of the positive class :param model_names: List of the names of the models to use as labels. :param output_directory: Directory where to save plots. If not specified, plots will be displayed in a window :param file_format: File format of output plots - pdf or png :return None:",
      "title": "binary_threshold_vs_metric"
    },
    {
      "location": "api/visualization/#roc_curves",
      "text": "ludwig . visualize . roc_curves ( probabilities_per_model , ground_truth , positive_label = 1 , model_names = None , output_directory = None , file_format = 'pdf' ) Show the roc curves for the specified models output field. This visualization produces a line chart plotting the roc curves for the specified field. If field is a category feature, positive_label indicates which is the class to be considered positive class and all the others will be considered negative. It needs to be an integer, to figure out the association between classes and integers check the ground_truth_metadata JSON file. :param probabilities_per_model: List of model probabilities :param ground_truth: List of NumPy Arrays containing computed model ground truth data for target prediction fields based on the model metadata :param positive_label: Label of the positive class :param model_names: List of the names of the models to use as labels. :param output_directory: Directory where to save plots. If not specified, plots will be displayed in a window :param file_format: File format of output plots - pdf or png :return None:",
      "title": "roc_curves"
    },
    {
      "location": "api/visualization/#roc_curves_from_test_statistics",
      "text": "ludwig . visualize . roc_curves_from_test_statistics ( test_stats_per_model , field , model_names = None , output_directory = None , file_format = 'pdf' ) Show the roc curves for the specified models output binary field. This visualization uses the field, test_statistics and model_names parameters. field needs to be binary feature. This visualization produces a line chart plotting the roc curves for the specified field. :param test_stats_per_model: List containing train statistics per model :param field: Prediction field containing ground truth. :param model_names: List of the names of the models to use as labels. :param output_directory: Directory where to save plots. If not specified, plots will be displayed in a window :param file_format: File format of output plots - pdf or png :return None:",
      "title": "roc_curves_from_test_statistics"
    },
    {
      "location": "api/visualization/#calibration_1_vs_all",
      "text": "ludwig . visualize . calibration_1_vs_all ( probabilities_per_model , ground_truth , top_n_classes , labels_limit , model_names = None , output_directory = None , file_format = 'pdf' ) Show models probability of predictions for the specified field. For each class or each of the k most frequent classes if top_k is specified, it produces two plots computed on the fly from the probabilities of predictions for the specified field. The first plot is a calibration curve that shows the calibration of the predictions considering the current class to be the true one and all others to be a false one, drawing one line for each model (in the aligned lists of probabilities and model_names). The second plot shows the distributions of the predictions considering the current class to be the true one and all others to be a false one, drawing the distribution for each model (in the aligned lists of probabilities and model_names). :param probabilities_per_model: List of model probabilities :param ground_truth: NumPy Array containing computed model ground truth data for target prediction field based on the model metadata :param top_n_classes: List containing the number of classes to plot :param labels_limit: Maximum numbers of labels. If labels in dataset are higher than this number, \"rare\" label :param model_names: List of the names of the models to use as labels. :param output_directory: Directory where to save plots. If not specified, plots will be displayed in a window :param file_format: File format of output plots - pdf or png :return None:",
      "title": "calibration_1_vs_all"
    },
    {
      "location": "api/visualization/#calibration_multiclass",
      "text": "ludwig . visualize . calibration_multiclass ( probabilities_per_model , ground_truth , labels_limit , model_names = None , output_directory = None , file_format = 'pdf' ) Show models probability of predictions for each class of the the specified field. :param probabilities_per_model: List of model probabilities :param ground_truth: NumPy Array containing computed model ground truth data for target prediction field based on the model metadata :param labels_limit: Maximum numbers of labels. If labels in dataset are higher than this number, \"rare\" label :param model_names: List of the names of the models to use as labels. :param output_directory: Directory where to save plots. If not specified, plots will be displayed in a window :param file_format: File format of output plots - pdf or png :return None:",
      "title": "calibration_multiclass"
    },
    {
      "location": "api/visualization/#confusion_matrix",
      "text": "ludwig . visualize . confusion_matrix ( test_stats_per_model , metadata , field , top_n_classes , normalize , model_names = None , output_directory = None , file_format = 'pdf' ) Show confision matrix in the models predictions for each field. For each model (in the aligned lists of test_statistics and model_names) it produces a heatmap of the confusion matrix in the predictions for each field that has a confusion matrix in test_statistics. The value of top_n_classes limits the heatmap to the n most frequent classes. :param test_stats_per_model: List containing train statistics per model :param metadata: Model's input metadata :param field: Prediction field containing ground truth. :param top_n_classes: List containing the number of classes to plot :param normalize: Flag to normalize rows in confusion matrix :param model_names: List of the names of the models to use as labels. :param output_directory: Directory where to save plots. If not specified, plots will be displayed in a window :param file_format: File format of output plots - pdf or png :return None: :return:",
      "title": "confusion_matrix"
    },
    {
      "location": "api/visualization/#frequency_vs_f1",
      "text": "ludwig . visualize . frequency_vs_f1 ( test_stats_per_model , metadata , field , top_n_classes , model_names = None , output_directory = None , file_format = 'pdf' ) Show prediction statistics for the specified field for each model. For each model (in the aligned lists of test_statistics and model_names), produces two plots statistics of predictions for the specified field. The first plot is a line plot with one x axis representing the different classes and two vertical axes colored in orange and blue respectively. The orange one is the frequency of the class and an orange line is plotted to show the trend. The blue one is the F1 score for that class and a blue line is plotted to show the trend. The classes on the x axis are sorted by f1 score. The second plot has the same structure of the first one, but the axes are flipped and the classes on the x axis are sorted by frequency. :param test_stats_per_model: List containing train statistics per model :param metadata: Model's input metadata :param field: Prediction field containing ground truth. :param top_n_classes: List containing the number of classes to plot :param model_names: List of the names of the models to use as labels. :param output_directory: Directory where to save plots. If not specified, plots will be displayed in a window :param file_format: File format of output plots - pdf or png :return None: :return:",
      "title": "frequency_vs_f1"
    }
  ]
}