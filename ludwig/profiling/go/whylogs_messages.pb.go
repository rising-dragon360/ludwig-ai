// A copy of whylogs/proto/src/whylogs_messages.proto from
// https://github.com/whylabs/whylogs/blob/mainline/proto/src/whylogs_messages.proto
//
// See dataset_profile.proto to see how to re-generate proto code.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: ludwig/profiling/proto/whylogs_messages.proto

package dataset_profile

import (
	any1 "github.com/golang/protobuf/ptypes/any"
	_struct "github.com/golang/protobuf/ptypes/struct"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DataType_Type int32

const (
	DataType_UNKNOWN    DataType_Type = 0
	DataType_NULL       DataType_Type = 1
	DataType_FRACTIONAL DataType_Type = 2
	DataType_INTEGRAL   DataType_Type = 3
	DataType_BOOLEAN    DataType_Type = 4
	DataType_STRING     DataType_Type = 5
)

// Enum value maps for DataType_Type.
var (
	DataType_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "NULL",
		2: "FRACTIONAL",
		3: "INTEGRAL",
		4: "BOOLEAN",
		5: "STRING",
	}
	DataType_Type_value = map[string]int32{
		"UNKNOWN":    0,
		"NULL":       1,
		"FRACTIONAL": 2,
		"INTEGRAL":   3,
		"BOOLEAN":    4,
		"STRING":     5,
	}
)

func (x DataType_Type) Enum() *DataType_Type {
	p := new(DataType_Type)
	*p = x
	return p
}

func (x DataType_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataType_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_ludwig_profiling_proto_whylogs_messages_proto_enumTypes[0].Descriptor()
}

func (DataType_Type) Type() protoreflect.EnumType {
	return &file_ludwig_profiling_proto_whylogs_messages_proto_enumTypes[0]
}

func (x DataType_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataType_Type.Descriptor instead.
func (DataType_Type) EnumDescriptor() ([]byte, []int) {
	return file_ludwig_profiling_proto_whylogs_messages_proto_rawDescGZIP(), []int{0, 0}
}

type ChunkHeader_ChunkType int32

const (
	ChunkHeader_DATASET ChunkHeader_ChunkType = 0
	ChunkHeader_COLUMN  ChunkHeader_ChunkType = 2
)

// Enum value maps for ChunkHeader_ChunkType.
var (
	ChunkHeader_ChunkType_name = map[int32]string{
		0: "DATASET",
		2: "COLUMN",
	}
	ChunkHeader_ChunkType_value = map[string]int32{
		"DATASET": 0,
		"COLUMN":  2,
	}
)

func (x ChunkHeader_ChunkType) Enum() *ChunkHeader_ChunkType {
	p := new(ChunkHeader_ChunkType)
	*p = x
	return p
}

func (x ChunkHeader_ChunkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChunkHeader_ChunkType) Descriptor() protoreflect.EnumDescriptor {
	return file_ludwig_profiling_proto_whylogs_messages_proto_enumTypes[1].Descriptor()
}

func (ChunkHeader_ChunkType) Type() protoreflect.EnumType {
	return &file_ludwig_profiling_proto_whylogs_messages_proto_enumTypes[1]
}

func (x ChunkHeader_ChunkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChunkHeader_ChunkType.Descriptor instead.
func (ChunkHeader_ChunkType) EnumDescriptor() ([]byte, []int) {
	return file_ludwig_profiling_proto_whylogs_messages_proto_rawDescGZIP(), []int{11, 0}
}

type DataType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type DataType_Type `protobuf:"varint,1,opt,name=type,proto3,enum=dataset_profile.DataType_Type" json:"type,omitempty"`
}

func (x *DataType) Reset() {
	*x = DataType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ludwig_profiling_proto_whylogs_messages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataType) ProtoMessage() {}

func (x *DataType) ProtoReflect() protoreflect.Message {
	mi := &file_ludwig_profiling_proto_whylogs_messages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataType.ProtoReflect.Descriptor instead.
func (*DataType) Descriptor() ([]byte, []int) {
	return file_ludwig_profiling_proto_whylogs_messages_proto_rawDescGZIP(), []int{0}
}

func (x *DataType) GetType() DataType_Type {
	if x != nil {
		return x.Type
	}
	return DataType_UNKNOWN
}

type HllSketchMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sketch []byte `protobuf:"bytes,1,opt,name=sketch,proto3" json:"sketch,omitempty"`
}

func (x *HllSketchMessage) Reset() {
	*x = HllSketchMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ludwig_profiling_proto_whylogs_messages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HllSketchMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HllSketchMessage) ProtoMessage() {}

func (x *HllSketchMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ludwig_profiling_proto_whylogs_messages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HllSketchMessage.ProtoReflect.Descriptor instead.
func (*HllSketchMessage) Descriptor() ([]byte, []int) {
	return file_ludwig_profiling_proto_whylogs_messages_proto_rawDescGZIP(), []int{1}
}

func (x *HllSketchMessage) GetSketch() []byte {
	if x != nil {
		return x.Sketch
	}
	return nil
}

type FrequentItemsSketchMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sketch []byte `protobuf:"bytes,1,opt,name=sketch,proto3" json:"sketch,omitempty"`
}

func (x *FrequentItemsSketchMessage) Reset() {
	*x = FrequentItemsSketchMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ludwig_profiling_proto_whylogs_messages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrequentItemsSketchMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrequentItemsSketchMessage) ProtoMessage() {}

func (x *FrequentItemsSketchMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ludwig_profiling_proto_whylogs_messages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrequentItemsSketchMessage.ProtoReflect.Descriptor instead.
func (*FrequentItemsSketchMessage) Descriptor() ([]byte, []int) {
	return file_ludwig_profiling_proto_whylogs_messages_proto_rawDescGZIP(), []int{2}
}

func (x *FrequentItemsSketchMessage) GetSketch() []byte {
	if x != nil {
		return x.Sketch
	}
	return nil
}

type KllSketchMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sketch []byte `protobuf:"bytes,1,opt,name=sketch,proto3" json:"sketch,omitempty"`
}

func (x *KllSketchMessage) Reset() {
	*x = KllSketchMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ludwig_profiling_proto_whylogs_messages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KllSketchMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KllSketchMessage) ProtoMessage() {}

func (x *KllSketchMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ludwig_profiling_proto_whylogs_messages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KllSketchMessage.ProtoReflect.Descriptor instead.
func (*KllSketchMessage) Descriptor() ([]byte, []int) {
	return file_ludwig_profiling_proto_whylogs_messages_proto_rawDescGZIP(), []int{3}
}

func (x *KllSketchMessage) GetSketch() []byte {
	if x != nil {
		return x.Sketch
	}
	return nil
}

type CpcSketchMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sketch []byte `protobuf:"bytes,1,opt,name=sketch,proto3" json:"sketch,omitempty"`
}

func (x *CpcSketchMessage) Reset() {
	*x = CpcSketchMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ludwig_profiling_proto_whylogs_messages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CpcSketchMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CpcSketchMessage) ProtoMessage() {}

func (x *CpcSketchMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ludwig_profiling_proto_whylogs_messages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CpcSketchMessage.ProtoReflect.Descriptor instead.
func (*CpcSketchMessage) Descriptor() ([]byte, []int) {
	return file_ludwig_profiling_proto_whylogs_messages_proto_rawDescGZIP(), []int{4}
}

func (x *CpcSketchMessage) GetSketch() []byte {
	if x != nil {
		return x.Sketch
	}
	return nil
}

type MetricComponentMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeId uint32 `protobuf:"varint,1,opt,name=type_id,json=typeId,proto3" json:"type_id,omitempty"` // type ID. It might determine how a field gets serder and the aggregation logic
	// Types that are assignable to Value:
	//
	//	*MetricComponentMessage_N
	//	*MetricComponentMessage_D
	//	*MetricComponentMessage_FrequentItems
	//	*MetricComponentMessage_Hll
	//	*MetricComponentMessage_Kll
	//	*MetricComponentMessage_Cpc
	//	*MetricComponentMessage_SerializedBytes
	//	*MetricComponentMessage_DataclassParam
	//	*MetricComponentMessage_Msg
	Value isMetricComponentMessage_Value `protobuf_oneof:"value"`
}

func (x *MetricComponentMessage) Reset() {
	*x = MetricComponentMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ludwig_profiling_proto_whylogs_messages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricComponentMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricComponentMessage) ProtoMessage() {}

func (x *MetricComponentMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ludwig_profiling_proto_whylogs_messages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricComponentMessage.ProtoReflect.Descriptor instead.
func (*MetricComponentMessage) Descriptor() ([]byte, []int) {
	return file_ludwig_profiling_proto_whylogs_messages_proto_rawDescGZIP(), []int{5}
}

func (x *MetricComponentMessage) GetTypeId() uint32 {
	if x != nil {
		return x.TypeId
	}
	return 0
}

func (m *MetricComponentMessage) GetValue() isMetricComponentMessage_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *MetricComponentMessage) GetN() int64 {
	if x, ok := x.GetValue().(*MetricComponentMessage_N); ok {
		return x.N
	}
	return 0
}

func (x *MetricComponentMessage) GetD() float64 {
	if x, ok := x.GetValue().(*MetricComponentMessage_D); ok {
		return x.D
	}
	return 0
}

func (x *MetricComponentMessage) GetFrequentItems() *FrequentItemsSketchMessage {
	if x, ok := x.GetValue().(*MetricComponentMessage_FrequentItems); ok {
		return x.FrequentItems
	}
	return nil
}

func (x *MetricComponentMessage) GetHll() *HllSketchMessage {
	if x, ok := x.GetValue().(*MetricComponentMessage_Hll); ok {
		return x.Hll
	}
	return nil
}

func (x *MetricComponentMessage) GetKll() *KllSketchMessage {
	if x, ok := x.GetValue().(*MetricComponentMessage_Kll); ok {
		return x.Kll
	}
	return nil
}

func (x *MetricComponentMessage) GetCpc() *CpcSketchMessage {
	if x, ok := x.GetValue().(*MetricComponentMessage_Cpc); ok {
		return x.Cpc
	}
	return nil
}

func (x *MetricComponentMessage) GetSerializedBytes() []byte {
	if x, ok := x.GetValue().(*MetricComponentMessage_SerializedBytes); ok {
		return x.SerializedBytes
	}
	return nil
}

func (x *MetricComponentMessage) GetDataclassParam() *_struct.Struct {
	if x, ok := x.GetValue().(*MetricComponentMessage_DataclassParam); ok {
		return x.DataclassParam
	}
	return nil
}

func (x *MetricComponentMessage) GetMsg() *any1.Any {
	if x, ok := x.GetValue().(*MetricComponentMessage_Msg); ok {
		return x.Msg
	}
	return nil
}

type isMetricComponentMessage_Value interface {
	isMetricComponentMessage_Value()
}

type MetricComponentMessage_N struct {
	// first class citizens
	N int64 `protobuf:"varint,2,opt,name=n,proto3,oneof"`
}

type MetricComponentMessage_D struct {
	D float64 `protobuf:"fixed64,3,opt,name=d,proto3,oneof"`
}

type MetricComponentMessage_FrequentItems struct {
	FrequentItems *FrequentItemsSketchMessage `protobuf:"bytes,4,opt,name=frequent_items,json=frequentItems,proto3,oneof"`
}

type MetricComponentMessage_Hll struct {
	Hll *HllSketchMessage `protobuf:"bytes,5,opt,name=hll,proto3,oneof"`
}

type MetricComponentMessage_Kll struct {
	Kll *KllSketchMessage `protobuf:"bytes,6,opt,name=kll,proto3,oneof"`
}

type MetricComponentMessage_Cpc struct {
	Cpc *CpcSketchMessage `protobuf:"bytes,7,opt,name=cpc,proto3,oneof"`
}

type MetricComponentMessage_SerializedBytes struct {
	// extension points
	SerializedBytes []byte `protobuf:"bytes,10,opt,name=serialized_bytes,json=serializedBytes,proto3,oneof"`
}

type MetricComponentMessage_DataclassParam struct {
	DataclassParam *_struct.Struct `protobuf:"bytes,11,opt,name=dataclass_param,json=dataclassParam,proto3,oneof"`
}

type MetricComponentMessage_Msg struct {
	Msg *any1.Any `protobuf:"bytes,12,opt,name=msg,proto3,oneof"`
}

func (*MetricComponentMessage_N) isMetricComponentMessage_Value() {}

func (*MetricComponentMessage_D) isMetricComponentMessage_Value() {}

func (*MetricComponentMessage_FrequentItems) isMetricComponentMessage_Value() {}

func (*MetricComponentMessage_Hll) isMetricComponentMessage_Value() {}

func (*MetricComponentMessage_Kll) isMetricComponentMessage_Value() {}

func (*MetricComponentMessage_Cpc) isMetricComponentMessage_Value() {}

func (*MetricComponentMessage_SerializedBytes) isMetricComponentMessage_Value() {}

func (*MetricComponentMessage_DataclassParam) isMetricComponentMessage_Value() {}

func (*MetricComponentMessage_Msg) isMetricComponentMessage_Value() {}

type MetricMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetricComponents map[string]*MetricComponentMessage `protobuf:"bytes,1,rep,name=metric_components,json=metricComponents,proto3" json:"metric_components,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MetricMessage) Reset() {
	*x = MetricMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ludwig_profiling_proto_whylogs_messages_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricMessage) ProtoMessage() {}

func (x *MetricMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ludwig_profiling_proto_whylogs_messages_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricMessage.ProtoReflect.Descriptor instead.
func (*MetricMessage) Descriptor() ([]byte, []int) {
	return file_ludwig_profiling_proto_whylogs_messages_proto_rawDescGZIP(), []int{6}
}

func (x *MetricMessage) GetMetricComponents() map[string]*MetricComponentMessage {
	if x != nil {
		return x.MetricComponents
	}
	return nil
}

type ColumnMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetricComponents map[string]*MetricComponentMessage `protobuf:"bytes,1,rep,name=metric_components,json=metricComponents,proto3" json:"metric_components,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ColumnMessage) Reset() {
	*x = ColumnMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ludwig_profiling_proto_whylogs_messages_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnMessage) ProtoMessage() {}

func (x *ColumnMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ludwig_profiling_proto_whylogs_messages_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnMessage.ProtoReflect.Descriptor instead.
func (*ColumnMessage) Descriptor() ([]byte, []int) {
	return file_ludwig_profiling_proto_whylogs_messages_proto_rawDescGZIP(), []int{7}
}

func (x *ColumnMessage) GetMetricComponents() map[string]*MetricComponentMessage {
	if x != nil {
		return x.MetricComponents
	}
	return nil
}

type DatasetProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchemaMajorVersion uint32            `protobuf:"varint,1,opt,name=schema_major_version,json=schemaMajorVersion,proto3" json:"schema_major_version,omitempty"`
	SchemaMinorVersion uint32            `protobuf:"varint,2,opt,name=schema_minor_version,json=schemaMinorVersion,proto3" json:"schema_minor_version,omitempty"`
	CreationTimestamp  uint64            `protobuf:"varint,4,opt,name=creation_timestamp,json=creationTimestamp,proto3" json:"creation_timestamp,omitempty"`
	DatasetTimestamp   uint64            `protobuf:"varint,5,opt,name=dataset_timestamp,json=datasetTimestamp,proto3" json:"dataset_timestamp,omitempty"`
	Tags               map[string]string `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Metadata           map[string]string `protobuf:"bytes,7,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DatasetProperties) Reset() {
	*x = DatasetProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ludwig_profiling_proto_whylogs_messages_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatasetProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetProperties) ProtoMessage() {}

func (x *DatasetProperties) ProtoReflect() protoreflect.Message {
	mi := &file_ludwig_profiling_proto_whylogs_messages_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetProperties.ProtoReflect.Descriptor instead.
func (*DatasetProperties) Descriptor() ([]byte, []int) {
	return file_ludwig_profiling_proto_whylogs_messages_proto_rawDescGZIP(), []int{8}
}

func (x *DatasetProperties) GetSchemaMajorVersion() uint32 {
	if x != nil {
		return x.SchemaMajorVersion
	}
	return 0
}

func (x *DatasetProperties) GetSchemaMinorVersion() uint32 {
	if x != nil {
		return x.SchemaMinorVersion
	}
	return 0
}

func (x *DatasetProperties) GetCreationTimestamp() uint64 {
	if x != nil {
		return x.CreationTimestamp
	}
	return 0
}

func (x *DatasetProperties) GetDatasetTimestamp() uint64 {
	if x != nil {
		return x.DatasetTimestamp
	}
	return 0
}

func (x *DatasetProperties) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *DatasetProperties) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type ChunkOffsets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offsets []uint64 `protobuf:"varint,1,rep,packed,name=offsets,proto3" json:"offsets,omitempty"`
}

func (x *ChunkOffsets) Reset() {
	*x = ChunkOffsets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ludwig_profiling_proto_whylogs_messages_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkOffsets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkOffsets) ProtoMessage() {}

func (x *ChunkOffsets) ProtoReflect() protoreflect.Message {
	mi := &file_ludwig_profiling_proto_whylogs_messages_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkOffsets.ProtoReflect.Descriptor instead.
func (*ChunkOffsets) Descriptor() ([]byte, []int) {
	return file_ludwig_profiling_proto_whylogs_messages_proto_rawDescGZIP(), []int{9}
}

func (x *ChunkOffsets) GetOffsets() []uint64 {
	if x != nil {
		return x.Offsets
	}
	return nil
}

type ChunkMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetricComponents map[uint32]*MetricComponentMessage `protobuf:"bytes,1,rep,name=metric_components,json=metricComponents,proto3" json:"metric_components,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ChunkMessage) Reset() {
	*x = ChunkMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ludwig_profiling_proto_whylogs_messages_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkMessage) ProtoMessage() {}

func (x *ChunkMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ludwig_profiling_proto_whylogs_messages_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkMessage.ProtoReflect.Descriptor instead.
func (*ChunkMessage) Descriptor() ([]byte, []int) {
	return file_ludwig_profiling_proto_whylogs_messages_proto_rawDescGZIP(), []int{10}
}

func (x *ChunkMessage) GetMetricComponents() map[uint32]*MetricComponentMessage {
	if x != nil {
		return x.MetricComponents
	}
	return nil
}

type ChunkHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   ChunkHeader_ChunkType `protobuf:"varint,1,opt,name=type,proto3,enum=dataset_profile.ChunkHeader_ChunkType" json:"type,omitempty"`
	Tag    string                `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	Length uint32                `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
}

func (x *ChunkHeader) Reset() {
	*x = ChunkHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ludwig_profiling_proto_whylogs_messages_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkHeader) ProtoMessage() {}

func (x *ChunkHeader) ProtoReflect() protoreflect.Message {
	mi := &file_ludwig_profiling_proto_whylogs_messages_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkHeader.ProtoReflect.Descriptor instead.
func (*ChunkHeader) Descriptor() ([]byte, []int) {
	return file_ludwig_profiling_proto_whylogs_messages_proto_rawDescGZIP(), []int{11}
}

func (x *ChunkHeader) GetType() ChunkHeader_ChunkType {
	if x != nil {
		return x.Type
	}
	return ChunkHeader_DATASET
}

func (x *ChunkHeader) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *ChunkHeader) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

type DatasetProfileHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Properties         *DatasetProperties       `protobuf:"bytes,1,opt,name=properties,proto3" json:"properties,omitempty"`
	ColumnOffsets      map[string]*ChunkOffsets `protobuf:"bytes,2,rep,name=column_offsets,json=columnOffsets,proto3" json:"column_offsets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MetricOffsets      []*ChunkOffsets          `protobuf:"bytes,3,rep,name=metric_offsets,json=metricOffsets,proto3" json:"metric_offsets,omitempty"`
	Length             uint64                   `protobuf:"varint,4,opt,name=length,proto3" json:"length,omitempty"` // total length of the rest of the data for this profile.
	IndexedMetricPaths map[uint32]string        `protobuf:"bytes,5,rep,name=indexed_metric_paths,json=indexedMetricPaths,proto3" json:"indexed_metric_paths,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DatasetProfileHeader) Reset() {
	*x = DatasetProfileHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ludwig_profiling_proto_whylogs_messages_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatasetProfileHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetProfileHeader) ProtoMessage() {}

func (x *DatasetProfileHeader) ProtoReflect() protoreflect.Message {
	mi := &file_ludwig_profiling_proto_whylogs_messages_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetProfileHeader.ProtoReflect.Descriptor instead.
func (*DatasetProfileHeader) Descriptor() ([]byte, []int) {
	return file_ludwig_profiling_proto_whylogs_messages_proto_rawDescGZIP(), []int{12}
}

func (x *DatasetProfileHeader) GetProperties() *DatasetProperties {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *DatasetProfileHeader) GetColumnOffsets() map[string]*ChunkOffsets {
	if x != nil {
		return x.ColumnOffsets
	}
	return nil
}

func (x *DatasetProfileHeader) GetMetricOffsets() []*ChunkOffsets {
	if x != nil {
		return x.MetricOffsets
	}
	return nil
}

func (x *DatasetProfileHeader) GetLength() uint64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *DatasetProfileHeader) GetIndexedMetricPaths() map[uint32]string {
	if x != nil {
		return x.IndexedMetricPaths
	}
	return nil
}

type SegmentTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SegmentTag) Reset() {
	*x = SegmentTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ludwig_profiling_proto_whylogs_messages_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SegmentTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentTag) ProtoMessage() {}

func (x *SegmentTag) ProtoReflect() protoreflect.Message {
	mi := &file_ludwig_profiling_proto_whylogs_messages_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmentTag.ProtoReflect.Descriptor instead.
func (*SegmentTag) Descriptor() ([]byte, []int) {
	return file_ludwig_profiling_proto_whylogs_messages_proto_rawDescGZIP(), []int{13}
}

func (x *SegmentTag) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SegmentTag) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Segment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tags []*SegmentTag `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *Segment) Reset() {
	*x = Segment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ludwig_profiling_proto_whylogs_messages_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Segment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Segment) ProtoMessage() {}

func (x *Segment) ProtoReflect() protoreflect.Message {
	mi := &file_ludwig_profiling_proto_whylogs_messages_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Segment.ProtoReflect.Descriptor instead.
func (*Segment) Descriptor() ([]byte, []int) {
	return file_ludwig_profiling_proto_whylogs_messages_proto_rawDescGZIP(), []int{14}
}

func (x *Segment) GetTags() []*SegmentTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

type DatasetSegmentHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// whether the file contains segmented data or not
	HasSegments bool `protobuf:"varint,1,opt,name=has_segments,json=hasSegments,proto3" json:"has_segments,omitempty"`
	// list of segments
	Segments []*Segment `protobuf:"bytes,4,rep,name=segments,proto3" json:"segments,omitempty"`
	// we want the indices of the map of offsets to have static size, and thus we use fixed32 bytes
	Offsets map[uint32]uint64 `protobuf:"bytes,5,rep,name=offsets,proto3" json:"offsets,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *DatasetSegmentHeader) Reset() {
	*x = DatasetSegmentHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ludwig_profiling_proto_whylogs_messages_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatasetSegmentHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetSegmentHeader) ProtoMessage() {}

func (x *DatasetSegmentHeader) ProtoReflect() protoreflect.Message {
	mi := &file_ludwig_profiling_proto_whylogs_messages_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetSegmentHeader.ProtoReflect.Descriptor instead.
func (*DatasetSegmentHeader) Descriptor() ([]byte, []int) {
	return file_ludwig_profiling_proto_whylogs_messages_proto_rawDescGZIP(), []int{15}
}

func (x *DatasetSegmentHeader) GetHasSegments() bool {
	if x != nil {
		return x.HasSegments
	}
	return false
}

func (x *DatasetSegmentHeader) GetSegments() []*Segment {
	if x != nil {
		return x.Segments
	}
	return nil
}

func (x *DatasetSegmentHeader) GetOffsets() map[uint32]uint64 {
	if x != nil {
		return x.Offsets
	}
	return nil
}

var File_ludwig_profiling_proto_whylogs_messages_proto protoreflect.FileDescriptor

var file_ludwig_profiling_proto_whylogs_messages_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x6c, 0x75, 0x64, 0x77, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69,
	0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x77, 0x68, 0x79, 0x6c, 0x6f, 0x67, 0x73,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x94, 0x01, 0x0a, 0x08, 0x44, 0x61,
	0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x54, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x52, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x54,
	0x45, 0x47, 0x52, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x4f, 0x4f, 0x4c, 0x45,
	0x41, 0x4e, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x05,
	0x22, 0x2a, 0x0a, 0x10, 0x48, 0x6c, 0x6c, 0x53, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x22, 0x34, 0x0a, 0x1a,
	0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x53, 0x6b, 0x65,
	0x74, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6b,
	0x65, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x6b, 0x65, 0x74,
	0x63, 0x68, 0x22, 0x2a, 0x0a, 0x10, 0x4b, 0x6c, 0x6c, 0x53, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x22, 0x2a,
	0x0a, 0x10, 0x43, 0x70, 0x63, 0x53, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x22, 0xf0, 0x03, 0x0a, 0x16, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x0e,
	0x0a, 0x01, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x01, 0x6e, 0x12, 0x0e,
	0x0a, 0x01, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x01, 0x64, 0x12, 0x54,
	0x0a, 0x0e, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x53, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x12, 0x35, 0x0a, 0x03, 0x68, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x2e, 0x48, 0x6c, 0x6c, 0x53, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x03, 0x68, 0x6c, 0x6c, 0x12, 0x35, 0x0a, 0x03, 0x6b,
	0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x4b, 0x6c, 0x6c, 0x53, 0x6b,
	0x65, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x03, 0x6b,
	0x6c, 0x6c, 0x12, 0x35, 0x0a, 0x03, 0x63, 0x70, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x2e, 0x43, 0x70, 0x63, 0x53, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x03, 0x63, 0x70, 0x63, 0x12, 0x2b, 0x0a, 0x10, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x28, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x00, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xe0, 0x01,
	0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x61, 0x0a, 0x11, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x10, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x1a, 0x6c, 0x0a, 0x15, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3d, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xe0, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x61, 0x0a, 0x11, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x10, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x6c, 0x0a, 0x15, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xd9, 0x03, 0x0a, 0x11, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x5f, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d,
	0x61, 0x6a, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a,
	0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2b, 0x0a, 0x11,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x54, 0x61, 0x67, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x4c, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x28, 0x0a, 0x0c, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04,
	0x52, 0x07, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x22, 0xde, 0x01, 0x0a, 0x0c, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x60, 0x0a, 0x11, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x6c, 0x0a, 0x15,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x99, 0x01, 0x0a, 0x0b, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x22, 0x24, 0x0a, 0x09, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x44, 0x41, 0x54, 0x41, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4f,
	0x4c, 0x55, 0x4d, 0x4e, 0x10, 0x02, 0x22, 0xb2, 0x04, 0x0a, 0x14, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x42, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x73, 0x12, 0x44, 0x0a, 0x0e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x52, 0x0d, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x6f, 0x0a, 0x14, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x5f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x50, 0x61, 0x74, 0x68, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x12, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x50, 0x61,
	0x74, 0x68, 0x73, 0x1a, 0x5f, 0x0a, 0x12, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x45, 0x0a, 0x17, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x50, 0x61, 0x74, 0x68, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x34, 0x0a, 0x0a, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x3a, 0x0a, 0x07, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0xf9, 0x01,
	0x0a, 0x14, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x61, 0x73, 0x5f, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x61,
	0x73, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x4c, 0x0a, 0x07, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x1a, 0x3a, 0x0a,
	0x0c, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x75, 0x64, 0x77, 0x69, 0x67, 0x2d, 0x61,
	0x69, 0x2f, 0x6c, 0x75, 0x64, 0x77, 0x69, 0x67, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ludwig_profiling_proto_whylogs_messages_proto_rawDescOnce sync.Once
	file_ludwig_profiling_proto_whylogs_messages_proto_rawDescData = file_ludwig_profiling_proto_whylogs_messages_proto_rawDesc
)

func file_ludwig_profiling_proto_whylogs_messages_proto_rawDescGZIP() []byte {
	file_ludwig_profiling_proto_whylogs_messages_proto_rawDescOnce.Do(func() {
		file_ludwig_profiling_proto_whylogs_messages_proto_rawDescData = protoimpl.X.CompressGZIP(file_ludwig_profiling_proto_whylogs_messages_proto_rawDescData)
	})
	return file_ludwig_profiling_proto_whylogs_messages_proto_rawDescData
}

var file_ludwig_profiling_proto_whylogs_messages_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_ludwig_profiling_proto_whylogs_messages_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_ludwig_profiling_proto_whylogs_messages_proto_goTypes = []interface{}{
	(DataType_Type)(0),                 // 0: dataset_profile.DataType.Type
	(ChunkHeader_ChunkType)(0),         // 1: dataset_profile.ChunkHeader.ChunkType
	(*DataType)(nil),                   // 2: dataset_profile.DataType
	(*HllSketchMessage)(nil),           // 3: dataset_profile.HllSketchMessage
	(*FrequentItemsSketchMessage)(nil), // 4: dataset_profile.FrequentItemsSketchMessage
	(*KllSketchMessage)(nil),           // 5: dataset_profile.KllSketchMessage
	(*CpcSketchMessage)(nil),           // 6: dataset_profile.CpcSketchMessage
	(*MetricComponentMessage)(nil),     // 7: dataset_profile.MetricComponentMessage
	(*MetricMessage)(nil),              // 8: dataset_profile.MetricMessage
	(*ColumnMessage)(nil),              // 9: dataset_profile.ColumnMessage
	(*DatasetProperties)(nil),          // 10: dataset_profile.DatasetProperties
	(*ChunkOffsets)(nil),               // 11: dataset_profile.ChunkOffsets
	(*ChunkMessage)(nil),               // 12: dataset_profile.ChunkMessage
	(*ChunkHeader)(nil),                // 13: dataset_profile.ChunkHeader
	(*DatasetProfileHeader)(nil),       // 14: dataset_profile.DatasetProfileHeader
	(*SegmentTag)(nil),                 // 15: dataset_profile.SegmentTag
	(*Segment)(nil),                    // 16: dataset_profile.Segment
	(*DatasetSegmentHeader)(nil),       // 17: dataset_profile.DatasetSegmentHeader
	nil,                                // 18: dataset_profile.MetricMessage.MetricComponentsEntry
	nil,                                // 19: dataset_profile.ColumnMessage.MetricComponentsEntry
	nil,                                // 20: dataset_profile.DatasetProperties.TagsEntry
	nil,                                // 21: dataset_profile.DatasetProperties.MetadataEntry
	nil,                                // 22: dataset_profile.ChunkMessage.MetricComponentsEntry
	nil,                                // 23: dataset_profile.DatasetProfileHeader.ColumnOffsetsEntry
	nil,                                // 24: dataset_profile.DatasetProfileHeader.IndexedMetricPathsEntry
	nil,                                // 25: dataset_profile.DatasetSegmentHeader.OffsetsEntry
	(*_struct.Struct)(nil),             // 26: google.protobuf.Struct
	(*any1.Any)(nil),                   // 27: google.protobuf.Any
}
var file_ludwig_profiling_proto_whylogs_messages_proto_depIdxs = []int32{
	0,  // 0: dataset_profile.DataType.type:type_name -> dataset_profile.DataType.Type
	4,  // 1: dataset_profile.MetricComponentMessage.frequent_items:type_name -> dataset_profile.FrequentItemsSketchMessage
	3,  // 2: dataset_profile.MetricComponentMessage.hll:type_name -> dataset_profile.HllSketchMessage
	5,  // 3: dataset_profile.MetricComponentMessage.kll:type_name -> dataset_profile.KllSketchMessage
	6,  // 4: dataset_profile.MetricComponentMessage.cpc:type_name -> dataset_profile.CpcSketchMessage
	26, // 5: dataset_profile.MetricComponentMessage.dataclass_param:type_name -> google.protobuf.Struct
	27, // 6: dataset_profile.MetricComponentMessage.msg:type_name -> google.protobuf.Any
	18, // 7: dataset_profile.MetricMessage.metric_components:type_name -> dataset_profile.MetricMessage.MetricComponentsEntry
	19, // 8: dataset_profile.ColumnMessage.metric_components:type_name -> dataset_profile.ColumnMessage.MetricComponentsEntry
	20, // 9: dataset_profile.DatasetProperties.tags:type_name -> dataset_profile.DatasetProperties.TagsEntry
	21, // 10: dataset_profile.DatasetProperties.metadata:type_name -> dataset_profile.DatasetProperties.MetadataEntry
	22, // 11: dataset_profile.ChunkMessage.metric_components:type_name -> dataset_profile.ChunkMessage.MetricComponentsEntry
	1,  // 12: dataset_profile.ChunkHeader.type:type_name -> dataset_profile.ChunkHeader.ChunkType
	10, // 13: dataset_profile.DatasetProfileHeader.properties:type_name -> dataset_profile.DatasetProperties
	23, // 14: dataset_profile.DatasetProfileHeader.column_offsets:type_name -> dataset_profile.DatasetProfileHeader.ColumnOffsetsEntry
	11, // 15: dataset_profile.DatasetProfileHeader.metric_offsets:type_name -> dataset_profile.ChunkOffsets
	24, // 16: dataset_profile.DatasetProfileHeader.indexed_metric_paths:type_name -> dataset_profile.DatasetProfileHeader.IndexedMetricPathsEntry
	15, // 17: dataset_profile.Segment.tags:type_name -> dataset_profile.SegmentTag
	16, // 18: dataset_profile.DatasetSegmentHeader.segments:type_name -> dataset_profile.Segment
	25, // 19: dataset_profile.DatasetSegmentHeader.offsets:type_name -> dataset_profile.DatasetSegmentHeader.OffsetsEntry
	7,  // 20: dataset_profile.MetricMessage.MetricComponentsEntry.value:type_name -> dataset_profile.MetricComponentMessage
	7,  // 21: dataset_profile.ColumnMessage.MetricComponentsEntry.value:type_name -> dataset_profile.MetricComponentMessage
	7,  // 22: dataset_profile.ChunkMessage.MetricComponentsEntry.value:type_name -> dataset_profile.MetricComponentMessage
	11, // 23: dataset_profile.DatasetProfileHeader.ColumnOffsetsEntry.value:type_name -> dataset_profile.ChunkOffsets
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_ludwig_profiling_proto_whylogs_messages_proto_init() }
func file_ludwig_profiling_proto_whylogs_messages_proto_init() {
	if File_ludwig_profiling_proto_whylogs_messages_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ludwig_profiling_proto_whylogs_messages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ludwig_profiling_proto_whylogs_messages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HllSketchMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ludwig_profiling_proto_whylogs_messages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FrequentItemsSketchMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ludwig_profiling_proto_whylogs_messages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KllSketchMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ludwig_profiling_proto_whylogs_messages_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CpcSketchMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ludwig_profiling_proto_whylogs_messages_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricComponentMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ludwig_profiling_proto_whylogs_messages_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ludwig_profiling_proto_whylogs_messages_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ludwig_profiling_proto_whylogs_messages_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatasetProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ludwig_profiling_proto_whylogs_messages_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChunkOffsets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ludwig_profiling_proto_whylogs_messages_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChunkMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ludwig_profiling_proto_whylogs_messages_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChunkHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ludwig_profiling_proto_whylogs_messages_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatasetProfileHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ludwig_profiling_proto_whylogs_messages_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SegmentTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ludwig_profiling_proto_whylogs_messages_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Segment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ludwig_profiling_proto_whylogs_messages_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatasetSegmentHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ludwig_profiling_proto_whylogs_messages_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*MetricComponentMessage_N)(nil),
		(*MetricComponentMessage_D)(nil),
		(*MetricComponentMessage_FrequentItems)(nil),
		(*MetricComponentMessage_Hll)(nil),
		(*MetricComponentMessage_Kll)(nil),
		(*MetricComponentMessage_Cpc)(nil),
		(*MetricComponentMessage_SerializedBytes)(nil),
		(*MetricComponentMessage_DataclassParam)(nil),
		(*MetricComponentMessage_Msg)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ludwig_profiling_proto_whylogs_messages_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ludwig_profiling_proto_whylogs_messages_proto_goTypes,
		DependencyIndexes: file_ludwig_profiling_proto_whylogs_messages_proto_depIdxs,
		EnumInfos:         file_ludwig_profiling_proto_whylogs_messages_proto_enumTypes,
		MessageInfos:      file_ludwig_profiling_proto_whylogs_messages_proto_msgTypes,
	}.Build()
	File_ludwig_profiling_proto_whylogs_messages_proto = out.File
	file_ludwig_profiling_proto_whylogs_messages_proto_rawDesc = nil
	file_ludwig_profiling_proto_whylogs_messages_proto_goTypes = nil
	file_ludwig_profiling_proto_whylogs_messages_proto_depIdxs = nil
}
