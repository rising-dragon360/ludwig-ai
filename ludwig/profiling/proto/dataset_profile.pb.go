// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ludwig/profiling/proto/dataset_profile.proto

package dataset_profile

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Dataset profile represents a collection of in-memory profiling stats for a
// dataset. Used for recommending Ludwig configs and Ludwig data type inference.
type DatasetProfile struct {
	// When the profile was calculated.
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The number of examples in this dataset.
	NumExamples int64 `protobuf:"varint,2,opt,name=num_examples,json=numExamples,proto3" json:"num_examples,omitempty"`
	// The total size of this dataset in bytes.
	SizeBytes int64 `protobuf:"varint,3,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty"`
	// Map of feature name to FeatureProfile.
	FeatureProfiles      map[string]*FeatureProfile `protobuf:"bytes,20,rep,name=feature_profiles,json=featureProfiles,proto3" json:"feature_profiles,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *DatasetProfile) Reset()         { *m = DatasetProfile{} }
func (m *DatasetProfile) String() string { return proto.CompactTextString(m) }
func (*DatasetProfile) ProtoMessage()    {}
func (*DatasetProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d0cd1b054845846, []int{0}
}

func (m *DatasetProfile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DatasetProfile.Unmarshal(m, b)
}
func (m *DatasetProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DatasetProfile.Marshal(b, m, deterministic)
}
func (m *DatasetProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DatasetProfile.Merge(m, src)
}
func (m *DatasetProfile) XXX_Size() int {
	return xxx_messageInfo_DatasetProfile.Size(m)
}
func (m *DatasetProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_DatasetProfile.DiscardUnknown(m)
}

var xxx_messageInfo_DatasetProfile proto.InternalMessageInfo

func (m *DatasetProfile) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *DatasetProfile) GetNumExamples() int64 {
	if m != nil {
		return m.NumExamples
	}
	return 0
}

func (m *DatasetProfile) GetSizeBytes() int64 {
	if m != nil {
		return m.SizeBytes
	}
	return 0
}

func (m *DatasetProfile) GetFeatureProfiles() map[string]*FeatureProfile {
	if m != nil {
		return m.FeatureProfiles
	}
	return nil
}

// Feature profile represents a collection of in-memory profiling stats for a
// single feature column.
type FeatureProfile struct {
	// Whylogs metrics.
	// optional whylogs.ColumnMessage whylogs_metrics = 1;
	WhylogsMetrics       *ColumnMessage `protobuf:"bytes,1,opt,name=whylogs_metrics,json=whylogsMetrics,proto3" json:"whylogs_metrics,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *FeatureProfile) Reset()         { *m = FeatureProfile{} }
func (m *FeatureProfile) String() string { return proto.CompactTextString(m) }
func (*FeatureProfile) ProtoMessage()    {}
func (*FeatureProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d0cd1b054845846, []int{1}
}

func (m *FeatureProfile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FeatureProfile.Unmarshal(m, b)
}
func (m *FeatureProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FeatureProfile.Marshal(b, m, deterministic)
}
func (m *FeatureProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeatureProfile.Merge(m, src)
}
func (m *FeatureProfile) XXX_Size() int {
	return xxx_messageInfo_FeatureProfile.Size(m)
}
func (m *FeatureProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_FeatureProfile.DiscardUnknown(m)
}

var xxx_messageInfo_FeatureProfile proto.InternalMessageInfo

func (m *FeatureProfile) GetWhylogsMetrics() *ColumnMessage {
	if m != nil {
		return m.WhylogsMetrics
	}
	return nil
}

func init() {
	proto.RegisterType((*DatasetProfile)(nil), "dataset_profile.DatasetProfile")
	proto.RegisterMapType((map[string]*FeatureProfile)(nil), "dataset_profile.DatasetProfile.FeatureProfilesEntry")
	proto.RegisterType((*FeatureProfile)(nil), "dataset_profile.FeatureProfile")
}

func init() {
	proto.RegisterFile("ludwig/profiling/proto/dataset_profile.proto", fileDescriptor_1d0cd1b054845846)
}

var fileDescriptor_1d0cd1b054845846 = []byte{
	// 297 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0x4f, 0x4f, 0xc2, 0x40,
	0x10, 0xc5, 0x03, 0x8d, 0x26, 0x4c, 0x0d, 0x90, 0x0d, 0x87, 0x86, 0xf8, 0x07, 0x39, 0x71, 0x50,
	0x48, 0x50, 0x13, 0xe3, 0x51, 0x45, 0x4f, 0x24, 0xa6, 0x37, 0x4f, 0xcd, 0x02, 0x43, 0xdd, 0xb8,
	0xdb, 0x36, 0x9d, 0x5d, 0xb1, 0x7e, 0x30, 0x3f, 0x9f, 0xe9, 0x6e, 0x0d, 0x29, 0xe8, 0x6d, 0xfa,
	0xeb, 0xbc, 0x37, 0xf3, 0x76, 0xe0, 0x42, 0x9a, 0xd5, 0x46, 0xc4, 0x93, 0x2c, 0x4f, 0xd7, 0x42,
	0x8a, 0xc4, 0x56, 0x3a, 0x9d, 0xac, 0xb8, 0xe6, 0x84, 0x3a, 0x72, 0x1c, 0xc7, 0x96, 0xb2, 0xce,
	0x0e, 0xee, 0x5f, 0xfe, 0x23, 0xdf, 0xbc, 0x15, 0x32, 0x8d, 0x29, 0x52, 0x48, 0xc4, 0x63, 0x24,
	0xa7, 0x1f, 0x7e, 0x37, 0xa1, 0xfd, 0xe8, 0x2c, 0x5e, 0x9c, 0x03, 0x3b, 0x86, 0x96, 0x16, 0x0a,
	0x49, 0x73, 0x95, 0x05, 0x8d, 0x41, 0x63, 0xe4, 0x85, 0x5b, 0xc0, 0xce, 0xe1, 0x28, 0x31, 0x2a,
	0xc2, 0x4f, 0xae, 0x32, 0x89, 0x14, 0x34, 0x6d, 0x83, 0x9f, 0x18, 0x35, 0xab, 0x10, 0x3b, 0x01,
	0x20, 0xf1, 0x85, 0xd1, 0xa2, 0xd0, 0x48, 0x81, 0xe7, 0x1c, 0x4a, 0x72, 0x5f, 0x02, 0x16, 0x41,
	0x77, 0x8d, 0x5c, 0x9b, 0x1c, 0x7f, 0x97, 0xa6, 0xa0, 0x37, 0xf0, 0x46, 0xfe, 0xf4, 0x7a, 0xbc,
	0x1b, 0xb2, 0xbe, 0xda, 0xf8, 0xc9, 0xe9, 0xaa, 0x4f, 0x9a, 0x25, 0x3a, 0x2f, 0xc2, 0xce, 0xba,
	0x4e, 0xfb, 0x4b, 0xe8, 0xfd, 0xd5, 0xc8, 0xba, 0xe0, 0xbd, 0x63, 0x61, 0x23, 0xb5, 0xc2, 0xb2,
	0x64, 0x37, 0x70, 0xf0, 0xc1, 0xa5, 0x41, 0x9b, 0xc2, 0x9f, 0x9e, 0xed, 0xcd, 0xaf, 0xfb, 0x84,
	0xae, 0xfb, 0xae, 0x79, 0xdb, 0x18, 0xbe, 0x42, 0xbb, 0xfe, 0x93, 0x3d, 0x43, 0x67, 0xfb, 0xc8,
	0x3a, 0x17, 0x4b, 0xb2, 0xa3, 0xfc, 0xe9, 0xe9, 0x9e, 0xed, 0x43, 0x2a, 0x8d, 0x4a, 0xe6, 0xee,
	0x14, 0x61, 0xbb, 0x92, 0xcd, 0x9d, 0x6a, 0x71, 0x68, 0x4f, 0x73, 0xf5, 0x13, 0x00, 0x00, 0xff,
	0xff, 0x52, 0xec, 0x1f, 0x79, 0x0a, 0x02, 0x00, 0x00,
}
