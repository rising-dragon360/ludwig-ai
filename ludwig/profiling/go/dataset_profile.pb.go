// A whylogs-based dataset profile.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: ludwig/profiling/proto/dataset_profile.proto

package dataset_profile

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Dataset profile represents a collection of in-memory profiling stats for a
// dataset. Used for recommending Ludwig configs and Ludwig data type inference.
type DatasetProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// When the profile was calculated.
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The number of examples in this dataset.
	NumExamples int64 `protobuf:"varint,2,opt,name=num_examples,json=numExamples,proto3" json:"num_examples,omitempty"`
	// The total size of this dataset in bytes.
	SizeBytes int64 `protobuf:"varint,3,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty"`
	// Map of feature name to FeatureProfile.
	FeatureProfiles map[string]*FeatureProfile `protobuf:"bytes,20,rep,name=feature_profiles,json=featureProfiles,proto3" json:"feature_profiles,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DatasetProfile) Reset() {
	*x = DatasetProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ludwig_profiling_proto_dataset_profile_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatasetProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetProfile) ProtoMessage() {}

func (x *DatasetProfile) ProtoReflect() protoreflect.Message {
	mi := &file_ludwig_profiling_proto_dataset_profile_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetProfile.ProtoReflect.Descriptor instead.
func (*DatasetProfile) Descriptor() ([]byte, []int) {
	return file_ludwig_profiling_proto_dataset_profile_proto_rawDescGZIP(), []int{0}
}

func (x *DatasetProfile) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *DatasetProfile) GetNumExamples() int64 {
	if x != nil {
		return x.NumExamples
	}
	return 0
}

func (x *DatasetProfile) GetSizeBytes() int64 {
	if x != nil {
		return x.SizeBytes
	}
	return 0
}

func (x *DatasetProfile) GetFeatureProfiles() map[string]*FeatureProfile {
	if x != nil {
		return x.FeatureProfiles
	}
	return nil
}

// Feature profile represents a collection of in-memory profiling stats for a
// single feature column.
type FeatureProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whylogs metrics.
	// optional whylogs.ColumnMessage whylogs_metrics = 1;
	WhylogsMetrics *ColumnMessage `protobuf:"bytes,1,opt,name=whylogs_metrics,json=whylogsMetrics,proto3" json:"whylogs_metrics,omitempty"`
}

func (x *FeatureProfile) Reset() {
	*x = FeatureProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ludwig_profiling_proto_dataset_profile_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureProfile) ProtoMessage() {}

func (x *FeatureProfile) ProtoReflect() protoreflect.Message {
	mi := &file_ludwig_profiling_proto_dataset_profile_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureProfile.ProtoReflect.Descriptor instead.
func (*FeatureProfile) Descriptor() ([]byte, []int) {
	return file_ludwig_profiling_proto_dataset_profile_proto_rawDescGZIP(), []int{1}
}

func (x *FeatureProfile) GetWhylogsMetrics() *ColumnMessage {
	if x != nil {
		return x.WhylogsMetrics
	}
	return nil
}

var File_ludwig_profiling_proto_dataset_profile_proto protoreflect.FileDescriptor

var file_ludwig_profiling_proto_dataset_profile_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x6c, 0x75, 0x64, 0x77, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69,
	0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x1a,
	0x2d, 0x6c, 0x75, 0x64, 0x77, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e,
	0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x77, 0x68, 0x79, 0x6c, 0x6f, 0x67, 0x73, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb6,
	0x02, 0x0a, 0x0e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x21, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x5f, 0x0a, 0x10, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x1a, 0x63, 0x0a, 0x14, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x59, 0x0a, 0x0e, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x47, 0x0a, 0x0f, 0x77, 0x68, 0x79,
	0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x0e, 0x77, 0x68, 0x79, 0x6c, 0x6f, 0x67, 0x73, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6c, 0x75, 0x64, 0x77, 0x69, 0x67, 0x2d, 0x61, 0x69, 0x2f, 0x6c, 0x75, 0x64, 0x77, 0x69,
	0x67, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ludwig_profiling_proto_dataset_profile_proto_rawDescOnce sync.Once
	file_ludwig_profiling_proto_dataset_profile_proto_rawDescData = file_ludwig_profiling_proto_dataset_profile_proto_rawDesc
)

func file_ludwig_profiling_proto_dataset_profile_proto_rawDescGZIP() []byte {
	file_ludwig_profiling_proto_dataset_profile_proto_rawDescOnce.Do(func() {
		file_ludwig_profiling_proto_dataset_profile_proto_rawDescData = protoimpl.X.CompressGZIP(file_ludwig_profiling_proto_dataset_profile_proto_rawDescData)
	})
	return file_ludwig_profiling_proto_dataset_profile_proto_rawDescData
}

var file_ludwig_profiling_proto_dataset_profile_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_ludwig_profiling_proto_dataset_profile_proto_goTypes = []interface{}{
	(*DatasetProfile)(nil), // 0: dataset_profile.DatasetProfile
	(*FeatureProfile)(nil), // 1: dataset_profile.FeatureProfile
	nil,                    // 2: dataset_profile.DatasetProfile.FeatureProfilesEntry
	(*ColumnMessage)(nil),  // 3: dataset_profile.ColumnMessage
}
var file_ludwig_profiling_proto_dataset_profile_proto_depIdxs = []int32{
	2, // 0: dataset_profile.DatasetProfile.feature_profiles:type_name -> dataset_profile.DatasetProfile.FeatureProfilesEntry
	3, // 1: dataset_profile.FeatureProfile.whylogs_metrics:type_name -> dataset_profile.ColumnMessage
	1, // 2: dataset_profile.DatasetProfile.FeatureProfilesEntry.value:type_name -> dataset_profile.FeatureProfile
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_ludwig_profiling_proto_dataset_profile_proto_init() }
func file_ludwig_profiling_proto_dataset_profile_proto_init() {
	if File_ludwig_profiling_proto_dataset_profile_proto != nil {
		return
	}
	file_ludwig_profiling_proto_whylogs_messages_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ludwig_profiling_proto_dataset_profile_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatasetProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ludwig_profiling_proto_dataset_profile_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ludwig_profiling_proto_dataset_profile_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ludwig_profiling_proto_dataset_profile_proto_goTypes,
		DependencyIndexes: file_ludwig_profiling_proto_dataset_profile_proto_depIdxs,
		MessageInfos:      file_ludwig_profiling_proto_dataset_profile_proto_msgTypes,
	}.Build()
	File_ludwig_profiling_proto_dataset_profile_proto = out.File
	file_ludwig_profiling_proto_dataset_profile_proto_rawDesc = nil
	file_ludwig_profiling_proto_dataset_profile_proto_goTypes = nil
	file_ludwig_profiling_proto_dataset_profile_proto_depIdxs = nil
}
